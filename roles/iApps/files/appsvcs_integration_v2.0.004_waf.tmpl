cli admin-partitions {
    update-partition Common
}
sys application template /Common/appsvcs_integration_v2.0.004_waf {
    actions {
        definition {
            html-help {
            }
            implementation {
# Copyright (c) 2017 F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
#
package require base64

set startTime [clock seconds]
set bundler_timestamp [clock format $startTime -format {%Y%m%d%H%M%S}]

set NAME "F5 Application Services Integration iApp (Community Edition)"
set TMPLNAME "appsvcs_integration_v2.0._waf"
set IMPLMAJORVERSION "2.0"
set IMPLMINORVERSION "004"
set IMPLVERSION [format "%s.%s" $IMPLMAJORVERSION $IMPLMINORVERSION]
set POSTDEPLOY_DELAY 0

if { [tmsh::get_field_value [lindex [tmsh::get_config sys scriptd log-level] 0] log-level] eq "debug" } {
  set iapp__logLevel 10
}

# Print a timestamped debug message to /var/tmp/scriptd.out
# Input: headers = TCL list of headers for the log message
#        msg = The message to log
#        level = Integer indicated the log level for this message
proc debug { headers msg level } {
  if { $::iapp__logLevel >= $level } {
    set systemTime [clock seconds]
    set brackets ""
    if { [llength $headers] > 0 } {
      set brackets [format "\[%s\]" [join $headers "\]\["]]
    }
    set pre [format "\[%s %s\]\[%s\]%s" [clock format $systemTime -format %D] [clock format $systemTime -format %H:%M:%S] $::app $brackets]
    puts [format "%s %s" $pre [string map [list "\n" "\n$pre " ] $msg]]
  }
}

# Credit for psplit: http://wiki.tcl.tk/1499
# Perform the equivalent of a split on a string except protect an escaped split character in the input
# Input: str = the string to split
#        seps = the charater(s) to split by
# Return: list $strings
proc psplit { str seps {protector "\\"}} {
    set out [list]
    set prev ""
    set current ""
    foreach c [split $str ""] {
        if { [string first $c $seps] >= 0 } {
            if { $prev eq $protector } {
                set current [string range $current 0 end-1]
                append current $c
            } else {
                lappend out $current
                set current ""
            }
            set prev ""
        } else {
            append current $c
            set prev $c
        }
    }

    if { $current ne "" } {
        lappend out $current
    }

    return $out
}

# Figure out which type of environment we are executing in.
# Return: list $mode $folder $partition $routedomainid $newdeploy
# Modes: 1 = Standalone
#        2 = iWorkflow UNUSED/LEGACY
#        3 = Cisco APIC
#        4 = VMware NSX
proc get_mode { } {
  set folder [tmsh::pwd]
  set app $tmsh::app_name
  set partition [lindex [split $folder /] 1]
  set newdeploy [catch {tmsh::get_config sys application service /$partition/$app.app/$app}]
  debug [list get_mode] [format "starting folder=%s partition=%s newdeploy=%s" $folder $partition $newdeploy] 10

  if { ! $newdeploy } {
    set ::asoobj [lindex [lindex [tmsh::get_config sys application service /$partition/$app.app/$app] 0] 4]
  }
  # Set the routedomain to the partition default-route-domain
  if { [string tolower $::iapp__routeDomain] eq "auto"} {
    set obj [tmsh::get_config auth partition $partition default-route-domain]
    set routedomainid [tmsh::get_field_value [lindex $obj 0] default-route-domain]
    debug [list get_mode set_route_domain] [format "Using partition default-route-domain; routedomainid=%s" $routedomainid] 10
  } else {
    set routedomainid $::iapp__routeDomain
    debug [list get_mode set_route_domain] [format "Using route domain override; routedomainid=%s" $routedomainid] 10
  }

  # Check for a mode override in $iapp__mode variable
  if { [string tolower $::iapp__mode] ne "auto" } {
    if { $::iapp__mode > 0 && $::iapp__mode < 4 } {
      debug [list get_mode mode_override] [format "Mode override detected.  Setting mode to %s" $::iapp__mode] 10
      return [list $::iapp__mode $folder $partition $routedomainid $newdeploy]
    } else {
      error "The mode override specified is invalid."
    }
  }

  # Check for a partition that starts with apic_ and return APIC mode (3) and RD if found
  if { [string match -nocase "apic_*" $partition] || [string match -nocase "apic-*" $partition] } {
    debug [list get_mode apic] "partition starts with apic_, assuming APIC deployment mode (3)" 10
    set rdobjs [tmsh::get_config net route-domain "/$partition/$partition" id]
    set routedomainid [tmsh::get_field_value [lindex $rdobjs 0] "id"]
    debug [list get_mode apic] [format "rdobjs=%s routedomainid=%s" $rdobjs $routedomainid] 10
    return [list 3 $folder $partition $routedomainid $newdeploy]
  }

  # Check for an $app name that is formatted like this:
  # edge-<#>_<#>_virtualserver-<#>-serviceprofile-<#>
  # and return NSX mode (4)
  if { [regexp -nocase {^edge-[0-9]+_[0-9]+_virtualserver-[0-9]+-serviceprofile-[0-9]+$} $::app] } {
    debug [list get_mode nsx] "app name matches NSX regexp, assuming NSX deployment mode (4)" 10
    return [list 4 $folder $partition $routedomainid $newdeploy]
  }

  # Default is Standalone mode
  debug [list get_mode standalone] "no integration vendor found, assuming Standalone deployment mode (1)" 10
  return [list 1 $folder $partition $routedomainid $newdeploy]
}

# Create a specfic option command and return it
# Input: $debug_id, $input_var, $option_string
# Return: string $cmd
proc generic_add_option { debug_id input_var option_string custom_format replace_commas } {
  set cmd " "
  if { [string length $input_var] > 0 } {
      if { $replace_commas == 1 } {
        set input_var [string map {"," " "} $input_var]
      }

      if { [string length $custom_format] > 0 } {
        set cmd [format $custom_format $input_var]
      } else {
        set cmd [format " $option_string \"%s\"" $input_var]
      }
      debug [lappend debug_id generic_add_option] [format "cmd=%s" $cmd] 10
  }
  return $cmd
}

# Check to see if an ip has a routedomain included.
# Return: 0=false; 1=true
proc has_routedomain { ip } {
  return [string match *%* $ip]
}

# Replace a profile within a virtual server definition while preserving the existing context
# Input: $obj = tmsh obj representing profiles section of the VS get_config
#        $oldprofile = name of the profile to replace
#        $newprofile = name of the new profile
# Return: string $newprofiles (string suitable for providing to replace-all-with option)
proc replace_profile { obj oldprofile newprofile } {
  set profiles [tmsh::get_field_value [lindex $obj 0] "profiles"]
  set newprofiles " { "
  foreach profile $profiles {
      set junk [lindex $profile 0]
      set name [lindex $profile 1]
      set contextobj [lindex $profile 2]
      set context [lindex $contextobj 1]
      if { $name eq $oldprofile } {
          debug [list replace_profile] [format "replace profile '%s' with '%s' context=%s" $name $newprofile $context] 10
          append newprofiles [format "%s { context %s } " $newprofile $context]
      } else {
          debug [list replace_profile] [format "preserve profile '%s' context=%s" $name $context] 10
          append newprofiles [format "%s { context %s } " $name $context]
      }
  }
  append newprofiles " } "
  return $newprofiles
}

# Look at a tmsh profile object and determine if $option is a valid profile option
# Input: $obj = tmsh obj to check
#        $option = option name to look for
# Return: 1=Valid option; 0=Invalid option
proc is_valid_profile_option { obj option } {
    debug [list is_valid_profile_option obj] [format "%s" $obj] 11
    debug [list is_valid_profile_option option] [format "looking for %s" $option] 11
    set found 0
    set fdx 0
    set fields [tmsh::get_field_names value $obj]
    set fields2 [tmsh::get_field_names nested $obj]
    debug [list is_valid_profile_option fields] [format "%s" $fields] 11
    debug [list is_valid_profile_option fields2] [format "%s" $fields2] 11
    set field_count [llength $fields]
    while { $fdx < $field_count } {
        set field [lindex $fields $fdx]
        if { $field == $option } {
          return 1
        }
        incr fdx
    }
    set field_count [llength $fields2]
    set fdx 0
    while { $fdx < $field_count } {
        set field [lindex $fields2 $fdx]
        if { $field == $option } {
          return 1
        }
        incr fdx
    }
    return 0
}

# Process a string in the format key1=val1[;keyX=valX] and return an array
# Input: $string = string to process
# Return: array { key1 {val1} ... keyX{valX}}
proc process_kvp_string { string } {
  debug [list process_kvp_string] "processing string: $string" 10
  set pairs [psplit $string ";"]
  array set ret {}
  foreach pair $pairs {
    set key [lindex [split $pair =] 0]
    set val [lindex [split $pair =] 1]
    set ret($key) $val
    debug [list process_kvp_string] "pair=$pair key=$key val=$val" 10
  }
  return [array get ret]
}

# Create an object name
# Input: $append = string to append
# Return: $string
proc create_obj_name { append } {
  return [format "%s/%s_%s" $::app_path $::app $append]
}

# Safely change a variable to a new value.  Updates the var value and modifies the ASO with the new value
# Input: $name = name of variable
#       $value = new value of the variable
# Return: none
proc change_var { name value } {
  debug [list change_var] "updating variable $name to $value (executes post-deployment)" 10
  set varcmd [create_escaped_tmsh [format "tmsh::modify sys application service %s/%s variables modify \{ %s \{ value \"%s\" \} \}" $::app_path $::app $name $value]]
  debug [list change_var tmsh_modify_deferred] $varcmd 1
  lappend ::postfinal_deferred_cmds $varcmd
  set [subst ::$name] $value
  set ::aso_config($name) $value
  return
}

# Check to see if an incoming variable is different than whats stored in the ASO.
# Input: $name = name of variable
# Return: 1=value is different; 0=value not different OR not a redeploy
proc is_new_value { name } {
  if { $::newdeploy } {
    return 0
  }
  set varvalue [get_var $name]
  debug [list is_new_value] [format "name=%s asovalue=%s varvalue=%s" $name $varvalue [set [subst ::$name]]] 10
  if { [set [subst ::$name]] == $varvalue } {
    return 0
  }
  return 1
}

# Get the variable value in the ASO.
# Input: $name = name of variable
#        $orig = return the original value, not the runtime updated one
# Return: $string = value of variable
proc get_var { name { orig 0 }} {
  if { $::newdeploy == 1} {
    return ""
  }
  debug [list get_var] [format "start name=%s" $name] 10

  if { $orig == 0 && [info exists ::aso_config($name)] } {
    set varvalue $::aso_config($name)
    debug [list get_var] [format "name=%s value=%s" $name $varvalue] 10
    return $varvalue
  }

  if { $orig == 1 && [info exists ::aso_config_orig($name)] } {
    set varvalue $::aso_config_orig($name)
    debug [list get_var original] [format "name=%s value=%s" $name $varvalue] 10
    return $varvalue
  }
  return ""
}

# Safely handle the removal of a virtual server option on redeployment
# Input: $name = name of variable
#        $checkvalue = the string that disables the option
#        $option = TMSH name of the option
#        $module = the BIG-IP module that enables the option
# Return: 1=Option removed; 0=no action taken
proc handle_opt_remove_on_redeploy { name checkvalue option module } {
  if { ! $::redeploy || $::pool__addr eq "255.255.255.254" } {
    debug [list handle_opt_remove_on_redeploy $name] "not a redeployment, skipping" 10
    return 0
  }

  if { ! [is_provisioned $module] } {
    debug [list handle_opt_remove_on_redeploy $name] [format "%s not provisioned, skipping" $module] 10
    return 0
  }

  set vsname [get_var vs__Name 1]
  set vsobj [lindex [tmsh::get_config ltm virtual $::app_path/$vsname all-properties] 0]
  if { [is_valid_profile_option $vsobj $option] == 0 } {
    debug [list handle_opt_remove_on_redeploy $name] [format "%s not available, skipping" $option] 10
    return 0
  }

  if { [set [subst ::$name]] == $checkvalue && \
       [is_new_value $name] && \
       $::redeploy } {
        debug [list handle_opt_remove_on_redeploy] [format "%s %s on redeploy, setting %s to none" $name $checkvalue $option] 10
        set cmd [format "ltm virtual %s/%s %s none" $::app_path $vsname $option]
        debug [list handle_opt_remove_on_redeploy tmsh_modify] $cmd 1
        tmsh::modify $cmd
        return 1
  }
  return 0
}

# Check provisioning cache for whether a specified module is provisioned and at what levels
# Adapted from original code including the F5 iApp TCL helper library
# Input: $module = name of the module
# Output: $level = integer representation of the provisioning level.  See levels array below
proc is_provisioned { module } {
  array set levels {
    none      0
    minimum   1
    nominal   2
    dedicated 3
  }

  if { [info exists ::__provision_cache($module)] } {
    debug [list is_provisioned cache_hit] "$module $::__provision_cache($module)" 10
    return [expr { $levels($::__provision_cache($module)) >= 1 }]
  } else {
    debug [list is_provisioned cache_miss] "$module" 10
    return -1
  }
}

# Load provisioning cache with module provisioning levels
# Adapted from original code including the F5 iApp TCL helper library
proc load_provisioned { } {
  array set levels {
    none      0
    minimum   1
    nominal   2
    dedicated 3
  }
  set obj [tmsh::get_config sys provision]
  foreach mod $obj {
    set modname [lindex $mod 2]
    set modlevel [lindex $mod 3]
    if { [llength $modlevel] == 2 } {
      set modlevel [lindex $modlevel 1]
    } else {
      set modlevel none
    }
    set ::__provision_cache($modname) $modlevel
    debug [list load_provisioned cache_set] "$modname $modlevel" 10
  }
}

# Consume an APL table and return a list containing the values of the var specified in $key
# Input: $table = the raw APL table
#        $key = the name of the variable to add to the return list
# Output: $retlist = A list of strings
proc single_column_table_to_list { table key } {
  set retlist {}
  foreach row $table {
    array unset column

    # extract the iApp table data - borrowed from f5.lbaas.tmpl
    foreach column_data [lrange [split [join $row] "\n"] 1 end-1] {
      set name [lindex $column_data 0]
      set column($name) [lrange $column_data 1 end]
    }
    if { [info exists column($key)] && [string length $column($key)] > 0 } {
      lappend retlist "$column($key)"
    }

  }
  return $retlist
}

# Process a string in the format <option>[=<value>][;<option2>[=<value2>]] and return a
# properly formatted TMSH string.  If $tmsh is specified than options will be verified
# using the object in $template.  This works for things like profiles, but not virtual
# servers.  Specifying no value for $tmsh turns off checking
# Input: $option_str = string to process
#        $tmsh = the portion of the tmsh command get a list of all-properties
#        $template = the object name to use as a list of available options
#        $add_default = add a 'defaults-from' option using the value of $template
#                       if not found in the string
proc process_options_string { option_str tmsh template {add_default 0} } {
  debug [list process_options_string] [format "option_str=%s tmsh=%s template=%s add_default=%s" $option_str $tmsh $template $add_default] 10
  set ret ""

  # Get all the options passed in array format
  array set options [process_kvp_string $option_str]

  if { $add_default && ![info exists options(defaults-from)] } {
    debug [list process_options_string add_default] "defaults-from $template" 10
    set options(defaults-from) $template
  }

  # Get the supported options for a profile type
  foreach {option value} [array get options] {
    if { [string length $tmsh] > 0 } {
      set profileobj [lindex [tmsh::get_config ltm $tmsh $template all-properties] 0]
      if { [is_valid_profile_option $profileobj $option] == 0 } {
        error "The option \"$option\" for $tmsh is not valid"
      }
    }

    # Handle options that have no value
    if { [string length $value] == 0 } {
      debug [list process_options_string $option] [format "found empty value, appending option '%s' only" $option] 10
      append ret [format "%s " $option]
      continue
    }

    # Handle TMOS set value operations (add,delete,replace,default,none).  Input format for the value is:
    #   set_<operation>:item1[,item2]
    # Operations other than valid ones will fall through this logic to the default behaviour below
    set set_skip 0
    set set_raw 0
    if { [string match "set_*" $value] } {
      set set_cmd_prefix ""
      set set_cmd_postfix " \} "
      switch -glob [string tolower $value] {
        set_add:* {
          set set_cmd_prefix "add \{ "
        }
        set_delete:* {
          set set_cmd_prefix "delete \{ "
        }
        set_replace:* {
          set set_cmd_prefix "replace-all-with \{ "
        }
        set_raw:* {
          set set_cmd_prefix ""
          set set_cmd_postfix ""
          set set_raw 1
        }
        set_default {
          set set_cmd_prefix "default "
          set set_cmd_postfix ""
          set value ""
        }
        set_none {
          set set_cmd_prefix "none "
          set set_cmd_postfix ""
          set value ""
        }
        default {
          set set_skip 1
        }
      }
      debug [list process_options_string $option] [format "found set_ value, prefix='%s' postfix='%s' skip=%s" $set_cmd_prefix $set_cmd_postfix $set_skip] 10

      if { !$set_skip } {
        set set_list [string map {, " "} [lindex [psplit $value ':'] 1]]
        debug [list process_options_string $option] [format " set_list=%s" $set_list] 10
        append ret [format "%s %s %s %s" $option $set_cmd_prefix $set_list $set_cmd_postfix]
        continue
      }
    }

    # Handle the default behaviour
    debug [list process_options_string $option] [format "dropped to default"] 10
    if { $set_raw } {
      append ret [format "%s %s " $option $value]
    } else {
      append ret [format "%s \"%s\" " $option $value]
    }
  }
  array unset options
  debug [list process_options_string return] $ret 10
  return $ret
}

# Split a string and return items matching a prefix in a TCL list
# Input: prefix = the prefix to match
#        string = the string to split
#        splitchar = the charecter to split on (DEFAULT is " ")
#        strip = 1 value strips the prefix from the returned list
#                0 (DEFAULT) does nothing
# Return: retlist = a list of matching strings
proc get_items_starting_with { prefix string {splitchar " "} {strip 0}} {
  set parts [psplit $string $splitchar]
  debug [list get_items_starting_with start] "prefix=$prefix string=$string splitchar=$splitchar strip=$strip" 10
  set retlist []
  foreach part $parts {
    if { [string match $prefix* $part] } {
      if { $strip == 1 } {
        lappend retlist [string map [list $prefix ""] $part]
      } else {
        lappend retlist $part
      }
    }
  }
  debug [list get_items_starting_with retlist] $retlist 10
  return [string map [list "\\?" "?"] $retlist]
}

# Properly escape a tmsh command string
# Input: string = the tmsh command
# Return: string = the modified string
proc create_escaped_tmsh { string } {
  return [string map [list \{ \\\{ \} \\\} \" \\\"] $string]
}

# Set TMOS version info in a global array.  We read info from the /VERSION
# file and populate the array with that information.
proc set_version_info {} {
  global version_info
  array set version_info {}
  set fh [open "/VERSION" r]
  set file_data [read $fh]
  close $fh
  set data [split $file_data "\n"]
  foreach line $data {
    set line_info [split $line ":"]
    set ::version_info([string tolower [lindex $line_info 0]]) [string trim [lindex $line_info 1]]
  }
  return 1
}

# Run the cURL command and save the URL to a file.  Throws a hard error if cURL
# exits uncleanly
# Input: string url = URL to fetch
#        string filename = filename to save output to
#        int error_exit = 1 => throw hard error on non 200 response code
#                         >1 => ignore error and return response code
proc curl_save_file { url filename {error_exit 1}} {
  debug [list curl_save_file start] "url=$url filename=$filename error_exit=$error_exit" 9
  set status [catch {
    exec curl --connect-timeout 5 -k -s -w 'RESPCODE=\%\{response_code\}' -o $filename $url
  } message]

  debug [list curl_save_file done] "status=$status message=$message" 9

  if { ![string match "*RESPCODE=200*" $message] } {
    if { $error_exit == 1} {
      error "Error occured while trying to retrieve $url: $message"
    } else {
        return 0
    }
  }

  return 1
}

# Borrowed from tcllib ::ip::IPv4?
# Check a string to see if it's an IPv6 address
# Input: string addr = string to check
# Output: 1 = is IPv6
#         0 = not IPv6
proc is_ipv6 { addr } {
  if { [has_routedomain $addr] } {
    set addr [lindex [split $addr %] 0]
  }
  if {[string first : $addr] >= 0} {
      return 1
  }
  return 0
}

# Borrowed from http://wiki.tcl.tk/989
# Check a string to see if it's an IPv4 address
# Input: string addr = string to check
# Output: 1 = is IPv4
#         0 = not IPv4
proc is_ipv4 { addr } {
  if { [has_routedomain $addr] } {
    set addr [lindex [split $addr %] 0]
  }
  if {[regexp {^\d+\.\d+\.\d+\.\d+$} $addr]
      && [scan $addr %d.%d.%d.%d a b c d] == 4
      && 0 <= $a && $a <= 255 && 0 <= $b && $b <= 255
      && 0 <= $c && $c <= 255 && 0 <= $d && $d <= 255} {
    return 1
  } else {
    return 0
  }
}

# Check a string to see if it's a IPv4 or IPv6 address
# Input: string addr = string to check
# Output: >1 = is address (4 = IPv4, 6 = IPv6)
#         0 = is NOT an address
proc is_ip { addr } {
  set v4 [is_ipv4 $addr]
  debug [list is_ip $addr v4] $v4 10
  if { $v4 } { return 4 }
  set v6 [is_ipv6 $addr]
  debug [list is_ip $addr v6] $v6 10
  if { $v6 } { return 6 }
  return 0
}

# Return a route-domain aware destination address
# Input: string = addr to check/modify
# Return: string = the correctly formatted destination address
proc get_dest_addr { addr } {
  if { [is_ipv6 $addr] } {
    set addr [string map {[ "" ] ""} $addr]
  }

  if { ![has_routedomain $addr]} {
    return [format "%s%%%s" $addr $::rd]
  } else {
    return $addr
  }
}

# Return a IPv4/v6 route-domain aware destination string
# Input: string addr = The address to use
#        strint port = The port number
# Return: string = the correctly formatted destination string
proc get_dest_str { addr port } {
  if { [is_ipv6 $addr] } {
    set addr [string map {[ "" ] ""} $addr]
    if { ![has_routedomain $addr] } {
      return [format "%s%%%s.%s" $addr $::rd $port]
    } else {
      return [format "%s.%s" $addr $port]
    }
  }

  if { ![has_routedomain $addr]} {
    return [format "%s%%%s:%s" $addr $::rd $port]
  } else {
    return [format "%s:%s" $addr $port]
  }
}

# Convert a APL table row into an array keyed on the column name
# Input: list row = The APL TCL list object for the row
#        string arrayRef = The name of the existing array to populate
#        string defaultsRef = The name of the array to use for default values
#        list nullColumns = A list of column names that may contain the keyword
#                           'none'.  The value will be replaced with "" on return
proc table_row_to_array { row array_ref {defaults_ref {}} {null_columns []} } {
  debug [list table_row_to_array row] $row 10
  debug [list table_row_to_array array_ref] $array_ref 10
  debug [list table_row_to_array defaults_ref] $defaults_ref 10
  debug [list table_row_to_array null_columns] $null_columns 10

  upvar $array_ref ret
  array set defaults [subst [subst $$defaults_ref]]

  debug [list table_row_to_array default_vals] [array get defaults] 10

  # extract the iApp table data - borrowed from f5.lbaas.tmpl
  foreach data [lrange [split [join $row] "\n"] 1 end-1] {
      set name [lindex $data 0]
      set value [string map {\n \\n \r \\r} [lrange $data 1 end]]
      if { [lsearch $null_columns $name] > -1 && [string tolower $value] eq "none" } {
        set ret($name) ""
        debug [list table_row_to_array set_null] [format "%s=%s" $name $ret($name)] 10
      } else {
        set ret($name) $value
        debug [list table_row_to_array set_value] [format "%s=%s" $name $ret($name)] 10
      }
  }

  # fill in any empty table values - borrowed from f5.lbaas.tmpl
  if { [array size defaults] } {
    foreach name [array names defaults] {
      if { ![info exists ret($name)] || $ret($name) eq "" } {
          set ret($name) $defaults($name)
          debug [list table_row_to_array set_default] [format "%s=%s" $name $ret($name)] 10
      }
    }
  }
  return
}

# Check to see if a node object exists in the get_config.
# Lookups are cached in ::__node_cache for re-use
# Input:  string node_name = The object name to check for
# Return: 0 = node does not exist
#         1 = node does exist
proc check_node_exist { node_name } {
  if { ! [info exists ::__node_cache($node_name)] } {
    set node_status [catch {tmsh::get_config ltm node $node_name} node_status_ret]
    debug [list check_node_exist $node_name status] $node_status_ret 10
    if { [string match "*address*" $node_status_ret] } {
      set ::__node_cache($node_name) 1
      debug [list check_node_exist $node_name cache_set] "1" 10
      return 1
    } else {
      set ::__node_cache($node_name) 0
      debug [list check_node_exist $node_name cache_set] "0" 10
      return 0
    }
  } else {
    debug [list check_node_exist $node_name cache_hit] $::__node_cache($node_name) 10
    return $::__node_cache($node_name)
  }
}

# Perform string substitution on a URL.
# Input: string url = the URL to manipulate
# Output: string url = the final URL
proc url_subst { url } {
  debug [list url_subst] [format "url=%s" $url] 10
  set url_map [list %APP_NAME%           $::app \
                    %APP_PATH%           $::app_path \
                    %PARTITION%          $::partition \
                    %VS_NAME%            $::vs__Name \
                    %VS_DESCR%           $::vs__Description \
                    %EXT1%               $::extensions__Field1 \
                    %EXT2%               $::extensions__Field2 \
                    %EXT3%               $::extensions__Field2 \
                    "url="               "" \
                    "irule:url="         "" \
                    "irule:urloptional=" "" \
                    "asm:url="           "" \
                    "apm:url="           "" ]

  set url [string map $url_map $url]
  debug [list url_subst] [format "return=%s" $url] 10
  return $url
}

# Load a crypto cert/key from URL
# Input: string type = key|cert
#        string url = the URL to get
# Return: string obj_name = the name of the created TMOS object
proc load_crypto_object { type url } {
  set url [url_subst $url]
  debug [list load_crypto_object url_subst] $url 10

  set url_file_name [lindex [split $url /] end]
  set obj_name [format "/%s/%s_%s" $::partition $::app $url_file_name]
  set file_name [format "/var/tmp/appsvcs_%s_%s_%s" $::app $::bundler_timestamp $url_file_name]
  debug [list load_crypto_object] [format "obj_name=%s file_name=%s" $obj_name $file_name] 10

  switch -glob $type {
    cert  { set verify_cmd [format "/usr/bin/openssl x509 -noout -in %s" $file_name] }
    key { set verify_cmd [format "/usr/bin/openssl rsa -noout -in %s" $file_name] }
    default { error "The crypto type specified is not supported" }
  }

  curl_save_file $url $file_name

  set verify_status [catch {eval exec $verify_cmd} verify_status_ret]
  debug [list load_crypto_object verify_status $verify_status] $verify_status_ret 10

  if { $verify_status } {
    file delete $file_name
    error "While loading the $type: $verify_status_ret"
  }

  set cmd [format "sys file ssl-%s %s source-path file://%s" $type $obj_name $file_name]
  debug [list load_crypto_object tmsh_create] $cmd 10
  set create_status [catch {tmsh::create $cmd} create_status_ret]
  debug [list load_crypto_object create_status $create_status] $create_status_ret 10
  file delete $file_name

  return $obj_name
}

# Credit: http://www.egghelp.org/cgi-bin/tcl_archive.tcl?mode=download&id=97
# Perform a DNS lookup of a hostname using nslookup.  Assumes DNS servers are already
# configured in TMOS
# Input: string host = name of host to lookup
#        int mode = 1 => Throw a hard error
#                    0 => Return the error
# Return: string return = First IP tied to hostname OR Error
proc dns_lookup { host {mode 1} } {
  set name "Unknown"
  set ip "Unknown"
  set errmsg "Unknown"
  set host [lindex [string tolower $host] 0]
  if {[catch {eval exec "/usr/bin/nslookup" [lindex $host 0]} buff]} {
    foreach line [split $buff \n] {
      if {[string first "${host}:" $line] != -1} {
        set errmsg [string trim [lindex [split $line :] 1]]
      }
    }

    if { $mode } {
        error "An error occured trying to resolve $host: $errmsg"
    } else {
        return "Error: $errmsg"
    }
  }
  set buff [split $buff \n]
  set buff [lreplace $buff 0 1]
  if {[regexp {name = (.*)\.} $buff -> name]} { set ip $host }

  foreach data $buff {
    switch [lindex $data 0] {
      "Name:" {
        set name [string trim [lindex [split $data :] 1]]
      }
      "Address:" {
        set ip [string trim [lindex [split $data :] 1]]
      }
      "Addresses:" {
        set ip [string trim [lindex [split $data :] 1]]
      }
    }
  }
  return "${ip}"
}

set_version_info

# Copyright (c) 2017 F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
#
# ####################################################################
# Custom extensions example
#
# The purpose of custom extensions is to allow functionality to be implemented
# without modifying the base deployment code.  Additionally control over these
# extensions can be exposed via the extensions__fieldX fields to allow functionality
# to be added WITHOUT changes to the presentation layer. By exposing the extension
# fields as tenant editable we can add code to this portion of the iApp to handle
# new functionality without changing the northbound data model
#
# The following procs are called at various points during the implementation:
#   custom_extensions_start: Called at the start of the deployment after mode is determined
#   custom_extensions_before_pools:  Called before processing all pool(s) starts
#   custom_extensions_before_pool:  Called before processing to create the pool starts
#   custom_extensions_after_pool: Called immediately after the pool is created
#   custom_extensions_after_pools: Called immediately after all pool(s) are created
#   custom_extensions_before_vs:  Called before processing to create the virtual server starts
#   custom_extensions_after_vs: Called immediately after the virtual server is created
#   custom_extentions_end: Called at the end of the deployment
#
# Guidelines:
#  - Avoid name collisions please prefix variables with 'custom_' unless used by the base deployment code
#  - Restrict modifications to global presentation layer variables unless absolutely required
#  - Try to modify the config once created by the base deployment code to maintain compatibility
#
# Two examples are implemented here:
#  - custom_example_1: Called from all hooks to dump some info to the debug log
#  - custom_example_2: (Disabled by default) Called at the end of the deployment to execute
#                      a tmsh::create command

proc custom_extensions_start {} {
  debug "[lindex [info level 0] 0]" "entering proc" 6

  # Example 1: Parse a string of the format "key1=val1;key2=val2;key3=val3" and populate an array.
  # The we call the custom_example proc to dump some info to the /var/tmp/scriptd.out log

  # Make the global variable accessable locally.  Additionally create a global array to store KVP pairs
  upvar extensions__Field1 field1
  upvar custom_field1_kvp kvp_array

  # Check to see we got some data in extensions__Field1
  if { [string length $field1] > 0 } {
    # Use the process_kvp_string proc to populate an array
    array set kvp_array [process_kvp_string $field1]

    debug "[lindex [info level 0] 0]" "kvp_array=[array get kvp_array]" 0
    # Call our custom_example_1 proc to dump some info to the debug log.
    custom_example_1 [array get kvp_array]
  }
}

proc custom_extensions_before_pools {} {
  debug "[lindex [info level 0] 0]" "entering proc" 6

  # Call our custom_example_1 proc to dump some info to the debug log.
  upvar custom_field1_kvp kvp_array
  custom_example_1 [array get kvp_array]
}

proc custom_extensions_before_pool {} {
  debug "[lindex [info level 0] 0]" "entering proc" 6

  # Call our custom_example_1 proc to dump some info to the debug log.
  upvar custom_field1_kvp kvp_array
  custom_example_1 [array get kvp_array]
}

proc custom_extensions_after_pool {} {
  debug "[lindex [info level 0] 0]" "entering proc" 6

  # Call our custom_example_1 proc to dump some info to the debug log.
  upvar custom_field1_kvp kvp_array
  custom_example_1 [array get kvp_array]
}

proc custom_extensions_after_pools {} {
  debug "[lindex [info level 0] 0]" "entering proc" 6

  # Call our custom_example_1 proc to dump some info to the debug log.
  upvar custom_field1_kvp kvp_array
  custom_example_1 [array get kvp_array]
}

proc custom_extensions_before_vs {} {
  debug "[lindex [info level 0] 0]" "entering proc" 6

  # Call our custom_example_1 proc to dump some info to the debug log.
  upvar custom_field1_kvp kvp_array
  custom_example_1 [array get kvp_array]
}

proc custom_extensions_after_vs {} {
  debug "[lindex [info level 0] 0]" "entering proc" 6

  # Call our custom_example_1 proc to dump some info to the debug log.
  upvar custom_field1_kvp kvp_array
  custom_example_1 [array get kvp_array]
}

proc custom_extensions_end {} {
  debug "[lindex [info level 0] 0]" "entering proc" 6

  # Call our custom_example_1 proc to dump some info to the debug log.
  upvar custom_field1_kvp kvp_array
  custom_example_1 [array get kvp_array]

  # Call our custom_example_2 proc to run a user provided tmsh create command
  #
  # Populate extensions__Field2 with a valid command like:
  #  ltm data-group internal customDG type string records replace-all-with { record1 { data data1 } record2 { data data2 } }
  #
  # Once the template executes you can see the creation of the datagroup under the application template container

  # ** To enable example 2 uncomment the following two lines **
  # upvar extensions__Field2 field2
  # custom_example_2 $field2
}

# Example 1: Simply dump a log line to /var/tmp/scriptd.out
proc custom_example_1 { kvp_array_in } {
  set calling_proc [lindex [info level -1] 0]
  set current_proc [lindex [info level 0] 0]
  array set kvp_array $kvp_array_in

  debug [list $current_proc] "entering proc kvp_array_in=$kvp_array_in" 6

  if { [info exists kvp_array(custom_example)] && $kvp_array(custom_example) == 1} {
   debug [list $current_proc] "This is an example of a custom extension called from $calling_proc" 6
  }
}

# Example 2: Run the text in extensions__Field2 as a tmsh create command
proc custom_example_2 { cmd } {
  set calling_proc [lindex [info level -1] 0]
  set current_proc [lindex [info level 0] 0]

  debug [list $current_proc] "entering proc cmd=$cmd" 6

  if { [string length $cmd] > 0 } {
    debug [list $current_proc] "Called from $calling_proc - About the execute tmsh::create $cmd" 6
    tmsh::create $cmd
  }
}

array set bundler_objects {}
array set bundler_data {}
set bundler_deferred_cmds []

array set bundler_objects {}
array set bundler_data {}
set bundler_objects(irule:sorry_page) 1
set bundler_objects(asm:LAMP_rapid_utf-8) 1
set bundler_objects(asm:LAMP_PolicyBuilder) 1

set bundler_data(irule:sorry_page) {d2hlbiBIVFRQX1JFUVVFU1QgewogIGlmIHsgW2FjdGl2ZV9tZW1iZXJzICVQ\
T09MX05BTUUlXSA8PSAwIH0gewogICAgIEhUVFA6OnJlc3BvbmQgMjAwIGNv\
bnRlbnQgewogICAgICAgPGh0bWw+CiAgICAgICAgICA8aGVhZD4KICAgICAg\
ICAgICAgIDx0aXRsZT5BcG9sb2d5IFBhZ2U8L3RpdGxlPgogICAgICAgICAg\
PC9oZWFkPgogICAgICAgICAgPGJvZHk+CiAgICAgICAgICAgICBXZSBhcmUg\
c29ycnksIGJ1dCB0aGUgc2l0ZSB5b3UgYXJlIGxvb2tpbmcgZm9yIGlzIHRl\
bXBvcmFyaWx5IG91dCBvZiBzZXJ2aWNlCiAgICAgICAgICAgICBJZiB5b3Ug\
ZmVlbCB5b3UgaGF2ZSByZWFjaGVkIHRoaXMgcGFnZSBpbiBlcnJvciwgcGxl\
YXNlIHRyeSBhZ2Fpbi4KICAgICAgICAgIDwvYm9keT4KICAgICAgIDwvaHRt\
bD4KIH19fQoK}
set bundler_data(asm:LAMP_rapid_utf-8) {PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPHBvbGlj\
eSBpbnRlZ3JpdHlfY2hlY2s9ImVkZDliYzk5Y2I3NjdmOTEzMDRjNjQxZGJk\
MGQxMzQxIiBiaWdpcF92ZXJzaW9uPSIxMi4xLjIiIG5hbWU9Ii9Db21tb24v\
TEFNUF9yYXBpZF91dGYtOCI+CiAgPHBvbGljeV92ZXJzaW9uPgogICAgPHRp\
bWVzdGFtcD4yMDE3LTA2LTI5VDA5OjIxOjM1WjwvdGltZXN0YW1wPgogICAg\
PGRldmljZV9uYW1lPmJpZ2lwMTwvZGV2aWNlX25hbWU+CiAgICA8cG9saWN5\
X25hbWU+L0NvbW1vbi9MQU1QX3JhcGlkX3V0Zi04PC9wb2xpY3lfbmFtZT4K\
ICAgIDxsYXN0X2NoYW5nZT5CbG9ja2luZyBQb2xpY3kgU2V0dGluZyBJbGxl\
Z2FsIHBhcmFtZXRlciB2YWx1ZSBsZW5ndGggW3VwZGF0ZV06IExlYXJuIHdh\
cyBzZXQgdG8gZW5hYmxlZC4KQWxhcm0gd2FzIHNldCB0byBlbmFibGVkLgpC\
bG9jayB3YXMgc2V0IHRvIGVuYWJsZWQuIHsgYXVkaXQ6IHBvbGljeSA9IC9D\
b21tb24vTEFNUF9yYXBpZF91dGYtOCwgdXNlcm5hbWUgPSBhZG1pbiwgY2xp\
ZW50IElQID0gMTAuMTAuODYuMSB9PC9sYXN0X2NoYW5nZT4KICA8L3BvbGlj\
eV92ZXJzaW9uPgogIDxlbmNvZGluZz51dGYtODwvZW5jb2Rpbmc+CiAgPG1h\
eGltdW1faHR0cF9sZW5ndGg+ODE5MjwvbWF4aW11bV9odHRwX2xlbmd0aD4K\
ICA8bWF4aW11bV9jb29raWVfbGVuZ3RoPjgxOTI8L21heGltdW1fY29va2ll\
X2xlbmd0aD4KICA8ZGVzY3JpcHRpb24+UmFwaWQgRGVwbG95bWVudCBzZWN1\
cml0eSBwb2xpY3k8L2Rlc2NyaXB0aW9uPgogIDx0cmlnZ2VyX2FzbV9pcnVs\
ZV9ldmVudD5EaXNhYmxlZDwvdHJpZ2dlcl9hc21faXJ1bGVfZXZlbnQ+CiAg\
PGNhc2VfaW5zZW5zaXRpdmU+ZmFsc2U8L2Nhc2VfaW5zZW5zaXRpdmU+CiAg\
PG93YT5mYWxzZTwvb3dhPgogIDxpbnNwZWN0X2h0dHBfdXBsb2Fkcz5mYWxz\
ZTwvaW5zcGVjdF9odHRwX3VwbG9hZHM+CiAgPHByb3RvY29sX2ZyZWU+ZmFs\
c2U8L3Byb3RvY29sX2ZyZWU+CiAgPHBhdGhfcGFyYW1ldGVyX2hhbmRsaW5n\
PmFzIHBhcmFtZXRlcnM8L3BhdGhfcGFyYW1ldGVyX2hhbmRsaW5nPgogIDxt\
YXNrX3NlbnNpdGl2ZT50cnVlPC9tYXNrX3NlbnNpdGl2ZT4KICA8dHJ1c3Rf\
eGZmPmZhbHNlPC90cnVzdF94ZmY+CiAgPGNzcmY+CiAgICA8ZW5hYmxlZD5m\
YWxzZTwvZW5hYmxlZD4KICAgIDxzc2xfb25seT5mYWxzZTwvc3NsX29ubHk+\
CiAgICA8ZW5mb3JjZW1lbnRfbW9kZT5lbmZvcmNpbmc8L2VuZm9yY2VtZW50\
X21vZGU+CiAgICA8ZXhwaXJhdGlvbl90aW1lX2luX3NlY29uZHM+MDwvZXhw\
aXJhdGlvbl90aW1lX2luX3NlY29uZHM+CiAgPC9jc3JmPgogIDxhbGxvd2Vk\
X3Jlc3BvbnNlX2NvZGU+NDAwPC9hbGxvd2VkX3Jlc3BvbnNlX2NvZGU+CiAg\
PGFsbG93ZWRfcmVzcG9uc2VfY29kZT40MDE8L2FsbG93ZWRfcmVzcG9uc2Vf\
Y29kZT4KICA8YWxsb3dlZF9yZXNwb25zZV9jb2RlPjQwNDwvYWxsb3dlZF9y\
ZXNwb25zZV9jb2RlPgogIDxhbGxvd2VkX3Jlc3BvbnNlX2NvZGU+NDA3PC9h\
bGxvd2VkX3Jlc3BvbnNlX2NvZGU+CiAgPGFsbG93ZWRfcmVzcG9uc2VfY29k\
ZT40MTc8L2FsbG93ZWRfcmVzcG9uc2VfY29kZT4KICA8YWxsb3dlZF9yZXNw\
b25zZV9jb2RlPjUwMzwvYWxsb3dlZF9yZXNwb25zZV9jb2RlPgogIDx3ZWJf\
c2NyYXBpbmc+CiAgICA8Z3JhY2VfdGhyZXNob2xkPjEwMDwvZ3JhY2VfdGhy\
ZXNob2xkPgogICAgPHNlc3Npb25fcHJldmVudGlvbl90aHJlc2hvbGQ+NTAw\
PC9zZXNzaW9uX3ByZXZlbnRpb25fdGhyZXNob2xkPgogICAgPHJldmFsaWRh\
dGlvbl90aHJlc2hvbGQ+MjAwMDwvcmV2YWxpZGF0aW9uX3RocmVzaG9sZD4K\
ICAgIDx3ZWJfc2NyYXBpbmdfYWxhcm0+ZmFsc2U8L3dlYl9zY3JhcGluZ19h\
bGFybT4KICAgIDx3ZWJfc2NyYXBpbmdfYmxvY2s+ZmFsc2U8L3dlYl9zY3Jh\
cGluZ19ibG9jaz4KICAgIDxzZXNzaW9uX29wZW5pbmdfYW5vbWFseV9ibG9j\
az5mYWxzZTwvc2Vzc2lvbl9vcGVuaW5nX2Fub21hbHlfYmxvY2s+CiAgICA8\
c2Vzc2lvbl9vcGVuaW5nX2Fub21hbHlfYWxhcm0+ZmFsc2U8L3Nlc3Npb25f\
b3BlbmluZ19hbm9tYWx5X2FsYXJtPgogICAgPHNlc3Npb25fdHJhbnNhY3Rp\
b25zX2Fub21hbHlfYWxhcm0+ZmFsc2U8L3Nlc3Npb25fdHJhbnNhY3Rpb25z\
X2Fub21hbHlfYWxhcm0+CiAgICA8c2Vzc2lvbl90cmFuc2FjdGlvbnNfYW5v\
bWFseV9ibG9jaz5mYWxzZTwvc2Vzc2lvbl90cmFuc2FjdGlvbnNfYW5vbWFs\
eV9ibG9jaz4KICAgIDxvcGVuaW5nX2NsaWVudF9zaWRlX2ludGVncml0eV9k\
ZWZlbnNlPmZhbHNlPC9vcGVuaW5nX2NsaWVudF9zaWRlX2ludGVncml0eV9k\
ZWZlbnNlPgogICAgPG9wZW5pbmdfcmF0ZV9saW1pdGluZz5mYWxzZTwvb3Bl\
bmluZ19yYXRlX2xpbWl0aW5nPgogICAgPHNlc3Npb25zX29wZW5lZF9wZXJf\
c2Vjb25kX2luY3JlYXNlX3JhdGU+NTAwPC9zZXNzaW9uc19vcGVuZWRfcGVy\
X3NlY29uZF9pbmNyZWFzZV9yYXRlPgogICAgPHNlc3Npb25zX29wZW5lZF9w\
ZXJfc2Vjb25kX21heGltdW0+NTA8L3Nlc3Npb25zX29wZW5lZF9wZXJfc2Vj\
b25kX21heGltdW0+CiAgICA8c2Vzc2lvbnNfb3BlbmVkX3Blcl9zZWNvbmRf\
bWluaW11bT4yNTwvc2Vzc2lvbnNfb3BlbmVkX3Blcl9zZWNvbmRfbWluaW11\
bT4KICAgIDxvcGVuaW5nX21heF9wcmV2ZW50aW9uX2R1cmF0aW9uPjE4MDA8\
L29wZW5pbmdfbWF4X3ByZXZlbnRpb25fZHVyYXRpb24+CiAgICA8b3Blbmlu\
Z19kcm9wX2lwX3dpdGhfcmVwdXRhdGlvbj5mYWxzZTwvb3BlbmluZ19kcm9w\
X2lwX3dpdGhfcmVwdXRhdGlvbj4KICAgIDx0cmFuc2FjdGlvbnNfdHBzX2lu\
Y3JlYXNlX3JhdGU+NTAwPC90cmFuc2FjdGlvbnNfdHBzX2luY3JlYXNlX3Jh\
dGU+CiAgICA8dHJhbnNhY3Rpb25zX3Blcl9zZWNvbmRfbWF4aW11bT40MDA8\
L3RyYW5zYWN0aW9uc19wZXJfc2Vjb25kX21heGltdW0+CiAgICA8dHJhbnNh\
Y3Rpb25zX3Blcl9zZWNvbmRfbWluaW11bT4yMDA8L3RyYW5zYWN0aW9uc19w\
ZXJfc2Vjb25kX21pbmltdW0+CiAgICA8dHJhbnNhY3Rpb25zX21heF9wcmV2\
ZW50aW9uX2R1cmF0aW9uPjE4MDA8L3RyYW5zYWN0aW9uc19tYXhfcHJldmVu\
dGlvbl9kdXJhdGlvbj4KICAgIDxvcGVuaW5nX3BlcnNpc3RlbnRfc3RvcmFn\
ZV9pbmNvbnNpc3RlbmN5PnRydWU8L29wZW5pbmdfcGVyc2lzdGVudF9zdG9y\
YWdlX2luY29uc2lzdGVuY3k+CiAgICA8b3BlbmluZ19wZXJzaXN0ZW50X3N0\
b3JhZ2VfcmVzZXRzPnRydWU8L29wZW5pbmdfcGVyc2lzdGVudF9zdG9yYWdl\
X3Jlc2V0cz4KICAgIDxvcGVuaW5nX3BlcnNpc3RlbnRfc3RvcmFnZV9pbmNv\
bnNpc3RlbmN5X2V2ZW50c19tYXhpbXVtPjM8L29wZW5pbmdfcGVyc2lzdGVu\
dF9zdG9yYWdlX2luY29uc2lzdGVuY3lfZXZlbnRzX21heGltdW0+CiAgICA8\
b3BlbmluZ19wZXJzaXN0ZW50X3N0b3JhZ2VfaW5jb25zaXN0ZW5jeV9ldmVu\
dHNfZHVyYXRpb24+NjAwPC9vcGVuaW5nX3BlcnNpc3RlbnRfc3RvcmFnZV9p\
bmNvbnNpc3RlbmN5X2V2ZW50c19kdXJhdGlvbj4KICAgIDxvcGVuaW5nX3Bl\
cnNpc3RlbnRfc3RvcmFnZV9yZXNldHNfbWF4aW11bT4yPC9vcGVuaW5nX3Bl\
cnNpc3RlbnRfc3RvcmFnZV9yZXNldHNfbWF4aW11bT4KICAgIDxvcGVuaW5n\
X3BlcnNpc3RlbnRfc3RvcmFnZV9yZXNldHNfZHVyYXRpb24+NjAwPC9vcGVu\
aW5nX3BlcnNpc3RlbnRfc3RvcmFnZV9yZXNldHNfZHVyYXRpb24+CiAgICA8\
cGVyc2lzdGVudF9zdG9yYWdlX21heF9wcmV2ZW50aW9uX2R1cmF0aW9uPjE4\
MDA8L3BlcnNpc3RlbnRfc3RvcmFnZV9tYXhfcHJldmVudGlvbl9kdXJhdGlv\
bj4KICAgIDx1c2VfcGVyc2lzdGVudF9zdG9yYWdlPmZhbHNlPC91c2VfcGVy\
c2lzdGVudF9zdG9yYWdlPgogICAgPHBlcnNpc3RlbnRfZGF0YV92YWxpZGl0\
eV9wZXJpb2Q+MTIwPC9wZXJzaXN0ZW50X2RhdGFfdmFsaWRpdHlfcGVyaW9k\
PgogICAgPHNlc3Npb25fb3BlbmluZ19hbm9tYWx5X2VuYWJsZT50cnVlPC9z\
ZXNzaW9uX29wZW5pbmdfYW5vbWFseV9lbmFibGU+CiAgICA8c3VzcGljaW91\
c19jbGllbnRzX2FsYXJtPmZhbHNlPC9zdXNwaWNpb3VzX2NsaWVudHNfYWxh\
cm0+CiAgICA8c3VzcGljaW91c19jbGllbnRzX2Jsb2NrPmZhbHNlPC9zdXNw\
aWNpb3VzX2NsaWVudHNfYmxvY2s+CiAgICA8ZmluZ2VycHJpbnRpbmdfZW5h\
YmxlPmZhbHNlPC9maW5nZXJwcmludGluZ19lbmFibGU+CiAgICA8ZmluZ2Vy\
cHJpbnRfcmVzZXRzX2VuYWJsZWQ+ZmFsc2U8L2ZpbmdlcnByaW50X3Jlc2V0\
c19lbmFibGVkPgogICAgPGZpbmdlcnByaW50X3Jlc2V0c190aHJlc2hvbGQ+\
NTwvZmluZ2VycHJpbnRfcmVzZXRzX3RocmVzaG9sZD4KICAgIDxmaW5nZXJw\
cmludF9yZXNldHNfdGltZV93aW5kb3c+NjAwPC9maW5nZXJwcmludF9yZXNl\
dHNfdGltZV93aW5kb3c+CiAgICA8ZGV0ZWN0X3BsdWdpbnM+ZmFsc2U8L2Rl\
dGVjdF9wbHVnaW5zPgogICAgPHN1c3BpY2lvdXNfY2xpZW50c19wcmV2ZW50\
aW9uX2R1cmF0aW9uPjMwMDwvc3VzcGljaW91c19jbGllbnRzX3ByZXZlbnRp\
b25fZHVyYXRpb24+CiAgICA8cmFwaWRfc3VyZl9tYXhfc2Vjb25kc19kdXJh\
dGlvbj4zMDwvcmFwaWRfc3VyZl9tYXhfc2Vjb25kc19kdXJhdGlvbj4KICAg\
IDxyYXBpZF9zdXJmX21heF9wYWdlcz4xMjA8L3JhcGlkX3N1cmZfbWF4X3Bh\
Z2VzPgogICAgPHJhcGlkX3N1cmZfbWF4X2Rpc3RpbmN0X3BhZ2VzPjMwPC9y\
YXBpZF9zdXJmX21heF9kaXN0aW5jdF9wYWdlcz4KICAgIDxldmVudHNfc2Vx\
dWVuY2VfZW5mb3JjZW1lbnQ+ZmFsc2U8L2V2ZW50c19zZXF1ZW5jZV9lbmZv\
cmNlbWVudD4KICA8L3dlYl9zY3JhcGluZz4KICA8YmxvY2tpbmc+CiAgICA8\
ZW5mb3JjZW1lbnRfbW9kZT5ibG9ja2luZzwvZW5mb3JjZW1lbnRfbW9kZT4K\
ICAgIDx2aW9sYXRpb24gbmFtZT0iSWxsZWdhbCBhdHRhY2htZW50IGluIFNP\
QVAgbWVzc2FnZSIgaWQ9IklMTEVHQUxfU09BUF9BVFRBQ0hNRU5UIj4KICAg\
ICAgPGFsYXJtPmZhbHNlPC9hbGFybT4KICAgICAgPGJsb2NrPmZhbHNlPC9i\
bG9jaz4KICAgICAgPGxlYXJuPmZhbHNlPC9sZWFybj4KICAgICAgPHBvbGlj\
eV9idWlsZGVyX3RyYWNraW5nPmVuYWJsZWQ8L3BvbGljeV9idWlsZGVyX3Ry\
YWNraW5nPgogICAgPC92aW9sYXRpb24+CiAgICA8dmlvbGF0aW9uIG5hbWU9\
IkxvZ2luIFVSTCBleHBpcmVkIiBpZD0iUEFSU0VSX0VYUElSRURfSU5HUkVT\
U19PQkpFQ1QiPgogICAgICA8YWxhcm0+ZmFsc2U8L2FsYXJtPgogICAgICA8\
YmxvY2s+ZmFsc2U8L2Jsb2NrPgogICAgICA8bGVhcm4+ZmFsc2U8L2xlYXJu\
PgogICAgICA8cG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+ZW5hYmxlZDwvcG9s\
aWN5X2J1aWxkZXJfdHJhY2tpbmc+CiAgICA8L3Zpb2xhdGlvbj4KICAgIDx2\
aW9sYXRpb24gbmFtZT0iTG9naW4gVVJMIGJ5cGFzc2VkIiBpZD0iSUxMRUdB\
TF9JTkdSRVNTX09CSkVDVCI+CiAgICAgIDxhbGFybT5mYWxzZTwvYWxhcm0+\
CiAgICAgIDxibG9jaz5mYWxzZTwvYmxvY2s+CiAgICAgIDxsZWFybj5mYWxz\
ZTwvbGVhcm4+CiAgICAgIDxwb2xpY3lfYnVpbGRlcl90cmFja2luZz5lbmFi\
bGVkPC9wb2xpY3lfYnVpbGRlcl90cmFja2luZz4KICAgIDwvdmlvbGF0aW9u\
PgogICAgPHZpb2xhdGlvbiBuYW1lPSJWaXJ1cyBkZXRlY3RlZCIgaWQ9IlZJ\
UlVTX0RFVEVDVEVEIj4KICAgICAgPGFsYXJtPmZhbHNlPC9hbGFybT4KICAg\
ICAgPGJsb2NrPmZhbHNlPC9ibG9jaz4KICAgICAgPGxlYXJuPmZhbHNlPC9s\
ZWFybj4KICAgICAgPHBvbGljeV9idWlsZGVyX3RyYWNraW5nPmVuYWJsZWQ8\
L3BvbGljeV9idWlsZGVyX3RyYWNraW5nPgogICAgPC92aW9sYXRpb24+CiAg\
ICA8dmlvbGF0aW9uIG5hbWU9IldlYiBTZXJ2aWNlcyBTZWN1cml0eSBmYWls\
dXJlIiBpZD0iUEFSU0VSX0ZBSUxFRF9TT0FQX1NFQ1VSSVRZIj4KICAgICAg\
PGFsYXJtPmZhbHNlPC9hbGFybT4KICAgICAgPGJsb2NrPmZhbHNlPC9ibG9j\
az4KICAgICAgPGxlYXJuPmZhbHNlPC9sZWFybj4KICAgICAgPHBvbGljeV9i\
dWlsZGVyX3RyYWNraW5nPmVuYWJsZWQ8L3BvbGljeV9idWlsZGVyX3RyYWNr\
aW5nPgogICAgPC92aW9sYXRpb24+CiAgICA8dmlvbGF0aW9uIG5hbWU9IlhN\
TCBkYXRhIGRvZXMgbm90IGNvbXBseSB3aXRoIGZvcm1hdCBzZXR0aW5ncyIg\
aWQ9IlhNTF9GT1JNQVRfU0VUVElORyI+CiAgICAgIDxhbGFybT5mYWxzZTwv\
YWxhcm0+CiAgICAgIDxibG9jaz5mYWxzZTwvYmxvY2s+CiAgICAgIDxsZWFy\
bj5mYWxzZTwvbGVhcm4+CiAgICAgIDxwb2xpY3lfYnVpbGRlcl90cmFja2lu\
Zz5lbmFibGVkPC9wb2xpY3lfYnVpbGRlcl90cmFja2luZz4KICAgIDwvdmlv\
bGF0aW9uPgogICAgPHZpb2xhdGlvbiBuYW1lPSJYTUwgZGF0YSBkb2VzIG5v\
dCBjb21wbHkgd2l0aCBzY2hlbWEgb3IgV1NETCBkb2N1bWVudCIgaWQ9IlhN\
TF9XU0RMIj4KICAgICAgPGFsYXJtPmZhbHNlPC9hbGFybT4KICAgICAgPGJs\
b2NrPmZhbHNlPC9ibG9jaz4KICAgICAgPGxlYXJuPmZhbHNlPC9sZWFybj4K\
ICAgICAgPHBvbGljeV9idWlsZGVyX3RyYWNraW5nPmVuYWJsZWQ8L3BvbGlj\
eV9idWlsZGVyX3RyYWNraW5nPgogICAgPC92aW9sYXRpb24+CiAgICA8dmlv\
bGF0aW9uIG5hbWU9Ik1hbGZvcm1lZCBYTUwgZGF0YSIgaWQ9Ik1BTEZPUk1F\
RF9YTUwiPgogICAgICA8YWxhcm0+ZmFsc2U8L2FsYXJtPgogICAgICA8Ymxv\
Y2s+ZmFsc2U8L2Jsb2NrPgogICAgICA8bGVhcm4+ZmFsc2U8L2xlYXJuPgog\
ICAgICA8cG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+ZW5hYmxlZDwvcG9saWN5\
X2J1aWxkZXJfdHJhY2tpbmc+CiAgICA8L3Zpb2xhdGlvbj4KICAgIDx2aW9s\
YXRpb24gbmFtZT0iQ1NSRiBhdHRhY2sgZGV0ZWN0ZWQiIGlkPSJDU1JGIj4K\
ICAgICAgPGFsYXJtPmZhbHNlPC9hbGFybT4KICAgICAgPGJsb2NrPmZhbHNl\
PC9ibG9jaz4KICAgICAgPGxlYXJuPmZhbHNlPC9sZWFybj4KICAgICAgPHBv\
bGljeV9idWlsZGVyX3RyYWNraW5nPmVuYWJsZWQ8L3BvbGljeV9idWlsZGVy\
X3RyYWNraW5nPgogICAgPC92aW9sYXRpb24+CiAgICA8dmlvbGF0aW9uIG5h\
bWU9IkNTUkYgYXV0aGVudGljYXRpb24gZXhwaXJlZCIgaWQ9IkNTUkZfRVhQ\
SVJFRCI+CiAgICAgIDxhbGFybT5mYWxzZTwvYWxhcm0+CiAgICAgIDxibG9j\
az5mYWxzZTwvYmxvY2s+CiAgICAgIDxsZWFybj5mYWxzZTwvbGVhcm4+CiAg\
ICAgIDxwb2xpY3lfYnVpbGRlcl90cmFja2luZz5lbmFibGVkPC9wb2xpY3lf\
YnVpbGRlcl90cmFja2luZz4KICAgIDwvdmlvbGF0aW9uPgogICAgPHZpb2xh\
dGlvbiBuYW1lPSJXZWIgc2NyYXBpbmcgZGV0ZWN0ZWQiIGlkPSJXRUJfU0NS\
QVBJTkdfREVURUNURUQiPgogICAgICA8YWxhcm0+dHJ1ZTwvYWxhcm0+CiAg\
ICAgIDxibG9jaz50cnVlPC9ibG9jaz4KICAgICAgPGxlYXJuPmZhbHNlPC9s\
ZWFybj4KICAgICAgPHBvbGljeV9idWlsZGVyX3RyYWNraW5nPmVuYWJsZWQ8\
L3BvbGljeV9idWlsZGVyX3RyYWNraW5nPgogICAgPC92aW9sYXRpb24+CiAg\
ICA8dmlvbGF0aW9uIG5hbWU9IkJydXRlIEZvcmNlOiBNYXhpbXVtIGxvZ2lu\
IGF0dGVtcHRzIGFyZSBleGNlZWRlZCIgaWQ9IkJSVVRFX0ZPUkNFX0FUVEFD\
S19ERVRFQ1RFRCI+CiAgICAgIDxhbGFybT5mYWxzZTwvYWxhcm0+CiAgICAg\
IDxibG9jaz5mYWxzZTwvYmxvY2s+CiAgICAgIDxsZWFybj5mYWxzZTwvbGVh\
cm4+CiAgICAgIDxwb2xpY3lfYnVpbGRlcl90cmFja2luZz5lbmFibGVkPC9w\
b2xpY3lfYnVpbGRlcl90cmFja2luZz4KICAgIDwvdmlvbGF0aW9uPgogICAg\
PHZpb2xhdGlvbiBuYW1lPSJTT0FQIG1ldGhvZCBub3QgYWxsb3dlZCIgaWQ9\
IlNPQVBfTUVUSE9EX05PVF9BTExPV0VEIj4KICAgICAgPGFsYXJtPmZhbHNl\
PC9hbGFybT4KICAgICAgPGJsb2NrPmZhbHNlPC9ibG9jaz4KICAgICAgPGxl\
YXJuPmZhbHNlPC9sZWFybj4KICAgICAgPHBvbGljeV9idWlsZGVyX3RyYWNr\
aW5nPmVuYWJsZWQ8L3BvbGljeV9idWlsZGVyX3RyYWNraW5nPgogICAgPC92\
aW9sYXRpb24+CiAgICA8dmlvbGF0aW9uIG5hbWU9IklsbGVnYWwgbWV0YSBj\
aGFyYWN0ZXIgaW4gdmFsdWUiIGlkPSJNRVRBQ0hBUl9JTl9ERUZfUEFSQU0i\
PgogICAgICA8YWxhcm0+ZmFsc2U8L2FsYXJtPgogICAgICA8YmxvY2s+ZmFs\
c2U8L2Jsb2NrPgogICAgICA8bGVhcm4+ZmFsc2U8L2xlYXJuPgogICAgICA8\
cG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+ZW5hYmxlZDwvcG9saWN5X2J1aWxk\
ZXJfdHJhY2tpbmc+CiAgICA8L3Zpb2xhdGlvbj4KICAgIDx2aW9sYXRpb24g\
bmFtZT0iSWxsZWdhbCBtZXRhIGNoYXJhY3RlciBpbiBVUkwiIGlkPSJNRVRB\
Q0hBUl9JTl9PQkoiPgogICAgICA8YWxhcm0+ZmFsc2U8L2FsYXJtPgogICAg\
ICA8YmxvY2s+ZmFsc2U8L2Jsb2NrPgogICAgICA8bGVhcm4+ZmFsc2U8L2xl\
YXJuPgogICAgICA8cG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+ZW5hYmxlZDwv\
cG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+CiAgICA8L3Zpb2xhdGlvbj4KICAg\
IDx2aW9sYXRpb24gbmFtZT0iSlNPTiBkYXRhIGRvZXMgbm90IGNvbXBseSB3\
aXRoIGZvcm1hdCBzZXR0aW5ncyIgaWQ9IkpTT05fRk9STUFUX1NFVFRJTkci\
PgogICAgICA8YWxhcm0+ZmFsc2U8L2FsYXJtPgogICAgICA8YmxvY2s+ZmFs\
c2U8L2Jsb2NrPgogICAgICA8bGVhcm4+ZmFsc2U8L2xlYXJuPgogICAgICA8\
cG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+ZW5hYmxlZDwvcG9saWN5X2J1aWxk\
ZXJfdHJhY2tpbmc+CiAgICA8L3Zpb2xhdGlvbj4KICAgIDx2aW9sYXRpb24g\
bmFtZT0iTnVsbCBpbiBtdWx0aS1wYXJ0IHBhcmFtZXRlciB2YWx1ZSIgaWQ9\
Ik1VTFRJX1BBUlRfUEFSQU1fVkFMIj4KICAgICAgPGFsYXJtPmZhbHNlPC9h\
bGFybT4KICAgICAgPGJsb2NrPmZhbHNlPC9ibG9jaz4KICAgICAgPGxlYXJu\
PmZhbHNlPC9sZWFybj4KICAgICAgPHBvbGljeV9idWlsZGVyX3RyYWNraW5n\
PmVuYWJsZWQ8L3BvbGljeV9idWlsZGVyX3RyYWNraW5nPgogICAgPC92aW9s\
YXRpb24+CiAgICA8dmlvbGF0aW9uIG5hbWU9IklsbGVnYWwgcXVlcnkgc3Ry\
aW5nIG9yIFBPU1QgZGF0YSIgaWQ9IlFTX09SX1BPU1RfREFUQSI+CiAgICAg\
IDxhbGFybT5mYWxzZTwvYWxhcm0+CiAgICAgIDxibG9jaz5mYWxzZTwvYmxv\
Y2s+CiAgICAgIDxsZWFybj5mYWxzZTwvbGVhcm4+CiAgICAgIDxwb2xpY3lf\
YnVpbGRlcl90cmFja2luZz5lbmFibGVkPC9wb2xpY3lfYnVpbGRlcl90cmFj\
a2luZz4KICAgIDwvdmlvbGF0aW9uPgogICAgPHZpb2xhdGlvbiBuYW1lPSJJ\
bGxlZ2FsIFVSTCIgaWQ9Ik9CSl9ET0VTTlRfRVhJU1QiPgogICAgICA8YWxh\
cm0+ZmFsc2U8L2FsYXJtPgogICAgICA8YmxvY2s+ZmFsc2U8L2Jsb2NrPgog\
ICAgICA8bGVhcm4+ZmFsc2U8L2xlYXJuPgogICAgICA8cG9saWN5X2J1aWxk\
ZXJfdHJhY2tpbmc+ZW5hYmxlZDwvcG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+\
CiAgICA8L3Zpb2xhdGlvbj4KICAgIDx2aW9sYXRpb24gbmFtZT0iSWxsZWdh\
bCBwYXJhbWV0ZXIgbnVtZXJpYyB2YWx1ZSIgaWQ9IlBBUkFNX05VTUVSSUNf\
VkFMVUUiPgogICAgICA8YWxhcm0+dHJ1ZTwvYWxhcm0+CiAgICAgIDxibG9j\
az50cnVlPC9ibG9jaz4KICAgICAgPGxlYXJuPnRydWU8L2xlYXJuPgogICAg\
ICA8cG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+ZW5hYmxlZDwvcG9saWN5X2J1\
aWxkZXJfdHJhY2tpbmc+CiAgICA8L3Zpb2xhdGlvbj4KICAgIDx2aW9sYXRp\
b24gbmFtZT0iTWFsZm9ybWVkIEpTT04gZGF0YSIgaWQ9Ik1BTEZPUk1FRF9K\
U09OIj4KICAgICAgPGFsYXJtPmZhbHNlPC9hbGFybT4KICAgICAgPGJsb2Nr\
PmZhbHNlPC9ibG9jaz4KICAgICAgPGxlYXJuPmZhbHNlPC9sZWFybj4KICAg\
ICAgPHBvbGljeV9idWlsZGVyX3RyYWNraW5nPmVuYWJsZWQ8L3BvbGljeV9i\
dWlsZGVyX3RyYWNraW5nPgogICAgPC92aW9sYXRpb24+CiAgICA8dmlvbGF0\
aW9uIG5hbWU9Ik1vZGlmaWVkIGRvbWFpbiBjb29raWUocykiIGlkPSJNT0Rf\
RE9NQUlOX0NPT0tJRSI+CiAgICAgIDxhbGFybT5mYWxzZTwvYWxhcm0+CiAg\
ICAgIDxibG9jaz5mYWxzZTwvYmxvY2s+CiAgICAgIDxsZWFybj5mYWxzZTwv\
bGVhcm4+CiAgICAgIDxwb2xpY3lfYnVpbGRlcl90cmFja2luZz5lbmFibGVk\
PC9wb2xpY3lfYnVpbGRlcl90cmFja2luZz4KICAgIDwvdmlvbGF0aW9uPgog\
ICAgPHZpb2xhdGlvbiBuYW1lPSJJbGxlZ2FsIHJlcXVlc3QgY29udGVudCB0\
eXBlIiBpZD0iSUxMRUdBTF9SRVFVRVNUX0NPTlRFTlRfVFlQRSI+CiAgICAg\
IDxhbGFybT5mYWxzZTwvYWxhcm0+CiAgICAgIDxibG9jaz5mYWxzZTwvYmxv\
Y2s+CiAgICAgIDxsZWFybj5mYWxzZTwvbGVhcm4+CiAgICAgIDxwb2xpY3lf\
YnVpbGRlcl90cmFja2luZz5lbmFibGVkPC9wb2xpY3lfYnVpbGRlcl90cmFj\
a2luZz4KICAgIDwvdmlvbGF0aW9uPgogICAgPHZpb2xhdGlvbiBuYW1lPSJN\
YW5kYXRvcnkgSFRUUCBoZWFkZXIgaXMgbWlzc2luZyIgaWQ9Ik1JU1NJTkdf\
TUFOREFUT1JZX0hFQURFUiI+CiAgICAgIDxhbGFybT50cnVlPC9hbGFybT4K\
ICAgICAgPGJsb2NrPnRydWU8L2Jsb2NrPgogICAgICA8bGVhcm4+dHJ1ZTwv\
bGVhcm4+CiAgICAgIDxwb2xpY3lfYnVpbGRlcl90cmFja2luZz5lbmFibGVk\
PC9wb2xpY3lfYnVpbGRlcl90cmFja2luZz4KICAgIDwvdmlvbGF0aW9uPgog\
ICAgPHZpb2xhdGlvbiBuYW1lPSJCYWQgV2ViU29ja2V0IGhhbmRzaGFrZSBy\
ZXF1ZXN0IiBpZD0iV0VCU09DS0VUX0JBRF9SRVFVRVNUIj4KICAgICAgPGFs\
YXJtPmZhbHNlPC9hbGFybT4KICAgICAgPGJsb2NrPmZhbHNlPC9ibG9jaz4K\
ICAgICAgPGxlYXJuPmZhbHNlPC9sZWFybj4KICAgICAgPHBvbGljeV9idWls\
ZGVyX3RyYWNraW5nPmVuYWJsZWQ8L3BvbGljeV9idWlsZGVyX3RyYWNraW5n\
PgogICAgPC92aW9sYXRpb24+CiAgICA8dmlvbGF0aW9uIG5hbWU9IkZhaWx1\
cmUgaW4gV2ViU29ja2V0IGZyYW1pbmcgcHJvdG9jb2wiIGlkPSJXRUJTT0NL\
RVRfRlJBTUlOR19QUk9UT0NPTCI+CiAgICAgIDxhbGFybT5mYWxzZTwvYWxh\
cm0+CiAgICAgIDxibG9jaz5mYWxzZTwvYmxvY2s+CiAgICAgIDxsZWFybj5m\
YWxzZTwvbGVhcm4+CiAgICAgIDxwb2xpY3lfYnVpbGRlcl90cmFja2luZz5l\
bmFibGVkPC9wb2xpY3lfYnVpbGRlcl90cmFja2luZz4KICAgIDwvdmlvbGF0\
aW9uPgogICAgPHZpb2xhdGlvbiBuYW1lPSJNYXNrIG5vdCBmb3VuZCBpbiBj\
bGllbnQgZnJhbWUiIGlkPSJXRUJTT0NLRVRfRlJBTUVfTUFTS0lORyI+CiAg\
ICAgIDxhbGFybT5mYWxzZTwvYWxhcm0+CiAgICAgIDxibG9jaz5mYWxzZTwv\
YmxvY2s+CiAgICAgIDxsZWFybj5mYWxzZTwvbGVhcm4+CiAgICAgIDxwb2xp\
Y3lfYnVpbGRlcl90cmFja2luZz5lbmFibGVkPC9wb2xpY3lfYnVpbGRlcl90\
cmFja2luZz4KICAgIDwvdmlvbGF0aW9uPgogICAgPHZpb2xhdGlvbiBuYW1l\
PSJJbGxlZ2FsIFdlYlNvY2tldCBmcmFtZSBsZW5ndGgiIGlkPSJXRUJTT0NL\
RVRfRlJBTUVfTEVOR1RIIj4KICAgICAgPGFsYXJtPmZhbHNlPC9hbGFybT4K\
ICAgICAgPGJsb2NrPmZhbHNlPC9ibG9jaz4KICAgICAgPGxlYXJuPmZhbHNl\
PC9sZWFybj4KICAgICAgPHBvbGljeV9idWlsZGVyX3RyYWNraW5nPmVuYWJs\
ZWQ8L3BvbGljeV9idWlsZGVyX3RyYWNraW5nPgogICAgPC92aW9sYXRpb24+\
CiAgICA8dmlvbGF0aW9uIG5hbWU9Ik51bGwgY2hhcmFjdGVyIGZvdW5kIGlu\
IFdlYlNvY2tldCB0ZXh0IG1lc3NhZ2UiIGlkPSJXRUJTT0NLRVRfVEVYVF9O\
VUxMX1ZBTFVFIj4KICAgICAgPGFsYXJtPmZhbHNlPC9hbGFybT4KICAgICAg\
PGJsb2NrPmZhbHNlPC9ibG9jaz4KICAgICAgPGxlYXJuPmZhbHNlPC9sZWFy\
bj4KICAgICAgPHBvbGljeV9idWlsZGVyX3RyYWNraW5nPmVuYWJsZWQ8L3Bv\
bGljeV9idWlsZGVyX3RyYWNraW5nPgogICAgPC92aW9sYXRpb24+CiAgICA8\
dmlvbGF0aW9uIG5hbWU9IklsbGVnYWwgY3Jvc3Mtb3JpZ2luIHJlcXVlc3Qi\
IGlkPSJDUk9TU19PUklHSU5fUkVRVUVTVCI+CiAgICAgIDxhbGFybT5mYWxz\
ZTwvYWxhcm0+CiAgICAgIDxibG9jaz5mYWxzZTwvYmxvY2s+CiAgICAgIDxs\
ZWFybj5mYWxzZTwvbGVhcm4+CiAgICAgIDxwb2xpY3lfYnVpbGRlcl90cmFj\
a2luZz5lbmFibGVkPC9wb2xpY3lfYnVpbGRlcl90cmFja2luZz4KICAgIDwv\
dmlvbGF0aW9uPgogICAgPHZpb2xhdGlvbiBuYW1lPSJJbGxlZ2FsIFdlYlNv\
Y2tldCBleHRlbnNpb24iIGlkPSJXRUJTT0NLRVRfRVhURU5TSU9OIj4KICAg\
ICAgPGFsYXJtPmZhbHNlPC9hbGFybT4KICAgICAgPGJsb2NrPmZhbHNlPC9i\
bG9jaz4KICAgICAgPGxlYXJuPmZhbHNlPC9sZWFybj4KICAgICAgPHBvbGlj\
eV9idWlsZGVyX3RyYWNraW5nPmVuYWJsZWQ8L3BvbGljeV9idWlsZGVyX3Ry\
YWNraW5nPgogICAgPC92aW9sYXRpb24+CiAgICA8dmlvbGF0aW9uIG5hbWU9\
IklsbGVnYWwgbnVtYmVyIG9mIGZyYW1lcyBwZXIgbWVzc2FnZSIgaWQ9IldF\
QlNPQ0tFVF9GUkFNRVNfUEVSX01FU1NBR0VfQ09VTlQiPgogICAgICA8YWxh\
cm0+ZmFsc2U8L2FsYXJtPgogICAgICA8YmxvY2s+ZmFsc2U8L2Jsb2NrPgog\
ICAgICA8bGVhcm4+ZmFsc2U8L2xlYXJuPgogICAgICA8cG9saWN5X2J1aWxk\
ZXJfdHJhY2tpbmc+ZW5hYmxlZDwvcG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+\
CiAgICA8L3Zpb2xhdGlvbj4KICAgIDx2aW9sYXRpb24gbmFtZT0iSWxsZWdh\
bCBXZWJTb2NrZXQgYmluYXJ5IG1lc3NhZ2UgbGVuZ3RoIiBpZD0iV0VCU09D\
S0VUX0JJTkFSWV9NRVNTQUdFX0xFTkdUSCI+CiAgICAgIDxhbGFybT5mYWxz\
ZTwvYWxhcm0+CiAgICAgIDxibG9jaz5mYWxzZTwvYmxvY2s+CiAgICAgIDxs\
ZWFybj5mYWxzZTwvbGVhcm4+CiAgICAgIDxwb2xpY3lfYnVpbGRlcl90cmFj\
a2luZz5lbmFibGVkPC9wb2xpY3lfYnVpbGRlcl90cmFja2luZz4KICAgIDwv\
dmlvbGF0aW9uPgogICAgPHZpb2xhdGlvbiBuYW1lPSJQbGFpbiB0ZXh0IGRh\
dGEgZG9lcyBub3QgY29tcGx5IHdpdGggZm9ybWF0IHNldHRpbmdzIiBpZD0i\
UExBSU5URVhUX0ZPUk1BVF9TRVRUSU5HIj4KICAgICAgPGFsYXJtPmZhbHNl\
PC9hbGFybT4KICAgICAgPGJsb2NrPmZhbHNlPC9ibG9jaz4KICAgICAgPGxl\
YXJuPmZhbHNlPC9sZWFybj4KICAgICAgPHBvbGljeV9idWlsZGVyX3RyYWNr\
aW5nPmVuYWJsZWQ8L3BvbGljeV9idWlsZGVyX3RyYWNraW5nPgogICAgPC92\
aW9sYXRpb24+CiAgICA8aHR0cF9wcm90b2NvbF9jb21wbGlhbmNlX3NldHRp\
bmcgcG9saWN5X2J1aWxkZXJfdHJhY2tpbmc9ImVuYWJsZWQiIG5hbWU9IkJh\
ZCBtdWx0aXBhcnQvZm9ybS1kYXRhIHJlcXVlc3QgcGFyc2luZyI+ZGlzYWJs\
ZWQ8L2h0dHBfcHJvdG9jb2xfY29tcGxpYW5jZV9zZXR0aW5nPgogICAgPG1h\
eGltdW1fZGVjb2RpbmdfcGFzc2VzPjM8L21heGltdW1fZGVjb2RpbmdfcGFz\
c2VzPgogICAgPG1heGltdW1faGVhZGVycz4yMDwvbWF4aW11bV9oZWFkZXJz\
PgogICAgPG1heGltdW1fcGFyYW1ldGVycz41MDA8L21heGltdW1fcGFyYW1l\
dGVycz4KICAgIDxyZXNwb25zZV9wYWdlIGNhdXNlPSJkZWZhdWx0Ij4KICAg\
ICAgPHJlc3BvbnNlX3R5cGU+ZGVmYXVsdDwvcmVzcG9uc2VfdHlwZT4KICAg\
ICAgPHJlc3BvbnNlX2hlYWRlcj5IVFRQLzEuMSAyMDAgT0sKQ2FjaGUtQ29u\
dHJvbDogbm8tY2FjaGUKUHJhZ21hOiBuby1jYWNoZQpDb25uZWN0aW9uOiBj\
bG9zZTwvcmVzcG9uc2VfaGVhZGVyPgogICAgICA8cmVzcG9uc2VfaHRtbF9j\
b2RlPiZsdDtodG1sPiZsdDtoZWFkPiZsdDt0aXRsZT5SZXF1ZXN0IFJlamVj\
dGVkJmx0Oy90aXRsZT4mbHQ7L2hlYWQ+Jmx0O2JvZHk+VGhlIHJlcXVlc3Rl\
ZCBVUkwgd2FzIHJlamVjdGVkLiBQbGVhc2UgY29uc3VsdCB3aXRoIHlvdXIg\
YWRtaW5pc3RyYXRvci4mbHQ7YnI+Jmx0O2JyPllvdXIgc3VwcG9ydCBJRCBp\
czogJmx0OyVUUy5yZXF1ZXN0LklEKCklPiZsdDticj4mbHQ7YnI+Jmx0O2Eg\
aHJlZj0namF2YXNjcmlwdDpoaXN0b3J5LmJhY2soKTsnPltHbyBCYWNrXSZs\
dDsvYT4mbHQ7L2JvZHk+Jmx0Oy9odG1sPjwvcmVzcG9uc2VfaHRtbF9jb2Rl\
PgogICAgPC9yZXNwb25zZV9wYWdlPgogICAgPHJlc3BvbnNlX3BhZ2UgY2F1\
c2U9IlhNTCI+CiAgICAgIDxyZXNwb25zZV90eXBlPnNvYXAgZmF1bHQ8L3Jl\
c3BvbnNlX3R5cGU+CiAgICAgIDxyZXNwb25zZV9oZWFkZXI+SFRUUC8xLjEg\
MjAwIE9LCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlClByYWdtYTogbm8tY2Fj\
aGUKQ29udGVudC10eXBlOiB0ZXh0L3htbApDb25uZWN0aW9uOiBjbG9zZTwv\
cmVzcG9uc2VfaGVhZGVyPgogICAgICA8cmVzcG9uc2VfaHRtbF9jb2RlPiZs\
dDs/eG1sIHZlcnNpb249JzEuMCcgZW5jb2Rpbmc9J3V0Zi04Jz8+Jmx0O3Nv\
YXA6RW52ZWxvcGUgeG1sbnM6c29hcD0naHR0cDovL3NjaGVtYXMueG1sc29h\
cC5vcmcvc29hcC9lbnZlbG9wZS8nPiZsdDtzb2FwOkJvZHk+Jmx0O3NvYXA6\
RmF1bHQ+Jmx0O2ZhdWx0Y29kZT5zb2FwOkNsaWVudCZsdDsvZmF1bHRjb2Rl\
PiZsdDtmYXVsdHN0cmluZz5UaGUgcmVxdWVzdGVkIG9wZXJhdGlvbiB3YXMg\
cmVqZWN0ZWQuIFBsZWFzZSBjb25zdWx0IHdpdGggeW91ciBhZG1pbmlzdHJh\
dG9yLllvdXIgc3VwcG9ydCBJRCBpczogJmx0OyVUUy5yZXF1ZXN0LklEKCkl\
PiZsdDsvZmF1bHRzdHJpbmc+Jmx0O2RldGFpbC8+Jmx0Oy9zb2FwOkZhdWx0\
PiZsdDsvc29hcDpCb2R5PiZsdDsvc29hcDpFbnZlbG9wZT48L3Jlc3BvbnNl\
X2h0bWxfY29kZT4KICAgICAgPGFqYXhfYWN0aW9uX3R5cGU+cmVkaXJlY3Q8\
L2FqYXhfYWN0aW9uX3R5cGU+CiAgICA8L3Jlc3BvbnNlX3BhZ2U+CiAgICA8\
cmVzcG9uc2VfcGFnZSBjYXVzZT0iQWpheCI+CiAgICAgIDxyZXNwb25zZV90\
eXBlPmRlZmF1bHQ8L3Jlc3BvbnNlX3R5cGU+CiAgICAgIDxyZXNwb25zZV9o\
ZWFkZXI+SFRUUC8xLjEgMjAwIE9LCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hl\
ClByYWdtYTogbm8tY2FjaGUKQ29ubmVjdGlvbjogY2xvc2U8L3Jlc3BvbnNl\
X2hlYWRlcj4KICAgICAgPHJlc3BvbnNlX2h0bWxfY29kZT4mbHQ7aHRtbD4m\
bHQ7aGVhZD4mbHQ7dGl0bGU+UmVxdWVzdCBSZWplY3RlZCZsdDsvdGl0bGU+\
Jmx0Oy9oZWFkPiZsdDtib2R5PlRoZSByZXF1ZXN0ZWQgVVJMIHdhcyByZWpl\
Y3RlZC4gUGxlYXNlIGNvbnN1bHQgd2l0aCB5b3VyIGFkbWluaXN0cmF0b3Iu\
Jmx0O2JyPiZsdDticj5Zb3VyIHN1cHBvcnQgSUQgaXM6ICZsdDslVFMucmVx\
dWVzdC5JRCgpJT4mbHQ7YnI+Jmx0O2JyPiZsdDthIGhyZWY9J2phdmFzY3Jp\
cHQ6aGlzdG9yeS5iYWNrKCk7Jz5bR28gQmFja10mbHQ7L2E+Jmx0Oy9ib2R5\
PiZsdDsvaHRtbD48L3Jlc3BvbnNlX2h0bWxfY29kZT4KICAgICAgPGFqYXhf\
YWN0aW9uX3R5cGU+YWxlcnRfcG9wdXA8L2FqYXhfYWN0aW9uX3R5cGU+CiAg\
ICAgIDxhamF4X3BvcHVwX21lc3NhZ2U+VGhlIHJlcXVlc3RlZCBVUkwgd2Fz\
IHJlamVjdGVkLiBQbGVhc2UgY29uc3VsdCB3aXRoIHlvdXIgYWRtaW5pc3Ry\
YXRvci4gWW91ciBzdXBwb3J0IElEIGlzOiAmbHQ7JVRTLnJlcXVlc3QuSUQo\
KSU+PC9hamF4X3BvcHVwX21lc3NhZ2U+CiAgICA8L3Jlc3BvbnNlX3BhZ2U+\
CiAgICA8cmVzcG9uc2VfcGFnZSBjYXVzZT0iQWpheF9sb2dpbiI+CiAgICAg\
IDxyZXNwb25zZV90eXBlPmRlZmF1bHQ8L3Jlc3BvbnNlX3R5cGU+CiAgICAg\
IDxyZXNwb25zZV9oZWFkZXI+SFRUUC8xLjEgMjAwIE9LCkNhY2hlLUNvbnRy\
b2w6IG5vLWNhY2hlClByYWdtYTogbm8tY2FjaGUKQ29ubmVjdGlvbjogY2xv\
c2U8L3Jlc3BvbnNlX2hlYWRlcj4KICAgICAgPHJlc3BvbnNlX2h0bWxfY29k\
ZT4mbHQ7aHRtbD4mbHQ7aGVhZD4mbHQ7dGl0bGU+UmVxdWVzdCBSZWplY3Rl\
ZCZsdDsvdGl0bGU+Jmx0Oy9oZWFkPiZsdDtib2R5PlRoZSByZXF1ZXN0ZWQg\
VVJMIHdhcyByZWplY3RlZC4gUGxlYXNlIGNvbnN1bHQgd2l0aCB5b3VyIGFk\
bWluaXN0cmF0b3IuJmx0O2JyPiZsdDticj5Zb3VyIHN1cHBvcnQgSUQgaXM6\
ICZsdDslVFMucmVxdWVzdC5JRCgpJT4mbHQ7YnI+Jmx0O2JyPiZsdDthIGhy\
ZWY9J2phdmFzY3JpcHQ6aGlzdG9yeS5iYWNrKCk7Jz5bR28gQmFja10mbHQ7\
L2E+Jmx0Oy9ib2R5PiZsdDsvaHRtbD48L3Jlc3BvbnNlX2h0bWxfY29kZT4K\
ICAgICAgPGFqYXhfYWN0aW9uX3R5cGU+YWxlcnRfcG9wdXA8L2FqYXhfYWN0\
aW9uX3R5cGU+CiAgICAgIDxhamF4X3BvcHVwX21lc3NhZ2U+VGhlIHJlcXVl\
c3RlZCBVUkwgd2FzIHJlamVjdGVkLiBQbGVhc2UgY29uc3VsdCB3aXRoIHlv\
dXIgYWRtaW5pc3RyYXRvci4gWW91ciBzdXBwb3J0IElEIGlzOiAmbHQ7JVRT\
LnJlcXVlc3QuSUQoKSU+PC9hamF4X3BvcHVwX21lc3NhZ2U+CiAgICA8L3Jl\
c3BvbnNlX3BhZ2U+CiAgICA8cmVzcG9uc2VfcGFnZSBjYXVzZT0iSGlqYWNr\
Ij4KICAgICAgPHJlc3BvbnNlX3R5cGU+ZXJhc2UgY29va2llczwvcmVzcG9u\
c2VfdHlwZT4KICAgICAgPHJlc3BvbnNlX2hlYWRlcj5IVFRQLzEuMSAyMDAg\
T0sKQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUKUHJhZ21hOiBuby1jYWNoZQpD\
b25uZWN0aW9uOiBjbG9zZTwvcmVzcG9uc2VfaGVhZGVyPgogICAgICA8cmVz\
cG9uc2VfaHRtbF9jb2RlPiZsdDtodG1sPiZsdDtoZWFkPiZsdDt0aXRsZT5S\
ZXF1ZXN0IFJlamVjdGVkJmx0Oy90aXRsZT4mbHQ7L2hlYWQ+Jmx0O2JvZHk+\
VGhlIHJlcXVlc3RlZCBVUkwgd2FzIHJlamVjdGVkLiBQbGVhc2UgY29uc3Vs\
dCB3aXRoIHlvdXIgYWRtaW5pc3RyYXRvci4mbHQ7YnI+Jmx0O2JyPllvdXIg\
c3VwcG9ydCBJRCBpczogJmx0OyVUUy5yZXF1ZXN0LklEKCklPiZsdDticj4m\
bHQ7YnI+Jmx0O2EgaHJlZj0namF2YXNjcmlwdDpoaXN0b3J5LmJhY2soKTsn\
PltHbyBCYWNrXSZsdDsvYT4mbHQ7JVRTLnNjcmlwdC5lcmFzZV9jb29raWVz\
JT4mbHQ7L2JvZHk+Jmx0Oy9odG1sPjwvcmVzcG9uc2VfaHRtbF9jb2RlPgog\
ICAgPC9yZXNwb25zZV9wYWdlPgogICAgPHJlc3BvbnNlX3BhZ2Vfc2V0dGlu\
Z3M+CiAgICAgIDxmbGdfYWpheF9lbmFibGVkPmRpc2FibGVkPC9mbGdfYWph\
eF9lbmFibGVkPgogICAgPC9yZXNwb25zZV9wYWdlX3NldHRpbmdzPgogIDwv\
YmxvY2tpbmc+CiAgPHNlc3Npb25fYXdhcmVuZXNzPgogICAgPGVuYWJsZWQ+\
ZmFsc2U8L2VuYWJsZWQ+CiAgICA8bGlmZXRpbWVfd2luZG93PjkwMDwvbGlm\
ZXRpbWVfd2luZG93PgogICAgPHZpb2xhdGlvbl9hY3Rpb25zX2VuYWJsZWQ+\
dHJ1ZTwvdmlvbGF0aW9uX2FjdGlvbnNfZW5hYmxlZD4KICAgIDxzZXNzaW9u\
PgogICAgICA8dHJhY2tfYWxsX3RocmVzaG9sZD41PC90cmFja19hbGxfdGhy\
ZXNob2xkPgogICAgICA8YmxvY2tfaWxsZWdhbF90aHJlc2hvbGQ+NTwvYmxv\
Y2tfaWxsZWdhbF90aHJlc2hvbGQ+CiAgICAgIDxibG9ja19hbGxfdGhyZXNo\
b2xkPjIwPC9ibG9ja19hbGxfdGhyZXNob2xkPgogICAgICA8dHJhY2tfYWxs\
X3RocmVzaG9sZF9lbmFibGVkPmZhbHNlPC90cmFja19hbGxfdGhyZXNob2xk\
X2VuYWJsZWQ+CiAgICAgIDxibG9ja19pbGxlZ2FsX3RocmVzaG9sZF9lbmFi\
bGVkPmZhbHNlPC9ibG9ja19pbGxlZ2FsX3RocmVzaG9sZF9lbmFibGVkPgog\
ICAgICA8YmxvY2tfYWxsX3RocmVzaG9sZF9lbmFibGVkPmZhbHNlPC9ibG9j\
a19hbGxfdGhyZXNob2xkX2VuYWJsZWQ+CiAgICA8L3Nlc3Npb24+CiAgICA8\
ZGV2aWNlPgogICAgICA8dHJhY2tfYWxsX3RocmVzaG9sZD43PC90cmFja19h\
bGxfdGhyZXNob2xkPgogICAgICA8YmxvY2tfaWxsZWdhbF90aHJlc2hvbGQ+\
NzwvYmxvY2tfaWxsZWdhbF90aHJlc2hvbGQ+CiAgICAgIDxibG9ja19hbGxf\
dGhyZXNob2xkPjMwPC9ibG9ja19hbGxfdGhyZXNob2xkPgogICAgICA8dHJh\
Y2tfYWxsX3RocmVzaG9sZF9lbmFibGVkPmZhbHNlPC90cmFja19hbGxfdGhy\
ZXNob2xkX2VuYWJsZWQ+CiAgICAgIDxibG9ja19pbGxlZ2FsX3RocmVzaG9s\
ZF9lbmFibGVkPmZhbHNlPC9ibG9ja19pbGxlZ2FsX3RocmVzaG9sZF9lbmFi\
bGVkPgogICAgICA8YmxvY2tfYWxsX3RocmVzaG9sZF9lbmFibGVkPmZhbHNl\
PC9ibG9ja19hbGxfdGhyZXNob2xkX2VuYWJsZWQ+CiAgICA8L2RldmljZT4K\
ICAgIDxpcF9hZGRyZXNzPgogICAgICA8dHJhY2tfYWxsX3RocmVzaG9sZD4x\
NTwvdHJhY2tfYWxsX3RocmVzaG9sZD4KICAgICAgPGJsb2NrX2lsbGVnYWxf\
dGhyZXNob2xkPjE1PC9ibG9ja19pbGxlZ2FsX3RocmVzaG9sZD4KICAgICAg\
PGJsb2NrX2FsbF90aHJlc2hvbGQ+NjA8L2Jsb2NrX2FsbF90aHJlc2hvbGQ+\
CiAgICAgIDx0cmFja19hbGxfdGhyZXNob2xkX2VuYWJsZWQ+ZmFsc2U8L3Ry\
YWNrX2FsbF90aHJlc2hvbGRfZW5hYmxlZD4KICAgICAgPGJsb2NrX2lsbGVn\
YWxfdGhyZXNob2xkX2VuYWJsZWQ+ZmFsc2U8L2Jsb2NrX2lsbGVnYWxfdGhy\
ZXNob2xkX2VuYWJsZWQ+CiAgICAgIDxibG9ja19hbGxfdGhyZXNob2xkX2Vu\
YWJsZWQ+ZmFsc2U8L2Jsb2NrX2FsbF90aHJlc2hvbGRfZW5hYmxlZD4KICAg\
IDwvaXBfYWRkcmVzcz4KICAgIDx1c2VyPgogICAgICA8dHJhY2tfYWxsX3Ro\
cmVzaG9sZD41PC90cmFja19hbGxfdGhyZXNob2xkPgogICAgICA8YmxvY2tf\
aWxsZWdhbF90aHJlc2hvbGQ+NTwvYmxvY2tfaWxsZWdhbF90aHJlc2hvbGQ+\
CiAgICAgIDxibG9ja19hbGxfdGhyZXNob2xkPjIwPC9ibG9ja19hbGxfdGhy\
ZXNob2xkPgogICAgICA8dHJhY2tfYWxsX3RocmVzaG9sZF9lbmFibGVkPmZh\
bHNlPC90cmFja19hbGxfdGhyZXNob2xkX2VuYWJsZWQ+CiAgICAgIDxibG9j\
a19pbGxlZ2FsX3RocmVzaG9sZF9lbmFibGVkPmZhbHNlPC9ibG9ja19pbGxl\
Z2FsX3RocmVzaG9sZF9lbmFibGVkPgogICAgICA8YmxvY2tfYWxsX3RocmVz\
aG9sZF9lbmFibGVkPmZhbHNlPC9ibG9ja19hbGxfdGhyZXNob2xkX2VuYWJs\
ZWQ+CiAgICA8L3VzZXI+CiAgICA8dHJhY2tfYWxsX3BlcmlvZD42MDA8L3Ry\
YWNrX2FsbF9wZXJpb2Q+CiAgICA8YmxvY2tfaWxsZWdhbF9wZXJpb2Q+NjAw\
PC9ibG9ja19pbGxlZ2FsX3BlcmlvZD4KICAgIDxibG9ja19hbGxfcGVyaW9k\
PjYwMDwvYmxvY2tfYWxsX3BlcmlvZD4KICAgIDxibG9ja19hbGxfcGVyaW9k\
X2VuYWJsZWQ+dHJ1ZTwvYmxvY2tfYWxsX3BlcmlvZF9lbmFibGVkPgogICAg\
PGJsb2NrX29ubHlfYXV0aGV0aWNhdGVkPmZhbHNlPC9ibG9ja19vbmx5X2F1\
dGhldGljYXRlZD4KICAgIDxzZXNzaW9uX2hpamFja2luZ19lbmFibGVkPmZh\
bHNlPC9zZXNzaW9uX2hpamFja2luZ19lbmFibGVkPgogICAgPGFwcGxpY2F0\
aW9uX3VzZXJuYW1lX3R5cGU+NDwvYXBwbGljYXRpb25fdXNlcm5hbWVfdHlw\
ZT4KICAgIDxkZWxheV9ibG9ja2luZz4KICAgICAgPHZpb2xhdGlvbnM+CiAg\
ICAgICAgPHZpb2xhdGlvbiBuYW1lPSJBY2Nlc3MgZnJvbSBkaXNhbGxvd2Vk\
IEdlb2xvY2F0aW9uIiBpZD0iSUxMRUdBTF9HRU9MT0NBVElPTiIvPgogICAg\
ICAgIDx2aW9sYXRpb24gbmFtZT0iQXR0YWNrIHNpZ25hdHVyZSBkZXRlY3Rl\
ZCIgaWQ9IkFUVEFDS19TSUdOQVRVUkVfREVURUNURUQiLz4KICAgICAgICA8\
dmlvbGF0aW9uIG5hbWU9Ik1hbGZvcm1lZCBHV1QgZGF0YSIgaWQ9Ik1BTEZP\
Uk1FRF9HV1QiLz4KICAgICAgICA8dmlvbGF0aW9uIG5hbWU9IkRpc2FsbG93\
ZWQgZmlsZSB1cGxvYWQgY29udGVudCBkZXRlY3RlZCIgaWQ9IkRJU0FMTE9X\
RURfRklMRV9VUExPQURfQ09OVEVOVCIvPgogICAgICAgIDx2aW9sYXRpb24g\
bmFtZT0iSWxsZWdhbCBCYXNlNjQgdmFsdWUiIGlkPSJCQVNFNjRfUEFSQU1f\
VkFMVUUiLz4KICAgICAgICA8dmlvbGF0aW9uIG5hbWU9IkdXVCBkYXRhIGRv\
ZXMgbm90IGNvbXBseSB3aXRoIGZvcm1hdCBzZXR0aW5ncyIgaWQ9IkdXVF9G\
T1JNQVRfU0VUVElORyIvPgogICAgICAgIDx2aW9sYXRpb24gbmFtZT0iSWxs\
ZWdhbCByZWRpcmVjdGlvbiBhdHRlbXB0IiBpZD0iUkVESVJFQ1QiLz4KICAg\
ICAgPC92aW9sYXRpb25zPgogICAgPC9kZWxheV9ibG9ja2luZz4KICA8L3Nl\
c3Npb25fYXdhcmVuZXNzPgogIDxnd3RfcHJvZmlsZXM+CiAgICA8Y2hhcmFj\
dGVyX3NldC8+CiAgPC9nd3RfcHJvZmlsZXM+CiAgPGpzb25fcHJvZmlsZXM+\
CiAgICA8Y2hhcmFjdGVyX3NldC8+CiAgPC9qc29uX3Byb2ZpbGVzPgogIDx4\
bWxfcHJvZmlsZXM+CiAgICA8Y2hhcmFjdGVyX3NldC8+CiAgPC94bWxfcHJv\
ZmlsZXM+CiAgPHBsYWluX3RleHRfcHJvZmlsZXM+CiAgICA8Y2hhcmFjdGVy\
X3NldC8+CiAgPC9wbGFpbl90ZXh0X3Byb2ZpbGVzPgogIDxmaWxlX3R5cGVz\
PgogICAgPGZpbGVfdHlwZSB0eXBlPSJ3aWxkY2FyZCIgbmFtZT0iKiI+CiAg\
ICAgIDxsZWFybmluZ19tb2RlPk5ldmVyPC9sZWFybmluZ19tb2RlPgogICAg\
ICA8dXJsX2xlbmd0aD4xMDI0PC91cmxfbGVuZ3RoPgogICAgICA8cmVxdWVz\
dF9sZW5ndGg+ODE5NjwvcmVxdWVzdF9sZW5ndGg+CiAgICAgIDxxdWVyeV9z\
dHJpbmdfbGVuZ3RoPjQwOTY8L3F1ZXJ5X3N0cmluZ19sZW5ndGg+CiAgICAg\
IDxwb3N0X2RhdGFfbGVuZ3RoPjQwOTY8L3Bvc3RfZGF0YV9sZW5ndGg+CiAg\
ICAgIDxjaGVja19yZXNwb25zZT5mYWxzZTwvY2hlY2tfcmVzcG9uc2U+CiAg\
ICAgIDxpbl9zdGFnaW5nPmZhbHNlPC9pbl9zdGFnaW5nPgogICAgICA8bGFz\
dF91cGRhdGVkPjIwMTctMDYtMjlUMDk6MTk6NDVaPC9sYXN0X3VwZGF0ZWQ+\
CiAgICAgIDxjaGVja191cmxfbGVuZ3RoPmZhbHNlPC9jaGVja191cmxfbGVu\
Z3RoPgogICAgICA8Y2hlY2tfcmVxdWVzdF9sZW5ndGg+ZmFsc2U8L2NoZWNr\
X3JlcXVlc3RfbGVuZ3RoPgogICAgICA8Y2hlY2tfcXVlcnlfc3RyaW5nX2xl\
bmd0aD5mYWxzZTwvY2hlY2tfcXVlcnlfc3RyaW5nX2xlbmd0aD4KICAgICAg\
PGNoZWNrX3Bvc3RfZGF0YV9sZW5ndGg+ZmFsc2U8L2NoZWNrX3Bvc3RfZGF0\
YV9sZW5ndGg+CiAgICA8L2ZpbGVfdHlwZT4KICA8L2ZpbGVfdHlwZXM+CiAg\
PHVybHM+CiAgICA8dXJsIHByb3RvY29sPSJIVFRQUyIgdHlwZT0id2lsZGNh\
cmQiIG5hbWU9IioiPgogICAgICA8bGVhcm5pbmdfbW9kZT5OZXZlcjwvbGVh\
cm5pbmdfbW9kZT4KICAgICAgPGNoZWNrX2Zsb3dzPmZhbHNlPC9jaGVja19m\
bG93cz4KICAgICAgPGlzX2VudHJ5X3BvaW50PmZhbHNlPC9pc19lbnRyeV9w\
b2ludD4KICAgICAgPGlzX3JlZmVycmVyPmZhbHNlPC9pc19yZWZlcnJlcj4K\
ICAgICAgPGNhbl9jaGFuZ2VfZG9tYWluX2Nvb2tpZT5mYWxzZTwvY2FuX2No\
YW5nZV9kb21haW5fY29va2llPgogICAgICA8ZGVzY3JpcHRpb24+PC9kZXNj\
cmlwdGlvbj4KICAgICAgPHVzZXJfY29uZmlnX2xldmVsPmJhc2ljPC91c2Vy\
X2NvbmZpZ19sZXZlbD4KICAgICAgPGNoZWNrX21ldGFjaGFycz50cnVlPC9j\
aGVja19tZXRhY2hhcnM+CiAgICAgIDxjaGVja19tZXRob2RzPmZhbHNlPC9j\
aGVja19tZXRob2RzPgogICAgICA8aW5fc3RhZ2luZz5mYWxzZTwvaW5fc3Rh\
Z2luZz4KICAgICAgPGxhc3RfdXBkYXRlZD4yMDE3LTA2LTI5VDA5OjE5OjQ4\
WjwvbGFzdF91cGRhdGVkPgogICAgICA8Y2xpY2tqYWNraW5nX3Byb3RlY3Rp\
b24+CiAgICAgICAgPGVuYWJsZWQ+ZmFsc2U8L2VuYWJsZWQ+CiAgICAgICAg\
PGFsbG93X3JlbmRlcmluZ19pbl9mcmFtZXM+Ti9BPC9hbGxvd19yZW5kZXJp\
bmdfaW5fZnJhbWVzPgogICAgICA8L2NsaWNramFja2luZ19wcm90ZWN0aW9u\
PgogICAgICA8Y29yc19lbmZvcmNlbWVudF9lbmFibGU+ZmFsc2U8L2NvcnNf\
ZW5mb3JjZW1lbnRfZW5hYmxlPgogICAgICA8YWxsb3dfY29ycz50cnVlPC9h\
bGxvd19jb3JzPgogICAgICA8Y29yc19hbGxvd19jcmVkZW50aWFsc19oYW5k\
bGluZz51bm1vZGlmaWVkPC9jb3JzX2FsbG93X2NyZWRlbnRpYWxzX2hhbmRs\
aW5nPgogICAgICA8Y29yc19hbGxvd19jcmVkZW50aWFscz5hbGxvdzwvY29y\
c19hbGxvd19jcmVkZW50aWFscz4KICAgICAgPGNvcnNfY2hlY2tfbWF4aW11\
bV9hZ2U+ZmFsc2U8L2NvcnNfY2hlY2tfbWF4aW11bV9hZ2U+CiAgICAgIDxj\
b3JzX21heGltdW1fYWdlPjE4MDA8L2NvcnNfbWF4aW11bV9hZ2U+CiAgICAg\
IDxjb3JzX2FsbG93ZWRfb3JpZ2luc19oYW5kbGluZz51bm1vZGlmaWVkPC9j\
b3JzX2FsbG93ZWRfb3JpZ2luc19oYW5kbGluZz4KICAgICAgPGNvcnNfYWxs\
b3dlZF9tZXRob2RzX2hhbmRsaW5nPnVubW9kaWZpZWQ8L2NvcnNfYWxsb3dl\
ZF9tZXRob2RzX2hhbmRsaW5nPgogICAgICA8Y29yc19hbGxvd2VkX2hlYWRl\
cnNfaGFuZGxpbmc+dW5tb2RpZmllZDwvY29yc19hbGxvd2VkX2hlYWRlcnNf\
aGFuZGxpbmc+CiAgICAgIDxjb3JzX2V4cG9zZWRfaGVhZGVyc19oYW5kbGlu\
Zz51bm1vZGlmaWVkPC9jb3JzX2V4cG9zZWRfaGVhZGVyc19oYW5kbGluZz4K\
ICAgICAgPGZsZ193aWxkY2FyZF9pbmNsdWRlc19zbGFzaD50cnVlPC9mbGdf\
d2lsZGNhcmRfaW5jbHVkZXNfc2xhc2g+CiAgICAgIDxjb250ZW50X3Byb2Zp\
bGU+CiAgICAgICAgPGhlYWRlcl9uYW1lPio8L2hlYWRlcl9uYW1lPgogICAg\
ICAgIDxoZWFkZXJfdmFsdWU+KjwvaGVhZGVyX3ZhbHVlPgogICAgICAgIDxo\
ZWFkZXJfb3JkZXI+MDwvaGVhZGVyX29yZGVyPgogICAgICAgIDxlbmZvcmNl\
bWVudF90eXBlPmh0dHA8L2VuZm9yY2VtZW50X3R5cGU+CiAgICAgICAgPGlu\
X2NsYXNzaWZpY2F0aW9uPmZhbHNlPC9pbl9jbGFzc2lmaWNhdGlvbj4KICAg\
ICAgPC9jb250ZW50X3Byb2ZpbGU+CiAgICA8L3VybD4KICAgIDx1cmwgcHJv\
dG9jb2w9IkhUVFAiIHR5cGU9IndpbGRjYXJkIiBuYW1lPSIqIj4KICAgICAg\
PGxlYXJuaW5nX21vZGU+TmV2ZXI8L2xlYXJuaW5nX21vZGU+CiAgICAgIDxj\
aGVja19mbG93cz5mYWxzZTwvY2hlY2tfZmxvd3M+CiAgICAgIDxpc19lbnRy\
eV9wb2ludD5mYWxzZTwvaXNfZW50cnlfcG9pbnQ+CiAgICAgIDxpc19yZWZl\
cnJlcj5mYWxzZTwvaXNfcmVmZXJyZXI+CiAgICAgIDxjYW5fY2hhbmdlX2Rv\
bWFpbl9jb29raWU+ZmFsc2U8L2Nhbl9jaGFuZ2VfZG9tYWluX2Nvb2tpZT4K\
ICAgICAgPGRlc2NyaXB0aW9uPjwvZGVzY3JpcHRpb24+CiAgICAgIDx1c2Vy\
X2NvbmZpZ19sZXZlbD5iYXNpYzwvdXNlcl9jb25maWdfbGV2ZWw+CiAgICAg\
IDxjaGVja19tZXRhY2hhcnM+dHJ1ZTwvY2hlY2tfbWV0YWNoYXJzPgogICAg\
ICA8Y2hlY2tfbWV0aG9kcz5mYWxzZTwvY2hlY2tfbWV0aG9kcz4KICAgICAg\
PGluX3N0YWdpbmc+ZmFsc2U8L2luX3N0YWdpbmc+CiAgICAgIDxsYXN0X3Vw\
ZGF0ZWQ+MjAxNy0wNi0yOVQwOToxOTo0OFo8L2xhc3RfdXBkYXRlZD4KICAg\
ICAgPGNsaWNramFja2luZ19wcm90ZWN0aW9uPgogICAgICAgIDxlbmFibGVk\
PmZhbHNlPC9lbmFibGVkPgogICAgICAgIDxhbGxvd19yZW5kZXJpbmdfaW5f\
ZnJhbWVzPk4vQTwvYWxsb3dfcmVuZGVyaW5nX2luX2ZyYW1lcz4KICAgICAg\
PC9jbGlja2phY2tpbmdfcHJvdGVjdGlvbj4KICAgICAgPGNvcnNfZW5mb3Jj\
ZW1lbnRfZW5hYmxlPmZhbHNlPC9jb3JzX2VuZm9yY2VtZW50X2VuYWJsZT4K\
ICAgICAgPGFsbG93X2NvcnM+dHJ1ZTwvYWxsb3dfY29ycz4KICAgICAgPGNv\
cnNfYWxsb3dfY3JlZGVudGlhbHNfaGFuZGxpbmc+dW5tb2RpZmllZDwvY29y\
c19hbGxvd19jcmVkZW50aWFsc19oYW5kbGluZz4KICAgICAgPGNvcnNfYWxs\
b3dfY3JlZGVudGlhbHM+YWxsb3c8L2NvcnNfYWxsb3dfY3JlZGVudGlhbHM+\
CiAgICAgIDxjb3JzX2NoZWNrX21heGltdW1fYWdlPmZhbHNlPC9jb3JzX2No\
ZWNrX21heGltdW1fYWdlPgogICAgICA8Y29yc19tYXhpbXVtX2FnZT4xODAw\
PC9jb3JzX21heGltdW1fYWdlPgogICAgICA8Y29yc19hbGxvd2VkX29yaWdp\
bnNfaGFuZGxpbmc+dW5tb2RpZmllZDwvY29yc19hbGxvd2VkX29yaWdpbnNf\
aGFuZGxpbmc+CiAgICAgIDxjb3JzX2FsbG93ZWRfbWV0aG9kc19oYW5kbGlu\
Zz51bm1vZGlmaWVkPC9jb3JzX2FsbG93ZWRfbWV0aG9kc19oYW5kbGluZz4K\
ICAgICAgPGNvcnNfYWxsb3dlZF9oZWFkZXJzX2hhbmRsaW5nPnVubW9kaWZp\
ZWQ8L2NvcnNfYWxsb3dlZF9oZWFkZXJzX2hhbmRsaW5nPgogICAgICA8Y29y\
c19leHBvc2VkX2hlYWRlcnNfaGFuZGxpbmc+dW5tb2RpZmllZDwvY29yc19l\
eHBvc2VkX2hlYWRlcnNfaGFuZGxpbmc+CiAgICAgIDxmbGdfd2lsZGNhcmRf\
aW5jbHVkZXNfc2xhc2g+dHJ1ZTwvZmxnX3dpbGRjYXJkX2luY2x1ZGVzX3Ns\
YXNoPgogICAgICA8Y29udGVudF9wcm9maWxlPgogICAgICAgIDxoZWFkZXJf\
bmFtZT4qPC9oZWFkZXJfbmFtZT4KICAgICAgICA8aGVhZGVyX3ZhbHVlPio8\
L2hlYWRlcl92YWx1ZT4KICAgICAgICA8aGVhZGVyX29yZGVyPjA8L2hlYWRl\
cl9vcmRlcj4KICAgICAgICA8ZW5mb3JjZW1lbnRfdHlwZT5odHRwPC9lbmZv\
cmNlbWVudF90eXBlPgogICAgICAgIDxpbl9jbGFzc2lmaWNhdGlvbj5mYWxz\
ZTwvaW5fY2xhc3NpZmljYXRpb24+CiAgICAgIDwvY29udGVudF9wcm9maWxl\
PgogICAgPC91cmw+CiAgICA8Y2hhcmFjdGVyX3NldC8+CiAgPC91cmxzPgog\
IDx3ZWJzb2NrZXRfdXJscy8+CiAgPHBhcmFtZXRlcnM+CiAgICA8cGFyYW1l\
dGVyIHR5cGU9ImV4cGxpY2l0IiBuYW1lPSJfX1ZJRVdTVEFURSI+CiAgICAg\
IDxsZWFybmluZ19tb2RlPk5ldmVyPC9sZWFybmluZ19tb2RlPgogICAgICA8\
aXNfbWFuZGF0b3J5PmZhbHNlPC9pc19tYW5kYXRvcnk+CiAgICAgIDxhbGxv\
d19lbXB0eV92YWx1ZT50cnVlPC9hbGxvd19lbXB0eV92YWx1ZT4KICAgICAg\
PHZhbHVlX3R5cGU+aWdub3JlPC92YWx1ZV90eXBlPgogICAgICA8bWluaW11\
bV92YWx1ZT4wPC9taW5pbXVtX3ZhbHVlPgogICAgICA8bWF4aW11bV92YWx1\
ZT4wPC9tYXhpbXVtX3ZhbHVlPgogICAgICA8bWF4aW11bV9sZW5ndGg+MDwv\
bWF4aW11bV9sZW5ndGg+CiAgICAgIDxtYXRjaF9yZWd1bGFyX2V4cHJlc3Np\
b24+PC9tYXRjaF9yZWd1bGFyX2V4cHJlc3Npb24+CiAgICAgIDxpc19zZW5z\
aXRpdmU+ZmFsc2U8L2lzX3NlbnNpdGl2ZT4KICAgICAgPGluX3N0YWdpbmc+\
ZmFsc2U8L2luX3N0YWdpbmc+CiAgICAgIDxsYXN0X3VwZGF0ZWQ+MjAxNy0w\
Ni0yOVQwOToxOTo0NVo8L2xhc3RfdXBkYXRlZD4KICAgICAgPHBhcmFtZXRl\
cl9uYW1lX21ldGFjaGFycz4KICAgICAgICA8Y2hlY2tfbWV0YWNoYXJzPmZh\
bHNlPC9jaGVja19tZXRhY2hhcnM+CiAgICAgIDwvcGFyYW1ldGVyX25hbWVf\
bWV0YWNoYXJzPgogICAgICA8Y2hlY2tfbWF4aW11bV9sZW5ndGg+ZmFsc2U8\
L2NoZWNrX21heGltdW1fbGVuZ3RoPgogICAgICA8Y2hlY2tfbWV0YWNoYXJz\
PmZhbHNlPC9jaGVja19tZXRhY2hhcnM+CiAgICAgIDxjaGVja19hdHRhY2tf\
c2lnbmF0dXJlcz5mYWxzZTwvY2hlY2tfYXR0YWNrX3NpZ25hdHVyZXM+CiAg\
ICAgIDxhbGxvd19yZXBlYXRlZF9wYXJhbWV0ZXJfbmFtZT5mYWxzZTwvYWxs\
b3dfcmVwZWF0ZWRfcGFyYW1ldGVyX25hbWU+CiAgICAgIDxpbl9jbGFzc2lm\
aWNhdGlvbj5mYWxzZTwvaW5fY2xhc3NpZmljYXRpb24+CiAgICAgIDxkaXNh\
bGxvd19maWxlX3VwbG9hZF9vZl9leGVjdXRhYmxlcz5mYWxzZTwvZGlzYWxs\
b3dfZmlsZV91cGxvYWRfb2ZfZXhlY3V0YWJsZXM+CiAgICAgIDxpc19iYXNl\
NjQ+ZmFsc2U8L2lzX2Jhc2U2ND4KICAgIDwvcGFyYW1ldGVyPgogICAgPHBh\
cmFtZXRlciB0eXBlPSJ3aWxkY2FyZCIgbmFtZT0iKiI+CiAgICAgIDxsZWFy\
bmluZ19tb2RlPk5ldmVyPC9sZWFybmluZ19tb2RlPgogICAgICA8aXNfbWFu\
ZGF0b3J5PmZhbHNlPC9pc19tYW5kYXRvcnk+CiAgICAgIDxhbGxvd19lbXB0\
eV92YWx1ZT50cnVlPC9hbGxvd19lbXB0eV92YWx1ZT4KICAgICAgPHZhbHVl\
X3R5cGU+dXNlciBpbnB1dDwvdmFsdWVfdHlwZT4KICAgICAgPHVzZXJfaW5w\
dXRfZm9ybWF0PjwvdXNlcl9pbnB1dF9mb3JtYXQ+CiAgICAgIDxtaW5pbXVt\
X3ZhbHVlPjA8L21pbmltdW1fdmFsdWU+CiAgICAgIDxtYXhpbXVtX3ZhbHVl\
PjA8L21heGltdW1fdmFsdWU+CiAgICAgIDxtYXhpbXVtX2xlbmd0aD4wPC9t\
YXhpbXVtX2xlbmd0aD4KICAgICAgPG1hdGNoX3JlZ3VsYXJfZXhwcmVzc2lv\
bj48L21hdGNoX3JlZ3VsYXJfZXhwcmVzc2lvbj4KICAgICAgPGlzX3NlbnNp\
dGl2ZT5mYWxzZTwvaXNfc2Vuc2l0aXZlPgogICAgICA8aW5fc3RhZ2luZz5m\
YWxzZTwvaW5fc3RhZ2luZz4KICAgICAgPGxhc3RfdXBkYXRlZD4yMDE3LTA2\
LTI5VDA5OjE5OjQ1WjwvbGFzdF91cGRhdGVkPgogICAgICA8cGFyYW1ldGVy\
X25hbWVfbWV0YWNoYXJzPgogICAgICAgIDxjaGVja19tZXRhY2hhcnM+dHJ1\
ZTwvY2hlY2tfbWV0YWNoYXJzPgogICAgICA8L3BhcmFtZXRlcl9uYW1lX21l\
dGFjaGFycz4KICAgICAgPGNoZWNrX21heGltdW1fbGVuZ3RoPmZhbHNlPC9j\
aGVja19tYXhpbXVtX2xlbmd0aD4KICAgICAgPGNoZWNrX21ldGFjaGFycz50\
cnVlPC9jaGVja19tZXRhY2hhcnM+CiAgICAgIDxjaGVja19hdHRhY2tfc2ln\
bmF0dXJlcz50cnVlPC9jaGVja19hdHRhY2tfc2lnbmF0dXJlcz4KICAgICAg\
PGFsbG93X3JlcGVhdGVkX3BhcmFtZXRlcl9uYW1lPmZhbHNlPC9hbGxvd19y\
ZXBlYXRlZF9wYXJhbWV0ZXJfbmFtZT4KICAgICAgPGluX2NsYXNzaWZpY2F0\
aW9uPmZhbHNlPC9pbl9jbGFzc2lmaWNhdGlvbj4KICAgICAgPGRpc2FsbG93\
X2ZpbGVfdXBsb2FkX29mX2V4ZWN1dGFibGVzPmZhbHNlPC9kaXNhbGxvd19m\
aWxlX3VwbG9hZF9vZl9leGVjdXRhYmxlcz4KICAgICAgPGlzX2Jhc2U2ND5m\
YWxzZTwvaXNfYmFzZTY0PgogICAgPC9wYXJhbWV0ZXI+CiAgICA8Y2hhcmFj\
dGVyX3NldC8+CiAgICA8cGFyYW1ldGVyX25hbWVfbWV0YWNoYXJzPgogICAg\
ICA8Y2hhcmFjdGVyX3NldC8+CiAgICA8L3BhcmFtZXRlcl9uYW1lX21ldGFj\
aGFycz4KICA8L3BhcmFtZXRlcnM+CiAgPHNlbnNpdGl2ZV9wYXJhbWV0ZXJz\
PgogICAgPHBhcmFtZXRlcl9uYW1lPnBhc3N3b3JkPC9wYXJhbWV0ZXJfbmFt\
ZT4KICA8L3NlbnNpdGl2ZV9wYXJhbWV0ZXJzPgogIDxmbG93cz4KICAgIDxm\
bG93X2FjY2Vzcz4KICAgICAgPGV4cGlyYXRpb25fcGVyaW9kPjA8L2V4cGly\
YXRpb25fcGVyaW9kPgogICAgICA8cmVzcG9uc2VfcGFnZT4KICAgICAgICA8\
cmVzcG9uc2VfdHlwZT5kZWZhdWx0PC9yZXNwb25zZV90eXBlPgogICAgICAg\
IDxyZXNwb25zZV9oZWFkZXI+SFRUUC8xLjEgMjAwIE9LCkNhY2hlLUNvbnRy\
b2w6IG5vLWNhY2hlClByYWdtYTogbm8tY2FjaGUKQ29ubmVjdGlvbjogY2xv\
c2U8L3Jlc3BvbnNlX2hlYWRlcj4KICAgICAgICA8cmVzcG9uc2VfaHRtbF9j\
b2RlPiZsdDtodG1sPiZsdDtoZWFkPiZsdDt0aXRsZT5SZXF1ZXN0IFJlamVj\
dGVkJmx0Oy90aXRsZT4mbHQ7L2hlYWQ+Jmx0O2JvZHk+VGhlIHJlcXVlc3Rl\
ZCBVUkwgd2FzIHJlamVjdGVkLiBQbGVhc2UgY29uc3VsdCB3aXRoIHlvdXIg\
YWRtaW5pc3RyYXRvci4mbHQ7YnI+Jmx0O2JyPllvdXIgc3VwcG9ydCBJRCBp\
czogJmx0OyVUUy5yZXF1ZXN0LklEKCklPiZsdDticj4mbHQ7YnI+Jmx0O2Eg\
aHJlZj0namF2YXNjcmlwdDpoaXN0b3J5LmJhY2soKTsnPltHbyBCYWNrXSZs\
dDsvYT4mbHQ7L2JvZHk+Jmx0Oy9odG1sPjwvcmVzcG9uc2VfaHRtbF9jb2Rl\
PgogICAgICA8L3Jlc3BvbnNlX3BhZ2U+CiAgICA8L2Zsb3dfYWNjZXNzPgog\
IDwvZmxvd3M+CiAgPG1ldGhvZHM+CiAgICA8bWV0aG9kIG5hbWU9IkdFVCI+\
CiAgICAgIDxhY3RfYXM+R0VUPC9hY3RfYXM+CiAgICAgIDx1c2VyX2NvbmZp\
Z19sZXZlbD5iYXNpYzwvdXNlcl9jb25maWdfbGV2ZWw+CiAgICA8L21ldGhv\
ZD4KICAgIDxtZXRob2QgbmFtZT0iUE9TVCI+CiAgICAgIDxhY3RfYXM+UE9T\
VDwvYWN0X2FzPgogICAgICA8dXNlcl9jb25maWdfbGV2ZWw+YmFzaWM8L3Vz\
ZXJfY29uZmlnX2xldmVsPgogICAgPC9tZXRob2Q+CiAgICA8bWV0aG9kIG5h\
bWU9IkhFQUQiPgogICAgICA8YWN0X2FzPkdFVDwvYWN0X2FzPgogICAgICA8\
dXNlcl9jb25maWdfbGV2ZWw+YmFzaWM8L3VzZXJfY29uZmlnX2xldmVsPgog\
ICAgPC9tZXRob2Q+CiAgPC9tZXRob2RzPgogIDxoZWFkZXJzPgogICAgPGFs\
bG93ZWRfbW9kaWZpZWRfY29va2llIHR5cGU9IndpbGRjYXJkIiBuYW1lPSIq\
Ij4KICAgICAgPGxlYXJuaW5nX21vZGU+TmV2ZXI8L2xlYXJuaW5nX21vZGU+\
CiAgICAgIDxpbl9zdGFnaW5nPnRydWU8L2luX3N0YWdpbmc+CiAgICAgIDxl\
bmZvcmNlbWVudF9tb2RlPmFsbG93PC9lbmZvcmNlbWVudF9tb2RlPgogICAg\
ICA8aHR0cF9vbmx5PmZhbHNlPC9odHRwX29ubHk+CiAgICAgIDxzZWN1cmU+\
ZmFsc2U8L3NlY3VyZT4KICAgICAgPGNoZWNrX3NpZ25hdHVyZXM+dHJ1ZTwv\
Y2hlY2tfc2lnbmF0dXJlcz4KICAgICAgPGlzX2Jhc2U2ND5mYWxzZTwvaXNf\
YmFzZTY0PgogICAgPC9hbGxvd2VkX21vZGlmaWVkX2Nvb2tpZT4KICAgIDxj\
aGFyYWN0ZXJfc2V0Lz4KICA8L2hlYWRlcnM+CiAgPGF0dGFja19zaWduYXR1\
cmVzPgogICAgPHNpZ25hdHVyZV9zZXQ+CiAgICAgIDxzZXQgeG1sbnM6eHNp\
PSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIg\
bmFtZT0iR2VuZXJpYyBEZXRlY3Rpb24gU2lnbmF0dXJlcyIgaWQ9IjEiLz4K\
ICAgICAgPGFsYXJtPnRydWU8L2FsYXJtPgogICAgICA8YmxvY2s+dHJ1ZTwv\
YmxvY2s+CiAgICAgIDxsZWFybj50cnVlPC9sZWFybj4KICAgIDwvc2lnbmF0\
dXJlX3NldD4KICAgIDxzaWduYXR1cmVfc2V0PgogICAgICA8c2V0IHhtbG5z\
OnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFu\
Y2UiIG5hbWU9IlN5c3RlbXM6IFBIUCwgQXBhY2hlLCBNeVNRTC4uLiIgaWQ9\
IjMwMDAwMDAwMCI+CiAgICAgICAgPGZsZ19hbGFybV9kZWZhdWx0PjE8L2Zs\
Z19hbGFybV9kZWZhdWx0PgogICAgICAgIDxmbGdfbGVhcm5fZGVmYXVsdD4x\
PC9mbGdfbGVhcm5fZGVmYXVsdD4KICAgICAgICA8c2V0X2dyb3VwX25hbWU+\
VXNlci1kZWZpbmVkPC9zZXRfZ3JvdXBfbmFtZT4KICAgICAgICA8ZmxnX3Jl\
amVjdF9kZWZhdWx0PjE8L2ZsZ19yZWplY3RfZGVmYXVsdD4KICAgICAgICA8\
ZmxnX2Fzc2lnbl90b19wb2xpY3lfZGVmYXVsdD4wPC9mbGdfYXNzaWduX3Rv\
X3BvbGljeV9kZWZhdWx0PgogICAgICAgIDxzZXRfZmxnX2lzX2hpZGRlbj4w\
PC9zZXRfZmxnX2lzX2hpZGRlbj4KICAgICAgICA8c2V0X25hbWU+U3lzdGVt\
czogUEhQLCBBcGFjaGUsIE15U1FMLi4uPC9zZXRfbmFtZT4KICAgICAgICA8\
c2V0X2ZsZ19pc191c2VyX2RlZmluZWQ+MTwvc2V0X2ZsZ19pc191c2VyX2Rl\
ZmluZWQ+CiAgICAgICAgPGZsZ19pc19tYW51YWw+MDwvZmxnX2lzX21hbnVh\
bD4KICAgICAgICA8ZmlsdGVyPgogICAgICAgICAgPGZsZ19pc19oaWRkZW4+\
MDwvZmxnX2lzX2hpZGRlbj4KICAgICAgICA8L2ZpbHRlcj4KICAgICAgICA8\
c3lzdGVtcz4KICAgICAgICAgIDxzeXN0ZW1fbmFtZT5Vbml4L0xpbnV4PC9z\
eXN0ZW1fbmFtZT4KICAgICAgICAgIDxzeXN0ZW1fbmFtZT5NeVNRTDwvc3lz\
dGVtX25hbWU+CiAgICAgICAgICA8c3lzdGVtX25hbWU+QXBhY2hlL05DU0Eg\
SFRUUCBTZXJ2ZXI8L3N5c3RlbV9uYW1lPgogICAgICAgICAgPHN5c3RlbV9u\
YW1lPlBIUDwvc3lzdGVtX25hbWU+CiAgICAgICAgPC9zeXN0ZW1zPgogICAg\
ICA8L3NldD4KICAgICAgPGFsYXJtPnRydWU8L2FsYXJtPgogICAgICA8Ymxv\
Y2s+dHJ1ZTwvYmxvY2s+CiAgICAgIDxsZWFybj50cnVlPC9sZWFybj4KICAg\
IDwvc2lnbmF0dXJlX3NldD4KICAgIDxlbmFibGVfc3RhZ2luZz5mYWxzZTwv\
ZW5hYmxlX3N0YWdpbmc+CiAgICA8c3RhZ2luZ19wZXJpb2RfaW5fZGF5cz4w\
PC9zdGFnaW5nX3BlcmlvZF9pbl9kYXlzPgogICAgPHBsYWNlX3NpZ25hdHVy\
ZXNfaW5fc3RhZ2luZz5mYWxzZTwvcGxhY2Vfc2lnbmF0dXJlc19pbl9zdGFn\
aW5nPgogIDwvYXR0YWNrX3NpZ25hdHVyZXM+CiAgPGRhdGFfZ3VhcmQ+CiAg\
ICA8ZW5hYmxlZD50cnVlPC9lbmFibGVkPgogICAgPGNyZWRpdF9jYXJkX251\
bWJlcnM+dHJ1ZTwvY3JlZGl0X2NhcmRfbnVtYmVycz4KICAgIDxzb2NpYWxf\
c2VjdXJpdHlfbnVtYmVycz50cnVlPC9zb2NpYWxfc2VjdXJpdHlfbnVtYmVy\
cz4KICAgIDxmaWxlX2NvbnRlbnQ+ZmFsc2U8L2ZpbGVfY29udGVudD4KICAg\
IDxtYXNrX2RhdGE+dHJ1ZTwvbWFza19kYXRhPgogICAgPGNoZWNrX2N1c3Rv\
bV9wYXR0ZXJucz5mYWxzZTwvY2hlY2tfY3VzdG9tX3BhdHRlcm5zPgogICAg\
PGNoZWNrX2V4Y2VwdGlvbl9wYXR0ZXJucz5mYWxzZTwvY2hlY2tfZXhjZXB0\
aW9uX3BhdHRlcm5zPgogICAgPGVuZm9yY2VtZW50X21vZGU+ZW5mb3JjZV9h\
bGxfZXhjZXB0X3VybF9saXN0PC9lbmZvcmNlbWVudF9tb2RlPgogIDwvZGF0\
YV9ndWFyZD4KICA8cG9saWN5X2J1aWxkZXI+CiAgICA8bGVhcm5pbmdfbW9k\
ZT5NYW51YWw8L2xlYXJuaW5nX21vZGU+CiAgICA8bGVhcm5fZmlsZV90eXBl\
cz5OZXZlcjwvbGVhcm5fZmlsZV90eXBlcz4KICAgIDxsZWFybl91cmxzPk5l\
dmVyPC9sZWFybl91cmxzPgogICAgPGxlYXJuX3dlYnNvY2tldF91cmxzPk5l\
dmVyPC9sZWFybl93ZWJzb2NrZXRfdXJscz4KICAgIDxsZWFybl9wYXJhbWV0\
ZXJzPk5ldmVyPC9sZWFybl9wYXJhbWV0ZXJzPgogICAgPGxlYXJuX2Nvb2tp\
ZXM+TmV2ZXI8L2xlYXJuX2Nvb2tpZXM+CiAgICA8bGVhcm5fcmVkaXJlY3Rp\
b25fZG9tYWlucz5BbHdheXM8L2xlYXJuX3JlZGlyZWN0aW9uX2RvbWFpbnM+\
CiAgICA8bWF4aW11bV9yZWRpcmVjdGlvbl9kb21haW5zPjEwMDwvbWF4aW11\
bV9yZWRpcmVjdGlvbl9kb21haW5zPgogICAgPHBhcmFtZXRlcnNfaW50ZWdl\
cl92YWx1ZT50cnVlPC9wYXJhbWV0ZXJzX2ludGVnZXJfdmFsdWU+CiAgICA8\
Y2xpZW50X3NpZGVfcG9saWN5X2J1aWxkaW5nPmZhbHNlPC9jbGllbnRfc2lk\
ZV9wb2xpY3lfYnVpbGRpbmc+CiAgICA8bWF4aW11bV9maWxlX3R5cGVzPjI1\
MDwvbWF4aW11bV9maWxlX3R5cGVzPgogICAgPG1heGltdW1fdXJscz4xMDAw\
MDwvbWF4aW11bV91cmxzPgogICAgPG1heGltdW1fd2Vic29ja2V0X3VybHM+\
MTAwMDA8L21heGltdW1fd2Vic29ja2V0X3VybHM+CiAgICA8bWF4aW11bV9w\
YXJhbWV0ZXJzPjEwMDAwPC9tYXhpbXVtX3BhcmFtZXRlcnM+CiAgICA8bWF4\
aW11bV9hbGxvd2VkX21vZGlmaWVkX2Nvb2tpZXM+MTAwPC9tYXhpbXVtX2Fs\
bG93ZWRfbW9kaWZpZWRfY29va2llcz4KICAgIDx0cmFja19zaXRlX2NoYW5n\
ZXM+CiAgICAgIDx1bnRydXN0ZWQ+CiAgICAgICAgPGVuYWJsZWQ+dHJ1ZTwv\
ZW5hYmxlZD4KICAgICAgICA8ZGlzdGluY3Rfc291cmNlcz4xMDwvZGlzdGlu\
Y3Rfc291cmNlcz4KICAgICAgICA8bWluaW11bV9pbnRlcnZhbD4zMDA8L21p\
bmltdW1faW50ZXJ2YWw+CiAgICAgICAgPG1heGltdW1faW50ZXJ2YWw+NjA0\
ODAwPC9tYXhpbXVtX2ludGVydmFsPgogICAgICA8L3VudHJ1c3RlZD4KICAg\
ICAgPHRydXN0ZWQ+CiAgICAgICAgPGVuYWJsZWQ+dHJ1ZTwvZW5hYmxlZD4K\
ICAgICAgICA8ZGlzdGluY3Rfc291cmNlcz4xPC9kaXN0aW5jdF9zb3VyY2Vz\
PgogICAgICAgIDxtaW5pbXVtX2ludGVydmFsPjA8L21pbmltdW1faW50ZXJ2\
YWw+CiAgICAgICAgPG1heGltdW1faW50ZXJ2YWw+NjA0ODAwPC9tYXhpbXVt\
X2ludGVydmFsPgogICAgICA8L3RydXN0ZWQ+CiAgICA8L3RyYWNrX3NpdGVf\
Y2hhbmdlcz4KICAgIDxsb29zZW5fcnVsZT4KICAgICAgPHVudHJ1c3RlZD4K\
ICAgICAgICA8ZGlzdGluY3Rfc291cmNlcz4yMDwvZGlzdGluY3Rfc291cmNl\
cz4KICAgICAgICA8bWluaW11bV9pbnRlcnZhbD4zNjAwPC9taW5pbXVtX2lu\
dGVydmFsPgogICAgICAgIDxtYXhpbXVtX2ludGVydmFsPjYwNDgwMDwvbWF4\
aW11bV9pbnRlcnZhbD4KICAgICAgPC91bnRydXN0ZWQ+CiAgICAgIDx0cnVz\
dGVkPgogICAgICAgIDxkaXN0aW5jdF9zb3VyY2VzPjE8L2Rpc3RpbmN0X3Nv\
dXJjZXM+CiAgICAgICAgPG1pbmltdW1faW50ZXJ2YWw+MDwvbWluaW11bV9p\
bnRlcnZhbD4KICAgICAgICA8bWF4aW11bV9pbnRlcnZhbD42MDQ4MDA8L21h\
eGltdW1faW50ZXJ2YWw+CiAgICAgIDwvdHJ1c3RlZD4KICAgIDwvbG9vc2Vu\
X3J1bGU+CiAgICA8dGlnaHRlbl9ydWxlPgogICAgICA8dG90YWxfcmVxdWVz\
dHM+NTAwMDwvdG90YWxfcmVxdWVzdHM+CiAgICAgIDxtaW5pbXVtX2ludGVy\
dmFsPjg2NDAwPC9taW5pbXVtX2ludGVydmFsPgogICAgICA8bWF4X21vZGlm\
aWNhdGlvbl9zdWdnZXN0aW9uX3Njb3JlPjUwPC9tYXhfbW9kaWZpY2F0aW9u\
X3N1Z2dlc3Rpb25fc2NvcmU+CiAgICA8L3RpZ2h0ZW5fcnVsZT4KICAgIDxk\
eW5hbWljX3BhcmFtZXRlcnM+CiAgICAgIDx1bmlxdWVfdmFsdWVfc2V0cz4x\
MDwvdW5pcXVlX3ZhbHVlX3NldHM+CiAgICAgIDxoaWRkZW5fZmllbGRzPmZh\
bHNlPC9oaWRkZW5fZmllbGRzPgogICAgICA8dXNlX3N0YXRpc3RpY3NfZm9y\
bXM+ZmFsc2U8L3VzZV9zdGF0aXN0aWNzX2Zvcm1zPgogICAgICA8dXNlX3N0\
YXRpc3RpY3NfbGlua3M+ZmFsc2U8L3VzZV9zdGF0aXN0aWNzX2xpbmtzPgog\
ICAgPC9keW5hbWljX3BhcmFtZXRlcnM+CiAgICA8cGFyYW1ldGVyX2xldmVs\
Pmdsb2JhbDwvcGFyYW1ldGVyX2xldmVsPgogICAgPGFsbF90cnVzdGVkX2lw\
cz5saXN0PC9hbGxfdHJ1c3RlZF9pcHM+CiAgICA8dmFsaWRfaG9zdF9uYW1l\
cz50cnVlPC92YWxpZF9ob3N0X25hbWVzPgogICAgPGxlYXJuX2Zyb21fcmVz\
cG9uc2VzPnRydWU8L2xlYXJuX2Zyb21fcmVzcG9uc2VzPgogICAgPGNvbGxh\
cHNlX3VybHM+dHJ1ZTwvY29sbGFwc2VfdXJscz4KICAgIDxjb2xsYXBzZV91\
cmxzX29jY3VycmVuY2VzPjUwMDwvY29sbGFwc2VfdXJsc19vY2N1cnJlbmNl\
cz4KICAgIDxjb2xsYXBzZV91cmxzX2RlcHRoPjI8L2NvbGxhcHNlX3VybHNf\
ZGVwdGg+CiAgICA8ZmxnX2xlYXJuX2xvZ2luX3BhZ2VzPnRydWU8L2ZsZ19s\
ZWFybl9sb2dpbl9wYWdlcz4KICAgIDxjb2xsYXBzZV9jb29raWVzPnRydWU8\
L2NvbGxhcHNlX2Nvb2tpZXM+CiAgICA8Y29sbGFwc2VfY29va2llc19vY2N1\
cnJlbmNlcz4xMDwvY29sbGFwc2VfY29va2llc19vY2N1cnJlbmNlcz4KICAg\
IDxjb2xsYXBzZV9wYXJhbWV0ZXJzPnRydWU8L2NvbGxhcHNlX3BhcmFtZXRl\
cnM+CiAgICA8Y29sbGFwc2VfcGFyYW1ldGVyc19vY2N1cnJlbmNlcz4xMDwv\
Y29sbGFwc2VfcGFyYW1ldGVyc19vY2N1cnJlbmNlcz4KICAgIDxjb2xsYXBz\
ZV9wcm9maWxlcz50cnVlPC9jb2xsYXBzZV9wcm9maWxlcz4KICAgIDxjb2xs\
YXBzZV9wcm9maWxlc19vY2N1cnJlbmNlcz4xMDwvY29sbGFwc2VfcHJvZmls\
ZXNfb2NjdXJyZW5jZXM+CiAgICA8ZmxnX2VuZm9yY2VfdW5tb2RpZmllZF9j\
b29raWVzPmZhbHNlPC9mbGdfZW5mb3JjZV91bm1vZGlmaWVkX2Nvb2tpZXM+\
CiAgICA8Y2xhc3NpZnlfdXJscz5mYWxzZTwvY2xhc3NpZnlfdXJscz4KICAg\
IDxjbGFzc2lmeV9wYXJhbWV0ZXJzPmZhbHNlPC9jbGFzc2lmeV9wYXJhbWV0\
ZXJzPgogICAgPGNsYXNzaWZ5X3dlYnNvY2tldF91cmxzPmZhbHNlPC9jbGFz\
c2lmeV93ZWJzb2NrZXRfdXJscz4KICAgIDxzZXRfbWV0aG9kX292ZXJyaWRl\
X29uX3VybD5mYWxzZTwvc2V0X21ldGhvZF9vdmVycmlkZV9vbl91cmw+CiAg\
ICA8ZW5hYmxlX2Z1bGxfcG9saWN5X2luc3BlY3Rpb24+dHJ1ZTwvZW5hYmxl\
X2Z1bGxfcG9saWN5X2luc3BlY3Rpb24+CiAgICA8cmVzcG9uc2VfY29kZT4x\
eHg8L3Jlc3BvbnNlX2NvZGU+CiAgICA8cmVzcG9uc2VfY29kZT4yeHg8L3Jl\
c3BvbnNlX2NvZGU+CiAgICA8cmVzcG9uc2VfY29kZT4zeHg8L3Jlc3BvbnNl\
X2NvZGU+CiAgICA8ZmlsZXR5cGU+Ym1wPC9maWxldHlwZT4KICAgIDxmaWxl\
dHlwZT5naWY8L2ZpbGV0eXBlPgogICAgPGZpbGV0eXBlPmljbzwvZmlsZXR5\
cGU+CiAgICA8ZmlsZXR5cGU+anBlZzwvZmlsZXR5cGU+CiAgICA8ZmlsZXR5\
cGU+anBnPC9maWxldHlwZT4KICAgIDxmaWxldHlwZT5wY3g8L2ZpbGV0eXBl\
PgogICAgPGZpbGV0eXBlPnBkZjwvZmlsZXR5cGU+CiAgICA8ZmlsZXR5cGU+\
cG5nPC9maWxldHlwZT4KICAgIDxmaWxldHlwZT5zd2Y8L2ZpbGV0eXBlPgog\
ICAgPGZpbGV0eXBlPndhdjwvZmlsZXR5cGU+CiAgPC9wb2xpY3lfYnVpbGRl\
cj4KICA8Z2VvbG9jYXRpb24+CiAgICA8ZW5mb3JjZW1lbnRfbW9kZT4KICAg\
ICAgPG1vZGU+ZGlzYWxsb3c8L21vZGU+CiAgICA8L2VuZm9yY2VtZW50X21v\
ZGU+CiAgPC9nZW9sb2NhdGlvbj4KICA8aXBfcmVwdXRhdGlvbj4KICAgIDxl\
bmFibGVkPmZhbHNlPC9lbmFibGVkPgogIDwvaXBfcmVwdXRhdGlvbj4KICA8\
ZGF0YWJhc2VfcHJvdGVjdGlvbj4KICAgIDxlbmFibGVkPmZhbHNlPC9lbmFi\
bGVkPgogICAgPHVzZXJfc291cmNlPkFQTSBVc2VybmFtZXMgYW5kIFNlc3Np\
b24gSUQ8L3VzZXJfc291cmNlPgogIDwvZGF0YWJhc2VfcHJvdGVjdGlvbj4K\
ICA8aGVhZGVyIHR5cGU9IndpbGRjYXJkIiBuYW1lPSIqIj4KICAgIDxpc19t\
YW5kYXRvcnk+ZmFsc2U8L2lzX21hbmRhdG9yeT4KICAgIDxjaGVja19zaWdu\
YXR1cmVzPnRydWU8L2NoZWNrX3NpZ25hdHVyZXM+CiAgICA8aXNfYmFzZTY0\
PmZhbHNlPC9pc19iYXNlNjQ+CiAgICA8cGVyY2VudF9ub3JtYWxpemF0aW9u\
PmZhbHNlPC9wZXJjZW50X25vcm1hbGl6YXRpb24+CiAgICA8dXJpX25vcm1h\
bGl6YXRpb24+ZmFsc2U8L3VyaV9ub3JtYWxpemF0aW9uPgogICAgPGh0bWxf\
bm9ybWFsaXphdGlvbj5mYWxzZTwvaHRtbF9ub3JtYWxpemF0aW9uPgogICAg\
PGVuYWJsZV9ub3JtYWxpemF0aW9uX3Zpb2xhdGlvbj5mYWxzZTwvZW5hYmxl\
X25vcm1hbGl6YXRpb25fdmlvbGF0aW9uPgogICAgPGlzX2RlZmF1bHQ+dHJ1\
ZTwvaXNfZGVmYXVsdD4KICA8L2hlYWRlcj4KICA8aGVhZGVyIHR5cGU9ImV4\
cGxpY2l0IiBuYW1lPSJhdXRob3JpemF0aW9uIj4KICAgIDxpc19tYW5kYXRv\
cnk+ZmFsc2U8L2lzX21hbmRhdG9yeT4KICAgIDxjaGVja19zaWduYXR1cmVz\
PnRydWU8L2NoZWNrX3NpZ25hdHVyZXM+CiAgICA8aXNfYmFzZTY0PmZhbHNl\
PC9pc19iYXNlNjQ+CiAgICA8cGVyY2VudF9ub3JtYWxpemF0aW9uPmZhbHNl\
PC9wZXJjZW50X25vcm1hbGl6YXRpb24+CiAgICA8dXJpX25vcm1hbGl6YXRp\
b24+ZmFsc2U8L3VyaV9ub3JtYWxpemF0aW9uPgogICAgPGh0bWxfbm9ybWFs\
aXphdGlvbj5mYWxzZTwvaHRtbF9ub3JtYWxpemF0aW9uPgogICAgPGVuYWJs\
ZV9ub3JtYWxpemF0aW9uX3Zpb2xhdGlvbj5mYWxzZTwvZW5hYmxlX25vcm1h\
bGl6YXRpb25fdmlvbGF0aW9uPgogICAgPGlzX2RlZmF1bHQ+dHJ1ZTwvaXNf\
ZGVmYXVsdD4KICA8L2hlYWRlcj4KICA8aGVhZGVyIHR5cGU9ImV4cGxpY2l0\
IiBuYW1lPSJjb29raWUiPgogICAgPGlzX21hbmRhdG9yeT5mYWxzZTwvaXNf\
bWFuZGF0b3J5PgogICAgPGNoZWNrX3NpZ25hdHVyZXM+ZmFsc2U8L2NoZWNr\
X3NpZ25hdHVyZXM+CiAgICA8aXNfYmFzZTY0PmZhbHNlPC9pc19iYXNlNjQ+\
CiAgICA8cGVyY2VudF9ub3JtYWxpemF0aW9uPmZhbHNlPC9wZXJjZW50X25v\
cm1hbGl6YXRpb24+CiAgICA8dXJpX25vcm1hbGl6YXRpb24+ZmFsc2U8L3Vy\
aV9ub3JtYWxpemF0aW9uPgogICAgPGh0bWxfbm9ybWFsaXphdGlvbj5mYWxz\
ZTwvaHRtbF9ub3JtYWxpemF0aW9uPgogICAgPGVuYWJsZV9ub3JtYWxpemF0\
aW9uX3Zpb2xhdGlvbj5mYWxzZTwvZW5hYmxlX25vcm1hbGl6YXRpb25fdmlv\
bGF0aW9uPgogICAgPGlzX2RlZmF1bHQ+dHJ1ZTwvaXNfZGVmYXVsdD4KICA8\
L2hlYWRlcj4KICA8aGVhZGVyIHR5cGU9ImV4cGxpY2l0IiBuYW1lPSJyZWZl\
cmVyIj4KICAgIDxpc19tYW5kYXRvcnk+ZmFsc2U8L2lzX21hbmRhdG9yeT4K\
ICAgIDxjaGVja19zaWduYXR1cmVzPnRydWU8L2NoZWNrX3NpZ25hdHVyZXM+\
CiAgICA8aXNfYmFzZTY0PmZhbHNlPC9pc19iYXNlNjQ+CiAgICA8cGVyY2Vu\
dF9ub3JtYWxpemF0aW9uPmZhbHNlPC9wZXJjZW50X25vcm1hbGl6YXRpb24+\
CiAgICA8dXJpX25vcm1hbGl6YXRpb24+dHJ1ZTwvdXJpX25vcm1hbGl6YXRp\
b24+CiAgICA8aHRtbF9ub3JtYWxpemF0aW9uPmZhbHNlPC9odG1sX25vcm1h\
bGl6YXRpb24+CiAgICA8ZW5hYmxlX25vcm1hbGl6YXRpb25fdmlvbGF0aW9u\
PnRydWU8L2VuYWJsZV9ub3JtYWxpemF0aW9uX3Zpb2xhdGlvbj4KICAgIDxp\
c19kZWZhdWx0PnRydWU8L2lzX2RlZmF1bHQ+CiAgPC9oZWFkZXI+CiAgPHJl\
ZGlyZWN0aW9uX2RvbWFpbiB0eXBlPSJ3aWxkY2FyZCIgbmFtZT0iKiI+CiAg\
ICA8aW5jbHVkZV9zdWJkb21haW5zPmZhbHNlPC9pbmNsdWRlX3N1YmRvbWFp\
bnM+CiAgICA8bGVhcm5pbmdfbW9kZT5BbHdheXM8L2xlYXJuaW5nX21vZGU+\
CiAgPC9yZWRpcmVjdGlvbl9kb21haW4+CiAgPHJlZGlyZWN0aW9uX3Byb3Rl\
Y3Rpb24+CiAgICA8ZW5hYmxlZD50cnVlPC9lbmFibGVkPgogIDwvcmVkaXJl\
Y3Rpb25fcHJvdGVjdGlvbj4KICA8YnJ1dGVfZm9yY2U+CiAgICA8b2JqZWN0\
X2lkPjA8L29iamVjdF9pZD4KICAgIDxtYXhpbXVtX2xvZ2luX2F0dGVtcHRz\
PjU8L21heGltdW1fbG9naW5fYXR0ZW1wdHM+CiAgICA8c2Vzc2lvbl9leHBp\
cmF0aW9uX2luX3NlY29uZHM+NjAwPC9zZXNzaW9uX2V4cGlyYXRpb25faW5f\
c2Vjb25kcz4KICAgIDxtZWFzdXJlbWVudF9wZXJpb2Q+MTwvbWVhc3VyZW1l\
bnRfcGVyaW9kPgogICAgPGZvcmNlX2Jsb2NraW5nPmZhbHNlPC9mb3JjZV9i\
bG9ja2luZz4KICAgIDxhbGFybT50cnVlPC9hbGFybT4KICAgIDxibG9jaz5m\
YWxzZTwvYmxvY2s+CiAgICA8bG9naW5fYXR0ZW1wdF9pbmNyZWFzZV9saW1p\
dD41MDA8L2xvZ2luX2F0dGVtcHRfaW5jcmVhc2VfbGltaXQ+CiAgICA8bG9n\
aW5fYXR0ZW1wdHNfcmVhY2hlZD4xMDA8L2xvZ2luX2F0dGVtcHRzX3JlYWNo\
ZWQ+CiAgICA8bWluaW11bV9mYWlsZWRfbG9naW5fYXR0ZW1wdHM+MjA8L21p\
bmltdW1fZmFpbGVkX2xvZ2luX2F0dGVtcHRzPgogICAgPHN1c3BpY2lvdXNf\
aXBfdGhyZXNob2xkPjUwMDwvc3VzcGljaW91c19pcF90aHJlc2hvbGQ+CiAg\
ICA8c3VzcGljaW91c19pcF9yYXRlX3JlYWNoZWQ+MjA8L3N1c3BpY2lvdXNf\
aXBfcmF0ZV9yZWFjaGVkPgogICAgPHNvdXJjZV9pcF9jbGllbnRfc2lkZV9k\
ZWZlbnNlPmZhbHNlPC9zb3VyY2VfaXBfY2xpZW50X3NpZGVfZGVmZW5zZT4K\
ICAgIDx1cmxfY2xpZW50X3NpZGVfZGVmZW5zZT5mYWxzZTwvdXJsX2NsaWVu\
dF9zaWRlX2RlZmVuc2U+CiAgICA8c291cmNlX2lwX3JhdGVfbGltaXQ+dHJ1\
ZTwvc291cmNlX2lwX3JhdGVfbGltaXQ+CiAgICA8dXJsX3JhdGVfbGltaXQ+\
dHJ1ZTwvdXJsX3JhdGVfbGltaXQ+CiAgICA8aWRlbnRpZnlfZGV2aWNlPmZh\
bHNlPC9pZGVudGlmeV9kZXZpY2U+CiAgICA8bWF4aW11bV9wcmV2ZW50aW9u\
X3RpbWU+MDwvbWF4aW11bV9wcmV2ZW50aW9uX3RpbWU+CiAgICA8ZmxnX2Vu\
YWJsZWQ+dHJ1ZTwvZmxnX2VuYWJsZWQ+CiAgPC9icnV0ZV9mb3JjZT4KPC9w\
b2xpY3k+Cg==}
set bundler_data(asm:LAMP_PolicyBuilder) {PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPHBvbGlj\
eSBpbnRlZ3JpdHlfY2hlY2s9IjcyNGQ3NTFkZDkwZTllNGJjMzg1NDY4ODFm\
MzhiOTZlIiBiaWdpcF92ZXJzaW9uPSIxMi4xLjIiIG5hbWU9Ii9Db21tb24v\
TEFNUF9Qb2xpY3lCdWlsZGVyIj4KICA8cG9saWN5X3ZlcnNpb24+CiAgICA8\
dGltZXN0YW1wPjIwMTctMDYtMjlUMDg6MDc6MDNaPC90aW1lc3RhbXA+CiAg\
ICA8ZGV2aWNlX25hbWU+YmlnaXAxPC9kZXZpY2VfbmFtZT4KICAgIDxwb2xp\
Y3lfbmFtZT4vQ29tbW9uL0xBTVBfUG9saWN5QnVpbGRlcjwvcG9saWN5X25h\
bWU+CiAgICA8bGFzdF9jaGFuZ2U+UG9saWN5IEJ1aWxkaW5nIFNldHRpbmdz\
IFBvbGljeSBCdWlsZGluZyBTZXR0aW5ncyBbdXBkYXRlXTogSW50ZXJuYWwg\
U3RhdGlzdGljcyBoYXZlIGJlZW4gdXBkYXRlZCB7IGF1ZGl0OiBwb2xpY3kg\
PSAvQ29tbW9uL0xBTVBfUG9saWN5QnVpbGRlciwgY29tcG9uZW50ID0gUG9s\
aWN5IEJ1aWxkZXIgfTwvbGFzdF9jaGFuZ2U+CiAgPC9wb2xpY3lfdmVyc2lv\
bj4KICA8bWF4aW11bV9odHRwX2xlbmd0aD4yMDQ4PC9tYXhpbXVtX2h0dHBf\
bGVuZ3RoPgogIDxtYXhpbXVtX2Nvb2tpZV9sZW5ndGg+MjA0ODwvbWF4aW11\
bV9jb29raWVfbGVuZ3RoPgogIDxkZXNjcmlwdGlvbj48L2Rlc2NyaXB0aW9u\
PgogIDx0cmlnZ2VyX2FzbV9pcnVsZV9ldmVudD5EaXNhYmxlZDwvdHJpZ2dl\
cl9hc21faXJ1bGVfZXZlbnQ+CiAgPGNhc2VfaW5zZW5zaXRpdmU+ZmFsc2U8\
L2Nhc2VfaW5zZW5zaXRpdmU+CiAgPG93YT5mYWxzZTwvb3dhPgogIDxpbnNw\
ZWN0X2h0dHBfdXBsb2Fkcz5mYWxzZTwvaW5zcGVjdF9odHRwX3VwbG9hZHM+\
CiAgPHByb3RvY29sX2ZyZWU+ZmFsc2U8L3Byb3RvY29sX2ZyZWU+CiAgPHBh\
dGhfcGFyYW1ldGVyX2hhbmRsaW5nPmFzIHBhcmFtZXRlcnM8L3BhdGhfcGFy\
YW1ldGVyX2hhbmRsaW5nPgogIDxtYXNrX3NlbnNpdGl2ZT50cnVlPC9tYXNr\
X3NlbnNpdGl2ZT4KICA8dHJ1c3RfeGZmPmZhbHNlPC90cnVzdF94ZmY+CiAg\
PGNzcmY+CiAgICA8ZW5hYmxlZD5mYWxzZTwvZW5hYmxlZD4KICAgIDxzc2xf\
b25seT5mYWxzZTwvc3NsX29ubHk+CiAgICA8ZW5mb3JjZW1lbnRfbW9kZT5l\
bmZvcmNpbmc8L2VuZm9yY2VtZW50X21vZGU+CiAgICA8ZXhwaXJhdGlvbl90\
aW1lX2luX3NlY29uZHM+MDwvZXhwaXJhdGlvbl90aW1lX2luX3NlY29uZHM+\
CiAgPC9jc3JmPgogIDxhbGxvd2VkX3Jlc3BvbnNlX2NvZGU+NDAwPC9hbGxv\
d2VkX3Jlc3BvbnNlX2NvZGU+CiAgPGFsbG93ZWRfcmVzcG9uc2VfY29kZT40\
MDE8L2FsbG93ZWRfcmVzcG9uc2VfY29kZT4KICA8YWxsb3dlZF9yZXNwb25z\
ZV9jb2RlPjQwNDwvYWxsb3dlZF9yZXNwb25zZV9jb2RlPgogIDxhbGxvd2Vk\
X3Jlc3BvbnNlX2NvZGU+NDA3PC9hbGxvd2VkX3Jlc3BvbnNlX2NvZGU+CiAg\
PGFsbG93ZWRfcmVzcG9uc2VfY29kZT40MTc8L2FsbG93ZWRfcmVzcG9uc2Vf\
Y29kZT4KICA8YWxsb3dlZF9yZXNwb25zZV9jb2RlPjUwMzwvYWxsb3dlZF9y\
ZXNwb25zZV9jb2RlPgogIDx3ZWJfc2NyYXBpbmc+CiAgICA8Z3JhY2VfdGhy\
ZXNob2xkPjEwMDwvZ3JhY2VfdGhyZXNob2xkPgogICAgPHNlc3Npb25fcHJl\
dmVudGlvbl90aHJlc2hvbGQ+NTAwPC9zZXNzaW9uX3ByZXZlbnRpb25fdGhy\
ZXNob2xkPgogICAgPHJldmFsaWRhdGlvbl90aHJlc2hvbGQ+MjAwMDwvcmV2\
YWxpZGF0aW9uX3RocmVzaG9sZD4KICAgIDx3ZWJfc2NyYXBpbmdfYWxhcm0+\
ZmFsc2U8L3dlYl9zY3JhcGluZ19hbGFybT4KICAgIDx3ZWJfc2NyYXBpbmdf\
YmxvY2s+ZmFsc2U8L3dlYl9zY3JhcGluZ19ibG9jaz4KICAgIDxzZXNzaW9u\
X29wZW5pbmdfYW5vbWFseV9ibG9jaz5mYWxzZTwvc2Vzc2lvbl9vcGVuaW5n\
X2Fub21hbHlfYmxvY2s+CiAgICA8c2Vzc2lvbl9vcGVuaW5nX2Fub21hbHlf\
YWxhcm0+ZmFsc2U8L3Nlc3Npb25fb3BlbmluZ19hbm9tYWx5X2FsYXJtPgog\
ICAgPHNlc3Npb25fdHJhbnNhY3Rpb25zX2Fub21hbHlfYWxhcm0+ZmFsc2U8\
L3Nlc3Npb25fdHJhbnNhY3Rpb25zX2Fub21hbHlfYWxhcm0+CiAgICA8c2Vz\
c2lvbl90cmFuc2FjdGlvbnNfYW5vbWFseV9ibG9jaz5mYWxzZTwvc2Vzc2lv\
bl90cmFuc2FjdGlvbnNfYW5vbWFseV9ibG9jaz4KICAgIDxvcGVuaW5nX2Ns\
aWVudF9zaWRlX2ludGVncml0eV9kZWZlbnNlPmZhbHNlPC9vcGVuaW5nX2Ns\
aWVudF9zaWRlX2ludGVncml0eV9kZWZlbnNlPgogICAgPG9wZW5pbmdfcmF0\
ZV9saW1pdGluZz5mYWxzZTwvb3BlbmluZ19yYXRlX2xpbWl0aW5nPgogICAg\
PHNlc3Npb25zX29wZW5lZF9wZXJfc2Vjb25kX2luY3JlYXNlX3JhdGU+NTAw\
PC9zZXNzaW9uc19vcGVuZWRfcGVyX3NlY29uZF9pbmNyZWFzZV9yYXRlPgog\
ICAgPHNlc3Npb25zX29wZW5lZF9wZXJfc2Vjb25kX21heGltdW0+NTA8L3Nl\
c3Npb25zX29wZW5lZF9wZXJfc2Vjb25kX21heGltdW0+CiAgICA8c2Vzc2lv\
bnNfb3BlbmVkX3Blcl9zZWNvbmRfbWluaW11bT4yNTwvc2Vzc2lvbnNfb3Bl\
bmVkX3Blcl9zZWNvbmRfbWluaW11bT4KICAgIDxvcGVuaW5nX21heF9wcmV2\
ZW50aW9uX2R1cmF0aW9uPjE4MDA8L29wZW5pbmdfbWF4X3ByZXZlbnRpb25f\
ZHVyYXRpb24+CiAgICA8b3BlbmluZ19kcm9wX2lwX3dpdGhfcmVwdXRhdGlv\
bj5mYWxzZTwvb3BlbmluZ19kcm9wX2lwX3dpdGhfcmVwdXRhdGlvbj4KICAg\
IDx0cmFuc2FjdGlvbnNfdHBzX2luY3JlYXNlX3JhdGU+NTAwPC90cmFuc2Fj\
dGlvbnNfdHBzX2luY3JlYXNlX3JhdGU+CiAgICA8dHJhbnNhY3Rpb25zX3Bl\
cl9zZWNvbmRfbWF4aW11bT40MDA8L3RyYW5zYWN0aW9uc19wZXJfc2Vjb25k\
X21heGltdW0+CiAgICA8dHJhbnNhY3Rpb25zX3Blcl9zZWNvbmRfbWluaW11\
bT4yMDA8L3RyYW5zYWN0aW9uc19wZXJfc2Vjb25kX21pbmltdW0+CiAgICA8\
dHJhbnNhY3Rpb25zX21heF9wcmV2ZW50aW9uX2R1cmF0aW9uPjE4MDA8L3Ry\
YW5zYWN0aW9uc19tYXhfcHJldmVudGlvbl9kdXJhdGlvbj4KICAgIDxvcGVu\
aW5nX3BlcnNpc3RlbnRfc3RvcmFnZV9pbmNvbnNpc3RlbmN5PnRydWU8L29w\
ZW5pbmdfcGVyc2lzdGVudF9zdG9yYWdlX2luY29uc2lzdGVuY3k+CiAgICA8\
b3BlbmluZ19wZXJzaXN0ZW50X3N0b3JhZ2VfcmVzZXRzPnRydWU8L29wZW5p\
bmdfcGVyc2lzdGVudF9zdG9yYWdlX3Jlc2V0cz4KICAgIDxvcGVuaW5nX3Bl\
cnNpc3RlbnRfc3RvcmFnZV9pbmNvbnNpc3RlbmN5X2V2ZW50c19tYXhpbXVt\
PjM8L29wZW5pbmdfcGVyc2lzdGVudF9zdG9yYWdlX2luY29uc2lzdGVuY3lf\
ZXZlbnRzX21heGltdW0+CiAgICA8b3BlbmluZ19wZXJzaXN0ZW50X3N0b3Jh\
Z2VfaW5jb25zaXN0ZW5jeV9ldmVudHNfZHVyYXRpb24+NjAwPC9vcGVuaW5n\
X3BlcnNpc3RlbnRfc3RvcmFnZV9pbmNvbnNpc3RlbmN5X2V2ZW50c19kdXJh\
dGlvbj4KICAgIDxvcGVuaW5nX3BlcnNpc3RlbnRfc3RvcmFnZV9yZXNldHNf\
bWF4aW11bT4yPC9vcGVuaW5nX3BlcnNpc3RlbnRfc3RvcmFnZV9yZXNldHNf\
bWF4aW11bT4KICAgIDxvcGVuaW5nX3BlcnNpc3RlbnRfc3RvcmFnZV9yZXNl\
dHNfZHVyYXRpb24+NjAwPC9vcGVuaW5nX3BlcnNpc3RlbnRfc3RvcmFnZV9y\
ZXNldHNfZHVyYXRpb24+CiAgICA8cGVyc2lzdGVudF9zdG9yYWdlX21heF9w\
cmV2ZW50aW9uX2R1cmF0aW9uPjE4MDA8L3BlcnNpc3RlbnRfc3RvcmFnZV9t\
YXhfcHJldmVudGlvbl9kdXJhdGlvbj4KICAgIDx1c2VfcGVyc2lzdGVudF9z\
dG9yYWdlPmZhbHNlPC91c2VfcGVyc2lzdGVudF9zdG9yYWdlPgogICAgPHBl\
cnNpc3RlbnRfZGF0YV92YWxpZGl0eV9wZXJpb2Q+MTIwPC9wZXJzaXN0ZW50\
X2RhdGFfdmFsaWRpdHlfcGVyaW9kPgogICAgPHNlc3Npb25fb3BlbmluZ19h\
bm9tYWx5X2VuYWJsZT50cnVlPC9zZXNzaW9uX29wZW5pbmdfYW5vbWFseV9l\
bmFibGU+CiAgICA8c3VzcGljaW91c19jbGllbnRzX2FsYXJtPmZhbHNlPC9z\
dXNwaWNpb3VzX2NsaWVudHNfYWxhcm0+CiAgICA8c3VzcGljaW91c19jbGll\
bnRzX2Jsb2NrPmZhbHNlPC9zdXNwaWNpb3VzX2NsaWVudHNfYmxvY2s+CiAg\
ICA8ZmluZ2VycHJpbnRpbmdfZW5hYmxlPmZhbHNlPC9maW5nZXJwcmludGlu\
Z19lbmFibGU+CiAgICA8ZmluZ2VycHJpbnRfcmVzZXRzX2VuYWJsZWQ+ZmFs\
c2U8L2ZpbmdlcnByaW50X3Jlc2V0c19lbmFibGVkPgogICAgPGZpbmdlcnBy\
aW50X3Jlc2V0c190aHJlc2hvbGQ+NTwvZmluZ2VycHJpbnRfcmVzZXRzX3Ro\
cmVzaG9sZD4KICAgIDxmaW5nZXJwcmludF9yZXNldHNfdGltZV93aW5kb3c+\
NjAwPC9maW5nZXJwcmludF9yZXNldHNfdGltZV93aW5kb3c+CiAgICA8ZGV0\
ZWN0X3BsdWdpbnM+ZmFsc2U8L2RldGVjdF9wbHVnaW5zPgogICAgPHN1c3Bp\
Y2lvdXNfY2xpZW50c19wcmV2ZW50aW9uX2R1cmF0aW9uPjMwMDwvc3VzcGlj\
aW91c19jbGllbnRzX3ByZXZlbnRpb25fZHVyYXRpb24+CiAgICA8cmFwaWRf\
c3VyZl9tYXhfc2Vjb25kc19kdXJhdGlvbj4zMDwvcmFwaWRfc3VyZl9tYXhf\
c2Vjb25kc19kdXJhdGlvbj4KICAgIDxyYXBpZF9zdXJmX21heF9wYWdlcz4x\
MjA8L3JhcGlkX3N1cmZfbWF4X3BhZ2VzPgogICAgPHJhcGlkX3N1cmZfbWF4\
X2Rpc3RpbmN0X3BhZ2VzPjMwPC9yYXBpZF9zdXJmX21heF9kaXN0aW5jdF9w\
YWdlcz4KICAgIDxldmVudHNfc2VxdWVuY2VfZW5mb3JjZW1lbnQ+ZmFsc2U8\
L2V2ZW50c19zZXF1ZW5jZV9lbmZvcmNlbWVudD4KICA8L3dlYl9zY3JhcGlu\
Zz4KICA8YmxvY2tpbmc+CiAgICA8ZW5mb3JjZW1lbnRfbW9kZT5ibG9ja2lu\
ZzwvZW5mb3JjZW1lbnRfbW9kZT4KICAgIDx2aW9sYXRpb24gbmFtZT0iSWxs\
ZWdhbCBhdHRhY2htZW50IGluIFNPQVAgbWVzc2FnZSIgaWQ9IklMTEVHQUxf\
U09BUF9BVFRBQ0hNRU5UIj4KICAgICAgPGFsYXJtPmZhbHNlPC9hbGFybT4K\
ICAgICAgPGJsb2NrPmZhbHNlPC9ibG9jaz4KICAgICAgPGxlYXJuPmZhbHNl\
PC9sZWFybj4KICAgICAgPHBvbGljeV9idWlsZGVyX3RyYWNraW5nPmVuYWJs\
ZWQ8L3BvbGljeV9idWlsZGVyX3RyYWNraW5nPgogICAgPC92aW9sYXRpb24+\
CiAgICA8dmlvbGF0aW9uIG5hbWU9IkxvZ2luIFVSTCBleHBpcmVkIiBpZD0i\
UEFSU0VSX0VYUElSRURfSU5HUkVTU19PQkpFQ1QiPgogICAgICA8YWxhcm0+\
ZmFsc2U8L2FsYXJtPgogICAgICA8YmxvY2s+ZmFsc2U8L2Jsb2NrPgogICAg\
ICA8bGVhcm4+ZmFsc2U8L2xlYXJuPgogICAgICA8cG9saWN5X2J1aWxkZXJf\
dHJhY2tpbmc+ZW5hYmxlZDwvcG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+CiAg\
ICA8L3Zpb2xhdGlvbj4KICAgIDx2aW9sYXRpb24gbmFtZT0iTG9naW4gVVJM\
IGJ5cGFzc2VkIiBpZD0iSUxMRUdBTF9JTkdSRVNTX09CSkVDVCI+CiAgICAg\
IDxhbGFybT5mYWxzZTwvYWxhcm0+CiAgICAgIDxibG9jaz5mYWxzZTwvYmxv\
Y2s+CiAgICAgIDxsZWFybj5mYWxzZTwvbGVhcm4+CiAgICAgIDxwb2xpY3lf\
YnVpbGRlcl90cmFja2luZz5lbmFibGVkPC9wb2xpY3lfYnVpbGRlcl90cmFj\
a2luZz4KICAgIDwvdmlvbGF0aW9uPgogICAgPHZpb2xhdGlvbiBuYW1lPSJS\
ZXF1ZXN0IGxlbmd0aCBleGNlZWRzIGRlZmluZWQgYnVmZmVyIHNpemUiIGlk\
PSJSRVFVRVNUX1RPT19MT05HIj4KICAgICAgPGFsYXJtPmZhbHNlPC9hbGFy\
bT4KICAgICAgPGJsb2NrPmZhbHNlPC9ibG9jaz4KICAgICAgPGxlYXJuPnRy\
dWU8L2xlYXJuPgogICAgICA8cG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+ZW5h\
YmxlZDwvcG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+CiAgICA8L3Zpb2xhdGlv\
bj4KICAgIDx2aW9sYXRpb24gbmFtZT0iVmlydXMgZGV0ZWN0ZWQiIGlkPSJW\
SVJVU19ERVRFQ1RFRCI+CiAgICAgIDxhbGFybT5mYWxzZTwvYWxhcm0+CiAg\
ICAgIDxibG9jaz5mYWxzZTwvYmxvY2s+CiAgICAgIDxsZWFybj5mYWxzZTwv\
bGVhcm4+CiAgICAgIDxwb2xpY3lfYnVpbGRlcl90cmFja2luZz5lbmFibGVk\
PC9wb2xpY3lfYnVpbGRlcl90cmFja2luZz4KICAgIDwvdmlvbGF0aW9uPgog\
ICAgPHZpb2xhdGlvbiBuYW1lPSJXZWIgU2VydmljZXMgU2VjdXJpdHkgZmFp\
bHVyZSIgaWQ9IlBBUlNFUl9GQUlMRURfU09BUF9TRUNVUklUWSI+CiAgICAg\
IDxhbGFybT5mYWxzZTwvYWxhcm0+CiAgICAgIDxibG9jaz5mYWxzZTwvYmxv\
Y2s+CiAgICAgIDxsZWFybj5mYWxzZTwvbGVhcm4+CiAgICAgIDxwb2xpY3lf\
YnVpbGRlcl90cmFja2luZz5lbmFibGVkPC9wb2xpY3lfYnVpbGRlcl90cmFj\
a2luZz4KICAgIDwvdmlvbGF0aW9uPgogICAgPHZpb2xhdGlvbiBuYW1lPSJY\
TUwgZGF0YSBkb2VzIG5vdCBjb21wbHkgd2l0aCBmb3JtYXQgc2V0dGluZ3Mi\
IGlkPSJYTUxfRk9STUFUX1NFVFRJTkciPgogICAgICA8YWxhcm0+ZmFsc2U8\
L2FsYXJtPgogICAgICA8YmxvY2s+ZmFsc2U8L2Jsb2NrPgogICAgICA8bGVh\
cm4+ZmFsc2U8L2xlYXJuPgogICAgICA8cG9saWN5X2J1aWxkZXJfdHJhY2tp\
bmc+ZW5hYmxlZDwvcG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+CiAgICA8L3Zp\
b2xhdGlvbj4KICAgIDx2aW9sYXRpb24gbmFtZT0iWE1MIGRhdGEgZG9lcyBu\
b3QgY29tcGx5IHdpdGggc2NoZW1hIG9yIFdTREwgZG9jdW1lbnQiIGlkPSJY\
TUxfV1NETCI+CiAgICAgIDxhbGFybT5mYWxzZTwvYWxhcm0+CiAgICAgIDxi\
bG9jaz5mYWxzZTwvYmxvY2s+CiAgICAgIDxsZWFybj5mYWxzZTwvbGVhcm4+\
CiAgICAgIDxwb2xpY3lfYnVpbGRlcl90cmFja2luZz5lbmFibGVkPC9wb2xp\
Y3lfYnVpbGRlcl90cmFja2luZz4KICAgIDwvdmlvbGF0aW9uPgogICAgPHZp\
b2xhdGlvbiBuYW1lPSJNYWxmb3JtZWQgWE1MIGRhdGEiIGlkPSJNQUxGT1JN\
RURfWE1MIj4KICAgICAgPGFsYXJtPmZhbHNlPC9hbGFybT4KICAgICAgPGJs\
b2NrPmZhbHNlPC9ibG9jaz4KICAgICAgPGxlYXJuPmZhbHNlPC9sZWFybj4K\
ICAgICAgPHBvbGljeV9idWlsZGVyX3RyYWNraW5nPmVuYWJsZWQ8L3BvbGlj\
eV9idWlsZGVyX3RyYWNraW5nPgogICAgPC92aW9sYXRpb24+CiAgICA8dmlv\
bGF0aW9uIG5hbWU9IkNTUkYgYXR0YWNrIGRldGVjdGVkIiBpZD0iQ1NSRiI+\
CiAgICAgIDxhbGFybT5mYWxzZTwvYWxhcm0+CiAgICAgIDxibG9jaz5mYWxz\
ZTwvYmxvY2s+CiAgICAgIDxsZWFybj5mYWxzZTwvbGVhcm4+CiAgICAgIDxw\
b2xpY3lfYnVpbGRlcl90cmFja2luZz5lbmFibGVkPC9wb2xpY3lfYnVpbGRl\
cl90cmFja2luZz4KICAgIDwvdmlvbGF0aW9uPgogICAgPHZpb2xhdGlvbiBu\
YW1lPSJGYWlsZWQgdG8gY29udmVydCBjaGFyYWN0ZXIiIGlkPSJDSEFSX0NP\
TlYiPgogICAgICA8YWxhcm0+ZmFsc2U8L2FsYXJtPgogICAgICA8YmxvY2s+\
ZmFsc2U8L2Jsb2NrPgogICAgICA8bGVhcm4+dHJ1ZTwvbGVhcm4+CiAgICAg\
IDxwb2xpY3lfYnVpbGRlcl90cmFja2luZz5lbmFibGVkPC9wb2xpY3lfYnVp\
bGRlcl90cmFja2luZz4KICAgIDwvdmlvbGF0aW9uPgogICAgPHZpb2xhdGlv\
biBuYW1lPSJDU1JGIGF1dGhlbnRpY2F0aW9uIGV4cGlyZWQiIGlkPSJDU1JG\
X0VYUElSRUQiPgogICAgICA8YWxhcm0+ZmFsc2U8L2FsYXJtPgogICAgICA8\
YmxvY2s+ZmFsc2U8L2Jsb2NrPgogICAgICA8bGVhcm4+ZmFsc2U8L2xlYXJu\
PgogICAgICA8cG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+ZW5hYmxlZDwvcG9s\
aWN5X2J1aWxkZXJfdHJhY2tpbmc+CiAgICA8L3Zpb2xhdGlvbj4KICAgIDx2\
aW9sYXRpb24gbmFtZT0iV2ViIHNjcmFwaW5nIGRldGVjdGVkIiBpZD0iV0VC\
X1NDUkFQSU5HX0RFVEVDVEVEIj4KICAgICAgPGFsYXJtPmZhbHNlPC9hbGFy\
bT4KICAgICAgPGJsb2NrPmZhbHNlPC9ibG9jaz4KICAgICAgPGxlYXJuPmZh\
bHNlPC9sZWFybj4KICAgICAgPHBvbGljeV9idWlsZGVyX3RyYWNraW5nPmVu\
YWJsZWQ8L3BvbGljeV9idWlsZGVyX3RyYWNraW5nPgogICAgPC92aW9sYXRp\
b24+CiAgICA8dmlvbGF0aW9uIG5hbWU9IkJydXRlIEZvcmNlOiBNYXhpbXVt\
IGxvZ2luIGF0dGVtcHRzIGFyZSBleGNlZWRlZCIgaWQ9IkJSVVRFX0ZPUkNF\
X0FUVEFDS19ERVRFQ1RFRCI+CiAgICAgIDxhbGFybT5mYWxzZTwvYWxhcm0+\
CiAgICAgIDxibG9jaz5mYWxzZTwvYmxvY2s+CiAgICAgIDxsZWFybj5mYWxz\
ZTwvbGVhcm4+CiAgICAgIDxwb2xpY3lfYnVpbGRlcl90cmFja2luZz5lbmFi\
bGVkPC9wb2xpY3lfYnVpbGRlcl90cmFja2luZz4KICAgIDwvdmlvbGF0aW9u\
PgogICAgPHZpb2xhdGlvbiBuYW1lPSJTT0FQIG1ldGhvZCBub3QgYWxsb3dl\
ZCIgaWQ9IlNPQVBfTUVUSE9EX05PVF9BTExPV0VEIj4KICAgICAgPGFsYXJt\
PmZhbHNlPC9hbGFybT4KICAgICAgPGJsb2NrPmZhbHNlPC9ibG9jaz4KICAg\
ICAgPGxlYXJuPmZhbHNlPC9sZWFybj4KICAgICAgPHBvbGljeV9idWlsZGVy\
X3RyYWNraW5nPmVuYWJsZWQ8L3BvbGljeV9idWlsZGVyX3RyYWNraW5nPgog\
ICAgPC92aW9sYXRpb24+CiAgICA8dmlvbGF0aW9uIG5hbWU9IklsbGVnYWwg\
bWV0YSBjaGFyYWN0ZXIgaW4gdmFsdWUiIGlkPSJNRVRBQ0hBUl9JTl9ERUZf\
UEFSQU0iPgogICAgICA8YWxhcm0+ZmFsc2U8L2FsYXJtPgogICAgICA8Ymxv\
Y2s+ZmFsc2U8L2Jsb2NrPgogICAgICA8bGVhcm4+ZmFsc2U8L2xlYXJuPgog\
ICAgICA8cG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+ZW5hYmxlZDwvcG9saWN5\
X2J1aWxkZXJfdHJhY2tpbmc+CiAgICA8L3Zpb2xhdGlvbj4KICAgIDx2aW9s\
YXRpb24gbmFtZT0iSWxsZWdhbCBtZXRhIGNoYXJhY3RlciBpbiBwYXJhbWV0\
ZXIgbmFtZSIgaWQ9Ik1FVEFDSEFSX0lOX1BBUkFNX05BTUUiPgogICAgICA8\
YWxhcm0+ZmFsc2U8L2FsYXJtPgogICAgICA8YmxvY2s+ZmFsc2U8L2Jsb2Nr\
PgogICAgICA8bGVhcm4+ZmFsc2U8L2xlYXJuPgogICAgICA8cG9saWN5X2J1\
aWxkZXJfdHJhY2tpbmc+ZW5hYmxlZDwvcG9saWN5X2J1aWxkZXJfdHJhY2tp\
bmc+CiAgICA8L3Zpb2xhdGlvbj4KICAgIDx2aW9sYXRpb24gbmFtZT0iSWxs\
ZWdhbCBtZXRhIGNoYXJhY3RlciBpbiBVUkwiIGlkPSJNRVRBQ0hBUl9JTl9P\
QkoiPgogICAgICA8YWxhcm0+ZmFsc2U8L2FsYXJtPgogICAgICA8YmxvY2s+\
ZmFsc2U8L2Jsb2NrPgogICAgICA8bGVhcm4+ZmFsc2U8L2xlYXJuPgogICAg\
ICA8cG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+ZW5hYmxlZDwvcG9saWN5X2J1\
aWxkZXJfdHJhY2tpbmc+CiAgICA8L3Zpb2xhdGlvbj4KICAgIDx2aW9sYXRp\
b24gbmFtZT0iSlNPTiBkYXRhIGRvZXMgbm90IGNvbXBseSB3aXRoIGZvcm1h\
dCBzZXR0aW5ncyIgaWQ9IkpTT05fRk9STUFUX1NFVFRJTkciPgogICAgICA8\
YWxhcm0+ZmFsc2U8L2FsYXJtPgogICAgICA8YmxvY2s+ZmFsc2U8L2Jsb2Nr\
PgogICAgICA8bGVhcm4+ZmFsc2U8L2xlYXJuPgogICAgICA8cG9saWN5X2J1\
aWxkZXJfdHJhY2tpbmc+ZW5hYmxlZDwvcG9saWN5X2J1aWxkZXJfdHJhY2tp\
bmc+CiAgICA8L3Zpb2xhdGlvbj4KICAgIDx2aW9sYXRpb24gbmFtZT0iTnVs\
bCBpbiBtdWx0aS1wYXJ0IHBhcmFtZXRlciB2YWx1ZSIgaWQ9Ik1VTFRJX1BB\
UlRfUEFSQU1fVkFMIj4KICAgICAgPGFsYXJtPmZhbHNlPC9hbGFybT4KICAg\
ICAgPGJsb2NrPmZhbHNlPC9ibG9jaz4KICAgICAgPGxlYXJuPmZhbHNlPC9s\
ZWFybj4KICAgICAgPHBvbGljeV9idWlsZGVyX3RyYWNraW5nPmVuYWJsZWQ8\
L3BvbGljeV9idWlsZGVyX3RyYWNraW5nPgogICAgPC92aW9sYXRpb24+CiAg\
ICA8dmlvbGF0aW9uIG5hbWU9IklsbGVnYWwgcGFyYW1ldGVyIiBpZD0iUEFS\
QU0iPgogICAgICA8YWxhcm0+ZmFsc2U8L2FsYXJtPgogICAgICA8YmxvY2s+\
ZmFsc2U8L2Jsb2NrPgogICAgICA8bGVhcm4+ZmFsc2U8L2xlYXJuPgogICAg\
ICA8cG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+ZW5hYmxlZDwvcG9saWN5X2J1\
aWxkZXJfdHJhY2tpbmc+CiAgICA8L3Zpb2xhdGlvbj4KICAgIDx2aW9sYXRp\
b24gbmFtZT0iSWxsZWdhbCBxdWVyeSBzdHJpbmcgb3IgUE9TVCBkYXRhIiBp\
ZD0iUVNfT1JfUE9TVF9EQVRBIj4KICAgICAgPGFsYXJtPmZhbHNlPC9hbGFy\
bT4KICAgICAgPGJsb2NrPmZhbHNlPC9ibG9jaz4KICAgICAgPGxlYXJuPmZh\
bHNlPC9sZWFybj4KICAgICAgPHBvbGljeV9idWlsZGVyX3RyYWNraW5nPmVu\
YWJsZWQ8L3BvbGljeV9idWlsZGVyX3RyYWNraW5nPgogICAgPC92aW9sYXRp\
b24+CiAgICA8dmlvbGF0aW9uIG5hbWU9IklsbGVnYWwgbWV0aG9kIiBpZD0i\
SUxMRUdBTF9NRVRIT0QiPgogICAgICA8YWxhcm0+ZmFsc2U8L2FsYXJtPgog\
ICAgICA8YmxvY2s+ZmFsc2U8L2Jsb2NrPgogICAgICA8bGVhcm4+dHJ1ZTwv\
bGVhcm4+CiAgICAgIDxwb2xpY3lfYnVpbGRlcl90cmFja2luZz5lbmFibGVk\
PC9wb2xpY3lfYnVpbGRlcl90cmFja2luZz4KICAgIDwvdmlvbGF0aW9uPgog\
ICAgPHZpb2xhdGlvbiBuYW1lPSJJbGxlZ2FsIHBhcmFtZXRlciBkYXRhIHR5\
cGUiIGlkPSJQQVJBTV9EQVRBX1RZUEUiPgogICAgICA8YWxhcm0+ZmFsc2U8\
L2FsYXJtPgogICAgICA8YmxvY2s+ZmFsc2U8L2Jsb2NrPgogICAgICA8bGVh\
cm4+ZmFsc2U8L2xlYXJuPgogICAgICA8cG9saWN5X2J1aWxkZXJfdHJhY2tp\
bmc+ZW5hYmxlZDwvcG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+CiAgICA8L3Zp\
b2xhdGlvbj4KICAgIDx2aW9sYXRpb24gbmFtZT0iSWxsZWdhbCBwYXJhbWV0\
ZXIgdmFsdWUgbGVuZ3RoIiBpZD0iUEFSQU1fVkFMVUVfTEVOIj4KICAgICAg\
PGFsYXJtPmZhbHNlPC9hbGFybT4KICAgICAgPGJsb2NrPmZhbHNlPC9ibG9j\
az4KICAgICAgPGxlYXJuPmZhbHNlPC9sZWFybj4KICAgICAgPHBvbGljeV9i\
dWlsZGVyX3RyYWNraW5nPmVuYWJsZWQ8L3BvbGljeV9idWlsZGVyX3RyYWNr\
aW5nPgogICAgPC92aW9sYXRpb24+CiAgICA8dmlvbGF0aW9uIG5hbWU9IkFj\
Y2VzcyBmcm9tIGRpc2FsbG93ZWQgVXNlci9TZXNzaW9uL0lQIiBpZD0iU0VT\
U0lPTl9BV0FSRU5FU1MiPgogICAgICA8YWxhcm0+ZmFsc2U8L2FsYXJtPgog\
ICAgICA8YmxvY2s+ZmFsc2U8L2Jsb2NrPgogICAgICA8bGVhcm4+dHJ1ZTwv\
bGVhcm4+CiAgICAgIDxwb2xpY3lfYnVpbGRlcl90cmFja2luZz5lbmFibGVk\
PC9wb2xpY3lfYnVpbGRlcl90cmFja2luZz4KICAgIDwvdmlvbGF0aW9uPgog\
ICAgPHZpb2xhdGlvbiBuYW1lPSJNYWxmb3JtZWQgSlNPTiBkYXRhIiBpZD0i\
TUFMRk9STUVEX0pTT04iPgogICAgICA8YWxhcm0+ZmFsc2U8L2FsYXJtPgog\
ICAgICA8YmxvY2s+ZmFsc2U8L2Jsb2NrPgogICAgICA8bGVhcm4+ZmFsc2U8\
L2xlYXJuPgogICAgICA8cG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+ZW5hYmxl\
ZDwvcG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+CiAgICA8L3Zpb2xhdGlvbj4K\
ICAgIDx2aW9sYXRpb24gbmFtZT0iTW9kaWZpZWQgZG9tYWluIGNvb2tpZShz\
KSIgaWQ9Ik1PRF9ET01BSU5fQ09PS0lFIj4KICAgICAgPGFsYXJtPmZhbHNl\
PC9hbGFybT4KICAgICAgPGJsb2NrPmZhbHNlPC9ibG9jaz4KICAgICAgPGxl\
YXJuPmZhbHNlPC9sZWFybj4KICAgICAgPHBvbGljeV9idWlsZGVyX3RyYWNr\
aW5nPmVuYWJsZWQ8L3BvbGljeV9idWlsZGVyX3RyYWNraW5nPgogICAgPC92\
aW9sYXRpb24+CiAgICA8dmlvbGF0aW9uIG5hbWU9Ik1vZGlmaWVkIEFTTSBj\
b29raWUiIGlkPSJNT0RfQVNNX0NPT0tJRSI+CiAgICAgIDxhbGFybT5mYWxz\
ZTwvYWxhcm0+CiAgICAgIDxibG9jaz5mYWxzZTwvYmxvY2s+CiAgICAgIDxs\
ZWFybj5mYWxzZTwvbGVhcm4+CiAgICAgIDxwb2xpY3lfYnVpbGRlcl90cmFj\
a2luZz5lbmFibGVkPC9wb2xpY3lfYnVpbGRlcl90cmFja2luZz4KICAgIDwv\
dmlvbGF0aW9uPgogICAgPHZpb2xhdGlvbiBuYW1lPSJJbGxlZ2FsIHJlcXVl\
c3QgY29udGVudCB0eXBlIiBpZD0iSUxMRUdBTF9SRVFVRVNUX0NPTlRFTlRf\
VFlQRSI+CiAgICAgIDxhbGFybT5mYWxzZTwvYWxhcm0+CiAgICAgIDxibG9j\
az5mYWxzZTwvYmxvY2s+CiAgICAgIDxsZWFybj5mYWxzZTwvbGVhcm4+CiAg\
ICAgIDxwb2xpY3lfYnVpbGRlcl90cmFja2luZz5lbmFibGVkPC9wb2xpY3lf\
YnVpbGRlcl90cmFja2luZz4KICAgIDwvdmlvbGF0aW9uPgogICAgPHZpb2xh\
dGlvbiBuYW1lPSJNYWxmb3JtZWQgR1dUIGRhdGEiIGlkPSJNQUxGT1JNRURf\
R1dUIj4KICAgICAgPGFsYXJtPmZhbHNlPC9hbGFybT4KICAgICAgPGJsb2Nr\
PmZhbHNlPC9ibG9jaz4KICAgICAgPGxlYXJuPmZhbHNlPC9sZWFybj4KICAg\
ICAgPHBvbGljeV9idWlsZGVyX3RyYWNraW5nPmVuYWJsZWQ8L3BvbGljeV9i\
dWlsZGVyX3RyYWNraW5nPgogICAgPC92aW9sYXRpb24+CiAgICA8dmlvbGF0\
aW9uIG5hbWU9IkdXVCBkYXRhIGRvZXMgbm90IGNvbXBseSB3aXRoIGZvcm1h\
dCBzZXR0aW5ncyIgaWQ9IkdXVF9GT1JNQVRfU0VUVElORyI+CiAgICAgIDxh\
bGFybT5mYWxzZTwvYWxhcm0+CiAgICAgIDxibG9jaz5mYWxzZTwvYmxvY2s+\
CiAgICAgIDxsZWFybj5mYWxzZTwvbGVhcm4+CiAgICAgIDxwb2xpY3lfYnVp\
bGRlcl90cmFja2luZz5lbmFibGVkPC9wb2xpY3lfYnVpbGRlcl90cmFja2lu\
Zz4KICAgIDwvdmlvbGF0aW9uPgogICAgPHZpb2xhdGlvbiBuYW1lPSJCYWQg\
V2ViU29ja2V0IGhhbmRzaGFrZSByZXF1ZXN0IiBpZD0iV0VCU09DS0VUX0JB\
RF9SRVFVRVNUIj4KICAgICAgPGFsYXJtPmZhbHNlPC9hbGFybT4KICAgICAg\
PGJsb2NrPmZhbHNlPC9ibG9jaz4KICAgICAgPGxlYXJuPnRydWU8L2xlYXJu\
PgogICAgICA8cG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+ZW5hYmxlZDwvcG9s\
aWN5X2J1aWxkZXJfdHJhY2tpbmc+CiAgICA8L3Zpb2xhdGlvbj4KICAgIDx2\
aW9sYXRpb24gbmFtZT0iRmFpbHVyZSBpbiBXZWJTb2NrZXQgZnJhbWluZyBw\
cm90b2NvbCIgaWQ9IldFQlNPQ0tFVF9GUkFNSU5HX1BST1RPQ09MIj4KICAg\
ICAgPGFsYXJtPmZhbHNlPC9hbGFybT4KICAgICAgPGJsb2NrPmZhbHNlPC9i\
bG9jaz4KICAgICAgPGxlYXJuPnRydWU8L2xlYXJuPgogICAgICA8cG9saWN5\
X2J1aWxkZXJfdHJhY2tpbmc+ZW5hYmxlZDwvcG9saWN5X2J1aWxkZXJfdHJh\
Y2tpbmc+CiAgICA8L3Zpb2xhdGlvbj4KICAgIDx2aW9sYXRpb24gbmFtZT0i\
TWFzayBub3QgZm91bmQgaW4gY2xpZW50IGZyYW1lIiBpZD0iV0VCU09DS0VU\
X0ZSQU1FX01BU0tJTkciPgogICAgICA8YWxhcm0+ZmFsc2U8L2FsYXJtPgog\
ICAgICA8YmxvY2s+ZmFsc2U8L2Jsb2NrPgogICAgICA8bGVhcm4+dHJ1ZTwv\
bGVhcm4+CiAgICAgIDxwb2xpY3lfYnVpbGRlcl90cmFja2luZz5lbmFibGVk\
PC9wb2xpY3lfYnVpbGRlcl90cmFja2luZz4KICAgIDwvdmlvbGF0aW9uPgog\
ICAgPHZpb2xhdGlvbiBuYW1lPSJJbGxlZ2FsIGNyb3NzLW9yaWdpbiByZXF1\
ZXN0IiBpZD0iQ1JPU1NfT1JJR0lOX1JFUVVFU1QiPgogICAgICA8YWxhcm0+\
ZmFsc2U8L2FsYXJtPgogICAgICA8YmxvY2s+ZmFsc2U8L2Jsb2NrPgogICAg\
ICA8bGVhcm4+ZmFsc2U8L2xlYXJuPgogICAgICA8cG9saWN5X2J1aWxkZXJf\
dHJhY2tpbmc+ZW5hYmxlZDwvcG9saWN5X2J1aWxkZXJfdHJhY2tpbmc+CiAg\
ICA8L3Zpb2xhdGlvbj4KICAgIDx2aW9sYXRpb24gbmFtZT0iUGxhaW4gdGV4\
dCBkYXRhIGRvZXMgbm90IGNvbXBseSB3aXRoIGZvcm1hdCBzZXR0aW5ncyIg\
aWQ9IlBMQUlOVEVYVF9GT1JNQVRfU0VUVElORyI+CiAgICAgIDxhbGFybT5m\
YWxzZTwvYWxhcm0+CiAgICAgIDxibG9jaz5mYWxzZTwvYmxvY2s+CiAgICAg\
IDxsZWFybj5mYWxzZTwvbGVhcm4+CiAgICAgIDxwb2xpY3lfYnVpbGRlcl90\
cmFja2luZz5lbmFibGVkPC9wb2xpY3lfYnVpbGRlcl90cmFja2luZz4KICAg\
IDwvdmlvbGF0aW9uPgogICAgPGV2YXNpb25fc2V0dGluZyBwb2xpY3lfYnVp\
bGRlcl90cmFja2luZz0iZW5hYmxlZCIgbmFtZT0iRGlyZWN0b3J5IHRyYXZl\
cnNhbHMiPmRpc2FibGVkPC9ldmFzaW9uX3NldHRpbmc+CiAgICA8ZXZhc2lv\
bl9zZXR0aW5nIHBvbGljeV9idWlsZGVyX3RyYWNraW5nPSJlbmFibGVkIiBu\
YW1lPSJNdWx0aXBsZSBkZWNvZGluZyI+ZGlzYWJsZWQ8L2V2YXNpb25fc2V0\
dGluZz4KICAgIDxldmFzaW9uX3NldHRpbmcgcG9saWN5X2J1aWxkZXJfdHJh\
Y2tpbmc9ImVuYWJsZWQiIG5hbWU9IiV1IGRlY29kaW5nIj5kaXNhYmxlZDwv\
ZXZhc2lvbl9zZXR0aW5nPgogICAgPGV2YXNpb25fc2V0dGluZyBwb2xpY3lf\
YnVpbGRlcl90cmFja2luZz0iZW5hYmxlZCIgbmFtZT0iSUlTIGJhY2tzbGFz\
aGVzIj5kaXNhYmxlZDwvZXZhc2lvbl9zZXR0aW5nPgogICAgPGV2YXNpb25f\
c2V0dGluZyBwb2xpY3lfYnVpbGRlcl90cmFja2luZz0iZW5hYmxlZCIgbmFt\
ZT0iSUlTIFVuaWNvZGUgY29kZXBvaW50cyI+ZGlzYWJsZWQ8L2V2YXNpb25f\
c2V0dGluZz4KICAgIDxldmFzaW9uX3NldHRpbmcgcG9saWN5X2J1aWxkZXJf\
dHJhY2tpbmc9ImVuYWJsZWQiIG5hbWU9IkJhcmUgYnl0ZSBkZWNvZGluZyI+\
ZGlzYWJsZWQ8L2V2YXNpb25fc2V0dGluZz4KICAgIDxldmFzaW9uX3NldHRp\
bmcgcG9saWN5X2J1aWxkZXJfdHJhY2tpbmc9ImVuYWJsZWQiIG5hbWU9IkFw\
YWNoZSB3aGl0ZXNwYWNlIj5kaXNhYmxlZDwvZXZhc2lvbl9zZXR0aW5nPgog\
ICAgPGV2YXNpb25fc2V0dGluZyBwb2xpY3lfYnVpbGRlcl90cmFja2luZz0i\
ZW5hYmxlZCIgbmFtZT0iQmFkIHVuZXNjYXBlIj5kaXNhYmxlZDwvZXZhc2lv\
bl9zZXR0aW5nPgogICAgPGh0dHBfcHJvdG9jb2xfY29tcGxpYW5jZV9zZXR0\
aW5nIHBvbGljeV9idWlsZGVyX3RyYWNraW5nPSJlbmFibGVkIiBuYW1lPSJI\
ZWFkZXIgbmFtZSB3aXRoIG5vIGhlYWRlciB2YWx1ZSI+ZGlzYWJsZWQ8L2h0\
dHBfcHJvdG9jb2xfY29tcGxpYW5jZV9zZXR0aW5nPgogICAgPGh0dHBfcHJv\
dG9jb2xfY29tcGxpYW5jZV9zZXR0aW5nIHBvbGljeV9idWlsZGVyX3RyYWNr\
aW5nPSJlbmFibGVkIiBuYW1lPSJTZXZlcmFsIENvbnRlbnQtTGVuZ3RoIGhl\
YWRlcnMiPmRpc2FibGVkPC9odHRwX3Byb3RvY29sX2NvbXBsaWFuY2Vfc2V0\
dGluZz4KICAgIDxodHRwX3Byb3RvY29sX2NvbXBsaWFuY2Vfc2V0dGluZyBw\
b2xpY3lfYnVpbGRlcl90cmFja2luZz0iZW5hYmxlZCIgbmFtZT0iQ2h1bmtl\
ZCByZXF1ZXN0IHdpdGggQ29udGVudC1MZW5ndGggaGVhZGVyIj5kaXNhYmxl\
ZDwvaHR0cF9wcm90b2NvbF9jb21wbGlhbmNlX3NldHRpbmc+CiAgICA8aHR0\
cF9wcm90b2NvbF9jb21wbGlhbmNlX3NldHRpbmcgcG9saWN5X2J1aWxkZXJf\
dHJhY2tpbmc9ImVuYWJsZWQiIG5hbWU9IkJhZCBtdWx0aXBhcnQvZm9ybS1k\
YXRhIHJlcXVlc3QgcGFyc2luZyI+ZGlzYWJsZWQ8L2h0dHBfcHJvdG9jb2xf\
Y29tcGxpYW5jZV9zZXR0aW5nPgogICAgPGh0dHBfcHJvdG9jb2xfY29tcGxp\
YW5jZV9zZXR0aW5nIHBvbGljeV9idWlsZGVyX3RyYWNraW5nPSJlbmFibGVk\
IiBuYW1lPSJCYWQgbXVsdGlwYXJ0IHBhcmFtZXRlcnMgcGFyc2luZyI+ZGlz\
YWJsZWQ8L2h0dHBfcHJvdG9jb2xfY29tcGxpYW5jZV9zZXR0aW5nPgogICAg\
PGh0dHBfcHJvdG9jb2xfY29tcGxpYW5jZV9zZXR0aW5nIHBvbGljeV9idWls\
ZGVyX3RyYWNraW5nPSJlbmFibGVkIiBuYW1lPSJObyBIb3N0IGhlYWRlciBp\
biBIVFRQLzEuMSByZXF1ZXN0Ij5kaXNhYmxlZDwvaHR0cF9wcm90b2NvbF9j\
b21wbGlhbmNlX3NldHRpbmc+CiAgICA8aHR0cF9wcm90b2NvbF9jb21wbGlh\
bmNlX3NldHRpbmcgcG9saWN5X2J1aWxkZXJfdHJhY2tpbmc9ImVuYWJsZWQi\
IG5hbWU9IkNSTEYgY2hhcmFjdGVycyBiZWZvcmUgcmVxdWVzdCBzdGFydCI+\
ZGlzYWJsZWQ8L2h0dHBfcHJvdG9jb2xfY29tcGxpYW5jZV9zZXR0aW5nPgog\
ICAgPGh0dHBfcHJvdG9jb2xfY29tcGxpYW5jZV9zZXR0aW5nIHBvbGljeV9i\
dWlsZGVyX3RyYWNraW5nPSJlbmFibGVkIiBuYW1lPSJDb250ZW50IGxlbmd0\
aCBzaG91bGQgYmUgYSBwb3NpdGl2ZSBudW1iZXIiPmRpc2FibGVkPC9odHRw\
X3Byb3RvY29sX2NvbXBsaWFuY2Vfc2V0dGluZz4KICAgIDxodHRwX3Byb3Rv\
Y29sX2NvbXBsaWFuY2Vfc2V0dGluZyBwb2xpY3lfYnVpbGRlcl90cmFja2lu\
Zz0iZW5hYmxlZCIgbmFtZT0iQ2hlY2sgbWF4aW11bSBudW1iZXIgb2YgaGVh\
ZGVycyI+ZGlzYWJsZWQ8L2h0dHBfcHJvdG9jb2xfY29tcGxpYW5jZV9zZXR0\
aW5nPgogICAgPGh0dHBfcHJvdG9jb2xfY29tcGxpYW5jZV9zZXR0aW5nIHBv\
bGljeV9idWlsZGVyX3RyYWNraW5nPSJlbmFibGVkIiBuYW1lPSJCYWQgaG9z\
dCBoZWFkZXIgdmFsdWUiPmRpc2FibGVkPC9odHRwX3Byb3RvY29sX2NvbXBs\
aWFuY2Vfc2V0dGluZz4KICAgIDxodHRwX3Byb3RvY29sX2NvbXBsaWFuY2Vf\
c2V0dGluZyBwb2xpY3lfYnVpbGRlcl90cmFja2luZz0iZW5hYmxlZCIgbmFt\
ZT0iQ2hlY2sgbWF4aW11bSBudW1iZXIgb2YgcGFyYW1ldGVycyI+ZGlzYWJs\
ZWQ8L2h0dHBfcHJvdG9jb2xfY29tcGxpYW5jZV9zZXR0aW5nPgogICAgPGh0\
dHBfcHJvdG9jb2xfY29tcGxpYW5jZV9zZXR0aW5nIHBvbGljeV9idWlsZGVy\
X3RyYWNraW5nPSJlbmFibGVkIiBuYW1lPSJNdWx0aXBsZSBob3N0IGhlYWRl\
cnMiPmRpc2FibGVkPC9odHRwX3Byb3RvY29sX2NvbXBsaWFuY2Vfc2V0dGlu\
Zz4KICAgIDx3ZWJfc2VydmljZXNfc2VjdXJpdHlfc2V0dGluZ3MgcG9saWN5\
X2J1aWxkZXJfdHJhY2tpbmc9ImVuYWJsZWQiIG5hbWU9IlhNTF9XU1NfSU5U\
RVJOQUxfRVJST1IiPmRpc2FibGVkPC93ZWJfc2VydmljZXNfc2VjdXJpdHlf\
c2V0dGluZ3M+CiAgICA8d2ViX3NlcnZpY2VzX3NlY3VyaXR5X3NldHRpbmdz\
IHBvbGljeV9idWlsZGVyX3RyYWNraW5nPSJlbmFibGVkIiBuYW1lPSJYTUxf\
V1NTX01BTEZPUk1FRF9FUlJPUiI+ZGlzYWJsZWQ8L3dlYl9zZXJ2aWNlc19z\
ZWN1cml0eV9zZXR0aW5ncz4KICAgIDx3ZWJfc2VydmljZXNfc2VjdXJpdHlf\
c2V0dGluZ3MgcG9saWN5X2J1aWxkZXJfdHJhY2tpbmc9ImVuYWJsZWQiIG5h\
bWU9IlhNTF9XU1NfQ0VSVElGSUNBVEVfRVhQSVJFRCI+ZGlzYWJsZWQ8L3dl\
Yl9zZXJ2aWNlc19zZWN1cml0eV9zZXR0aW5ncz4KICAgIDx3ZWJfc2Vydmlj\
ZXNfc2VjdXJpdHlfc2V0dGluZ3MgcG9saWN5X2J1aWxkZXJfdHJhY2tpbmc9\
ImVuYWJsZWQiIG5hbWU9IlhNTF9XU1NfQ0VSVElGSUNBVEVfRVJST1IiPmRp\
c2FibGVkPC93ZWJfc2VydmljZXNfc2VjdXJpdHlfc2V0dGluZ3M+CiAgICA8\
d2ViX3NlcnZpY2VzX3NlY3VyaXR5X3NldHRpbmdzIHBvbGljeV9idWlsZGVy\
X3RyYWNraW5nPSJlbmFibGVkIiBuYW1lPSJYTUxfV1NTX0RFQ1JZUFRJT05f\
RVJST1IiPmRpc2FibGVkPC93ZWJfc2VydmljZXNfc2VjdXJpdHlfc2V0dGlu\
Z3M+CiAgICA8d2ViX3NlcnZpY2VzX3NlY3VyaXR5X3NldHRpbmdzIHBvbGlj\
eV9idWlsZGVyX3RyYWNraW5nPSJlbmFibGVkIiBuYW1lPSJYTUxfV1NTX0VO\
Q1JZUFRJT05fRVJST1IiPmRpc2FibGVkPC93ZWJfc2VydmljZXNfc2VjdXJp\
dHlfc2V0dGluZ3M+CiAgICA8d2ViX3NlcnZpY2VzX3NlY3VyaXR5X3NldHRp\
bmdzIHBvbGljeV9idWlsZGVyX3RyYWNraW5nPSJlbmFibGVkIiBuYW1lPSJY\
TUxfV1NTX1NJR05JTkdfRVJST1IiPmRpc2FibGVkPC93ZWJfc2VydmljZXNf\
c2VjdXJpdHlfc2V0dGluZ3M+CiAgICA8d2ViX3NlcnZpY2VzX3NlY3VyaXR5\
X3NldHRpbmdzIHBvbGljeV9idWlsZGVyX3RyYWNraW5nPSJlbmFibGVkIiBu\
YW1lPSJYTUxfV1NTX1ZFUklGSUNBVElPTl9FUlJPUiI+ZGlzYWJsZWQ8L3dl\
Yl9zZXJ2aWNlc19zZWN1cml0eV9zZXR0aW5ncz4KICAgIDx3ZWJfc2Vydmlj\
ZXNfc2VjdXJpdHlfc2V0dGluZ3MgcG9saWN5X2J1aWxkZXJfdHJhY2tpbmc9\
ImVuYWJsZWQiIG5hbWU9IlhNTF9XU1NfTUlTU0lOR19USU1FU1RBTVAiPmRp\
c2FibGVkPC93ZWJfc2VydmljZXNfc2VjdXJpdHlfc2V0dGluZ3M+CiAgICA8\
d2ViX3NlcnZpY2VzX3NlY3VyaXR5X3NldHRpbmdzIHBvbGljeV9idWlsZGVy\
X3RyYWNraW5nPSJlbmFibGVkIiBuYW1lPSJYTUxfV1NTX0lOVkFMSURfVElN\
RVNUQU1QIj5kaXNhYmxlZDwvd2ViX3NlcnZpY2VzX3NlY3VyaXR5X3NldHRp\
bmdzPgogICAgPHdlYl9zZXJ2aWNlc19zZWN1cml0eV9zZXR0aW5ncyBwb2xp\
Y3lfYnVpbGRlcl90cmFja2luZz0iZW5hYmxlZCIgbmFtZT0iWE1MX1dTU19F\
WFBJUkVEX1RJTUVTVEFNUCI+ZGlzYWJsZWQ8L3dlYl9zZXJ2aWNlc19zZWN1\
cml0eV9zZXR0aW5ncz4KICAgIDx3ZWJfc2VydmljZXNfc2VjdXJpdHlfc2V0\
dGluZ3MgcG9saWN5X2J1aWxkZXJfdHJhY2tpbmc9ImVuYWJsZWQiIG5hbWU9\
IlhNTF9XU1NfVElNRVNUQU1QX0VYUElSQVRJT05fVE9PX0ZBUl9JTl9USEVf\
RlVUVVJFIj5kaXNhYmxlZDwvd2ViX3NlcnZpY2VzX3NlY3VyaXR5X3NldHRp\
bmdzPgogICAgPHdlYl9zZXJ2aWNlc19zZWN1cml0eV9zZXR0aW5ncyBwb2xp\
Y3lfYnVpbGRlcl90cmFja2luZz0iZW5hYmxlZCIgbmFtZT0iWE1MX1dTU19V\
TlNJR05FRF9USU1FU1RBTVAiPmRpc2FibGVkPC93ZWJfc2VydmljZXNfc2Vj\
dXJpdHlfc2V0dGluZ3M+CiAgICA8bWF4aW11bV9kZWNvZGluZ19wYXNzZXM+\
MjwvbWF4aW11bV9kZWNvZGluZ19wYXNzZXM+CiAgICA8bWF4aW11bV9oZWFk\
ZXJzPjIwPC9tYXhpbXVtX2hlYWRlcnM+CiAgICA8bWF4aW11bV9wYXJhbWV0\
ZXJzPjUwMDwvbWF4aW11bV9wYXJhbWV0ZXJzPgogICAgPHJlc3BvbnNlX3Bh\
Z2UgY2F1c2U9ImRlZmF1bHQiPgogICAgICA8cmVzcG9uc2VfdHlwZT5kZWZh\
dWx0PC9yZXNwb25zZV90eXBlPgogICAgICA8cmVzcG9uc2VfaGVhZGVyPkhU\
VFAvMS4xIDIwMCBPSwpDYWNoZS1Db250cm9sOiBuby1jYWNoZQpQcmFnbWE6\
IG5vLWNhY2hlCkNvbm5lY3Rpb246IGNsb3NlPC9yZXNwb25zZV9oZWFkZXI+\
CiAgICAgIDxyZXNwb25zZV9odG1sX2NvZGU+Jmx0O2h0bWw+Jmx0O2hlYWQ+\
Jmx0O3RpdGxlPlJlcXVlc3QgUmVqZWN0ZWQmbHQ7L3RpdGxlPiZsdDsvaGVh\
ZD4mbHQ7Ym9keT5UaGUgcmVxdWVzdGVkIFVSTCB3YXMgcmVqZWN0ZWQuIFBs\
ZWFzZSBjb25zdWx0IHdpdGggeW91ciBhZG1pbmlzdHJhdG9yLiZsdDticj4m\
bHQ7YnI+WW91ciBzdXBwb3J0IElEIGlzOiAmbHQ7JVRTLnJlcXVlc3QuSUQo\
KSU+Jmx0O2JyPiZsdDticj4mbHQ7YSBocmVmPSdqYXZhc2NyaXB0Omhpc3Rv\
cnkuYmFjaygpOyc+W0dvIEJhY2tdJmx0Oy9hPiZsdDsvYm9keT4mbHQ7L2h0\
bWw+PC9yZXNwb25zZV9odG1sX2NvZGU+CiAgICA8L3Jlc3BvbnNlX3BhZ2U+\
CiAgICA8cmVzcG9uc2VfcGFnZSBjYXVzZT0iWE1MIj4KICAgICAgPHJlc3Bv\
bnNlX3R5cGU+c29hcCBmYXVsdDwvcmVzcG9uc2VfdHlwZT4KICAgICAgPHJl\
c3BvbnNlX2hlYWRlcj5IVFRQLzEuMSAyMDAgT0sKQ2FjaGUtQ29udHJvbDog\
bm8tY2FjaGUKUHJhZ21hOiBuby1jYWNoZQpDb250ZW50LXR5cGU6IHRleHQv\
eG1sCkNvbm5lY3Rpb246IGNsb3NlPC9yZXNwb25zZV9oZWFkZXI+CiAgICAg\
IDxyZXNwb25zZV9odG1sX2NvZGU+Jmx0Oz94bWwgdmVyc2lvbj0nMS4wJyBl\
bmNvZGluZz0ndXRmLTgnPz4mbHQ7c29hcDpFbnZlbG9wZSB4bWxuczpzb2Fw\
PSdodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy9zb2FwL2VudmVsb3BlLyc+\
Jmx0O3NvYXA6Qm9keT4mbHQ7c29hcDpGYXVsdD4mbHQ7ZmF1bHRjb2RlPnNv\
YXA6Q2xpZW50Jmx0Oy9mYXVsdGNvZGU+Jmx0O2ZhdWx0c3RyaW5nPlRoZSBy\
ZXF1ZXN0ZWQgb3BlcmF0aW9uIHdhcyByZWplY3RlZC4gUGxlYXNlIGNvbnN1\
bHQgd2l0aCB5b3VyIGFkbWluaXN0cmF0b3IuWW91ciBzdXBwb3J0IElEIGlz\
OiAmbHQ7JVRTLnJlcXVlc3QuSUQoKSU+Jmx0Oy9mYXVsdHN0cmluZz4mbHQ7\
ZGV0YWlsLz4mbHQ7L3NvYXA6RmF1bHQ+Jmx0Oy9zb2FwOkJvZHk+Jmx0Oy9z\
b2FwOkVudmVsb3BlPjwvcmVzcG9uc2VfaHRtbF9jb2RlPgogICAgPC9yZXNw\
b25zZV9wYWdlPgogICAgPHJlc3BvbnNlX3BhZ2UgY2F1c2U9IkFqYXgiPgog\
ICAgICA8cmVzcG9uc2VfdHlwZT5kZWZhdWx0PC9yZXNwb25zZV90eXBlPgog\
ICAgICA8cmVzcG9uc2VfaGVhZGVyPkhUVFAvMS4xIDIwMCBPSwpDYWNoZS1D\
b250cm9sOiBuby1jYWNoZQpQcmFnbWE6IG5vLWNhY2hlCkNvbm5lY3Rpb246\
IGNsb3NlPC9yZXNwb25zZV9oZWFkZXI+CiAgICAgIDxyZXNwb25zZV9odG1s\
X2NvZGU+Jmx0O2h0bWw+Jmx0O2hlYWQ+Jmx0O3RpdGxlPlJlcXVlc3QgUmVq\
ZWN0ZWQmbHQ7L3RpdGxlPiZsdDsvaGVhZD4mbHQ7Ym9keT5UaGUgcmVxdWVz\
dGVkIFVSTCB3YXMgcmVqZWN0ZWQuIFBsZWFzZSBjb25zdWx0IHdpdGggeW91\
ciBhZG1pbmlzdHJhdG9yLiZsdDticj4mbHQ7YnI+WW91ciBzdXBwb3J0IElE\
IGlzOiAmbHQ7JVRTLnJlcXVlc3QuSUQoKSU+Jmx0O2JyPiZsdDticj4mbHQ7\
YSBocmVmPSdqYXZhc2NyaXB0Omhpc3RvcnkuYmFjaygpOyc+W0dvIEJhY2td\
Jmx0Oy9hPiZsdDsvYm9keT4mbHQ7L2h0bWw+PC9yZXNwb25zZV9odG1sX2Nv\
ZGU+CiAgICAgIDxhamF4X2FjdGlvbl90eXBlPmFsZXJ0X3BvcHVwPC9hamF4\
X2FjdGlvbl90eXBlPgogICAgICA8YWpheF9wb3B1cF9tZXNzYWdlPlRoZSBy\
ZXF1ZXN0ZWQgVVJMIHdhcyByZWplY3RlZC4gUGxlYXNlIGNvbnN1bHQgd2l0\
aCB5b3VyIGFkbWluaXN0cmF0b3IuIFlvdXIgc3VwcG9ydCBJRCBpczogJmx0\
OyVUUy5yZXF1ZXN0LklEKCklPjwvYWpheF9wb3B1cF9tZXNzYWdlPgogICAg\
PC9yZXNwb25zZV9wYWdlPgogICAgPHJlc3BvbnNlX3BhZ2UgY2F1c2U9IkFq\
YXhfbG9naW4iPgogICAgICA8cmVzcG9uc2VfdHlwZT5kZWZhdWx0PC9yZXNw\
b25zZV90eXBlPgogICAgICA8cmVzcG9uc2VfaGVhZGVyPkhUVFAvMS4xIDIw\
MCBPSwpDYWNoZS1Db250cm9sOiBuby1jYWNoZQpQcmFnbWE6IG5vLWNhY2hl\
CkNvbm5lY3Rpb246IGNsb3NlPC9yZXNwb25zZV9oZWFkZXI+CiAgICAgIDxy\
ZXNwb25zZV9odG1sX2NvZGU+Jmx0O2h0bWw+Jmx0O2hlYWQ+Jmx0O3RpdGxl\
PlJlcXVlc3QgUmVqZWN0ZWQmbHQ7L3RpdGxlPiZsdDsvaGVhZD4mbHQ7Ym9k\
eT5UaGUgcmVxdWVzdGVkIFVSTCB3YXMgcmVqZWN0ZWQuIFBsZWFzZSBjb25z\
dWx0IHdpdGggeW91ciBhZG1pbmlzdHJhdG9yLiZsdDticj4mbHQ7YnI+WW91\
ciBzdXBwb3J0IElEIGlzOiAmbHQ7JVRTLnJlcXVlc3QuSUQoKSU+Jmx0O2Jy\
PiZsdDticj4mbHQ7YSBocmVmPSdqYXZhc2NyaXB0Omhpc3RvcnkuYmFjaygp\
Oyc+W0dvIEJhY2tdJmx0Oy9hPiZsdDsvYm9keT4mbHQ7L2h0bWw+PC9yZXNw\
b25zZV9odG1sX2NvZGU+CiAgICAgIDxhamF4X2FjdGlvbl90eXBlPmFsZXJ0\
X3BvcHVwPC9hamF4X2FjdGlvbl90eXBlPgogICAgICA8YWpheF9wb3B1cF9t\
ZXNzYWdlPlRoZSByZXF1ZXN0ZWQgVVJMIHdhcyByZWplY3RlZC4gUGxlYXNl\
IGNvbnN1bHQgd2l0aCB5b3VyIGFkbWluaXN0cmF0b3IuIFlvdXIgc3VwcG9y\
dCBJRCBpczogJmx0OyVUUy5yZXF1ZXN0LklEKCklPjwvYWpheF9wb3B1cF9t\
ZXNzYWdlPgogICAgPC9yZXNwb25zZV9wYWdlPgogICAgPHJlc3BvbnNlX3Bh\
Z2UgY2F1c2U9IkhpamFjayI+CiAgICAgIDxyZXNwb25zZV90eXBlPmVyYXNl\
IGNvb2tpZXM8L3Jlc3BvbnNlX3R5cGU+CiAgICAgIDxyZXNwb25zZV9oZWFk\
ZXI+SFRUUC8xLjEgMjAwIE9LCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlClBy\
YWdtYTogbm8tY2FjaGUKQ29ubmVjdGlvbjogY2xvc2U8L3Jlc3BvbnNlX2hl\
YWRlcj4KICAgICAgPHJlc3BvbnNlX2h0bWxfY29kZT4mbHQ7aHRtbD4mbHQ7\
aGVhZD4mbHQ7dGl0bGU+UmVxdWVzdCBSZWplY3RlZCZsdDsvdGl0bGU+Jmx0\
Oy9oZWFkPiZsdDtib2R5PlRoZSByZXF1ZXN0ZWQgVVJMIHdhcyByZWplY3Rl\
ZC4gUGxlYXNlIGNvbnN1bHQgd2l0aCB5b3VyIGFkbWluaXN0cmF0b3IuJmx0\
O2JyPiZsdDticj5Zb3VyIHN1cHBvcnQgSUQgaXM6ICZsdDslVFMucmVxdWVz\
dC5JRCgpJT4mbHQ7YnI+Jmx0O2JyPiZsdDthIGhyZWY9J2phdmFzY3JpcHQ6\
aGlzdG9yeS5iYWNrKCk7Jz5bR28gQmFja10mbHQ7L2E+Jmx0OyVUUy5zY3Jp\
cHQuZXJhc2VfY29va2llcyU+Jmx0Oy9ib2R5PiZsdDsvaHRtbD48L3Jlc3Bv\
bnNlX2h0bWxfY29kZT4KICAgIDwvcmVzcG9uc2VfcGFnZT4KICAgIDxyZXNw\
b25zZV9wYWdlX3NldHRpbmdzPgogICAgICA8ZmxnX2FqYXhfZW5hYmxlZD5k\
aXNhYmxlZDwvZmxnX2FqYXhfZW5hYmxlZD4KICAgIDwvcmVzcG9uc2VfcGFn\
ZV9zZXR0aW5ncz4KICA8L2Jsb2NraW5nPgogIDxzZXNzaW9uX2F3YXJlbmVz\
cz4KICAgIDxlbmFibGVkPmZhbHNlPC9lbmFibGVkPgogICAgPGxpZmV0aW1l\
X3dpbmRvdz45MDA8L2xpZmV0aW1lX3dpbmRvdz4KICAgIDx2aW9sYXRpb25f\
YWN0aW9uc19lbmFibGVkPnRydWU8L3Zpb2xhdGlvbl9hY3Rpb25zX2VuYWJs\
ZWQ+CiAgICA8c2Vzc2lvbj4KICAgICAgPHRyYWNrX2FsbF90aHJlc2hvbGQ+\
NTwvdHJhY2tfYWxsX3RocmVzaG9sZD4KICAgICAgPGJsb2NrX2lsbGVnYWxf\
dGhyZXNob2xkPjU8L2Jsb2NrX2lsbGVnYWxfdGhyZXNob2xkPgogICAgICA8\
YmxvY2tfYWxsX3RocmVzaG9sZD4yMDwvYmxvY2tfYWxsX3RocmVzaG9sZD4K\
ICAgICAgPHRyYWNrX2FsbF90aHJlc2hvbGRfZW5hYmxlZD5mYWxzZTwvdHJh\
Y2tfYWxsX3RocmVzaG9sZF9lbmFibGVkPgogICAgICA8YmxvY2tfaWxsZWdh\
bF90aHJlc2hvbGRfZW5hYmxlZD5mYWxzZTwvYmxvY2tfaWxsZWdhbF90aHJl\
c2hvbGRfZW5hYmxlZD4KICAgICAgPGJsb2NrX2FsbF90aHJlc2hvbGRfZW5h\
YmxlZD5mYWxzZTwvYmxvY2tfYWxsX3RocmVzaG9sZF9lbmFibGVkPgogICAg\
PC9zZXNzaW9uPgogICAgPGRldmljZT4KICAgICAgPHRyYWNrX2FsbF90aHJl\
c2hvbGQ+NzwvdHJhY2tfYWxsX3RocmVzaG9sZD4KICAgICAgPGJsb2NrX2ls\
bGVnYWxfdGhyZXNob2xkPjc8L2Jsb2NrX2lsbGVnYWxfdGhyZXNob2xkPgog\
ICAgICA8YmxvY2tfYWxsX3RocmVzaG9sZD4zMDwvYmxvY2tfYWxsX3RocmVz\
aG9sZD4KICAgICAgPHRyYWNrX2FsbF90aHJlc2hvbGRfZW5hYmxlZD5mYWxz\
ZTwvdHJhY2tfYWxsX3RocmVzaG9sZF9lbmFibGVkPgogICAgICA8YmxvY2tf\
aWxsZWdhbF90aHJlc2hvbGRfZW5hYmxlZD5mYWxzZTwvYmxvY2tfaWxsZWdh\
bF90aHJlc2hvbGRfZW5hYmxlZD4KICAgICAgPGJsb2NrX2FsbF90aHJlc2hv\
bGRfZW5hYmxlZD5mYWxzZTwvYmxvY2tfYWxsX3RocmVzaG9sZF9lbmFibGVk\
PgogICAgPC9kZXZpY2U+CiAgICA8aXBfYWRkcmVzcz4KICAgICAgPHRyYWNr\
X2FsbF90aHJlc2hvbGQ+MTU8L3RyYWNrX2FsbF90aHJlc2hvbGQ+CiAgICAg\
IDxibG9ja19pbGxlZ2FsX3RocmVzaG9sZD4xNTwvYmxvY2tfaWxsZWdhbF90\
aHJlc2hvbGQ+CiAgICAgIDxibG9ja19hbGxfdGhyZXNob2xkPjYwPC9ibG9j\
a19hbGxfdGhyZXNob2xkPgogICAgICA8dHJhY2tfYWxsX3RocmVzaG9sZF9l\
bmFibGVkPmZhbHNlPC90cmFja19hbGxfdGhyZXNob2xkX2VuYWJsZWQ+CiAg\
ICAgIDxibG9ja19pbGxlZ2FsX3RocmVzaG9sZF9lbmFibGVkPmZhbHNlPC9i\
bG9ja19pbGxlZ2FsX3RocmVzaG9sZF9lbmFibGVkPgogICAgICA8YmxvY2tf\
YWxsX3RocmVzaG9sZF9lbmFibGVkPmZhbHNlPC9ibG9ja19hbGxfdGhyZXNo\
b2xkX2VuYWJsZWQ+CiAgICA8L2lwX2FkZHJlc3M+CiAgICA8dXNlcj4KICAg\
ICAgPHRyYWNrX2FsbF90aHJlc2hvbGQ+NTwvdHJhY2tfYWxsX3RocmVzaG9s\
ZD4KICAgICAgPGJsb2NrX2lsbGVnYWxfdGhyZXNob2xkPjU8L2Jsb2NrX2ls\
bGVnYWxfdGhyZXNob2xkPgogICAgICA8YmxvY2tfYWxsX3RocmVzaG9sZD4y\
MDwvYmxvY2tfYWxsX3RocmVzaG9sZD4KICAgICAgPHRyYWNrX2FsbF90aHJl\
c2hvbGRfZW5hYmxlZD5mYWxzZTwvdHJhY2tfYWxsX3RocmVzaG9sZF9lbmFi\
bGVkPgogICAgICA8YmxvY2tfaWxsZWdhbF90aHJlc2hvbGRfZW5hYmxlZD5m\
YWxzZTwvYmxvY2tfaWxsZWdhbF90aHJlc2hvbGRfZW5hYmxlZD4KICAgICAg\
PGJsb2NrX2FsbF90aHJlc2hvbGRfZW5hYmxlZD5mYWxzZTwvYmxvY2tfYWxs\
X3RocmVzaG9sZF9lbmFibGVkPgogICAgPC91c2VyPgogICAgPHRyYWNrX2Fs\
bF9wZXJpb2Q+NjAwPC90cmFja19hbGxfcGVyaW9kPgogICAgPGJsb2NrX2ls\
bGVnYWxfcGVyaW9kPjYwMDwvYmxvY2tfaWxsZWdhbF9wZXJpb2Q+CiAgICA8\
YmxvY2tfYWxsX3BlcmlvZD42MDA8L2Jsb2NrX2FsbF9wZXJpb2Q+CiAgICA8\
YmxvY2tfYWxsX3BlcmlvZF9lbmFibGVkPnRydWU8L2Jsb2NrX2FsbF9wZXJp\
b2RfZW5hYmxlZD4KICAgIDxibG9ja19vbmx5X2F1dGhldGljYXRlZD5mYWxz\
ZTwvYmxvY2tfb25seV9hdXRoZXRpY2F0ZWQ+CiAgICA8c2Vzc2lvbl9oaWph\
Y2tpbmdfZW5hYmxlZD5mYWxzZTwvc2Vzc2lvbl9oaWphY2tpbmdfZW5hYmxl\
ZD4KICAgIDxhcHBsaWNhdGlvbl91c2VybmFtZV90eXBlPjQ8L2FwcGxpY2F0\
aW9uX3VzZXJuYW1lX3R5cGU+CiAgICA8ZGVsYXlfYmxvY2tpbmc+CiAgICAg\
IDx2aW9sYXRpb25zPgogICAgICAgIDx2aW9sYXRpb24gbmFtZT0iSWxsZWdh\
bCBhdHRhY2htZW50IGluIFNPQVAgbWVzc2FnZSIgaWQ9IklMTEVHQUxfU09B\
UF9BVFRBQ0hNRU5UIi8+CiAgICAgICAgPHZpb2xhdGlvbiBuYW1lPSJSZXF1\
ZXN0IGxlbmd0aCBleGNlZWRzIGRlZmluZWQgYnVmZmVyIHNpemUiIGlkPSJS\
RVFVRVNUX1RPT19MT05HIi8+CiAgICAgICAgPHZpb2xhdGlvbiBuYW1lPSJF\
dmFzaW9uIHRlY2huaXF1ZSBkZXRlY3RlZCIgaWQ9IkVWQVNJT05fREVURUNU\
RUQiLz4KICAgICAgICA8dmlvbGF0aW9uIG5hbWU9IldlYiBTZXJ2aWNlcyBT\
ZWN1cml0eSBmYWlsdXJlIiBpZD0iUEFSU0VSX0ZBSUxFRF9TT0FQX1NFQ1VS\
SVRZIi8+CiAgICAgICAgPHZpb2xhdGlvbiBuYW1lPSJYTUwgZGF0YSBkb2Vz\
IG5vdCBjb21wbHkgd2l0aCBmb3JtYXQgc2V0dGluZ3MiIGlkPSJYTUxfRk9S\
TUFUX1NFVFRJTkciLz4KICAgICAgICA8dmlvbGF0aW9uIG5hbWU9IlhNTCBk\
YXRhIGRvZXMgbm90IGNvbXBseSB3aXRoIHNjaGVtYSBvciBXU0RMIGRvY3Vt\
ZW50IiBpZD0iWE1MX1dTREwiLz4KICAgICAgICA8dmlvbGF0aW9uIG5hbWU9\
Ik1hbGZvcm1lZCBYTUwgZGF0YSIgaWQ9Ik1BTEZPUk1FRF9YTUwiLz4KICAg\
ICAgICA8dmlvbGF0aW9uIG5hbWU9IkZhaWxlZCB0byBjb252ZXJ0IGNoYXJh\
Y3RlciIgaWQ9IkNIQVJfQ09OViIvPgogICAgICAgIDx2aW9sYXRpb24gbmFt\
ZT0iSFRUUCBwcm90b2NvbCBjb21wbGlhbmNlIGZhaWxlZCIgaWQ9IkhUVFBf\
U0FOSVRZX0NIRUNLX0ZBSUxFRCIvPgogICAgICAgIDx2aW9sYXRpb24gbmFt\
ZT0iQWNjZXNzIGZyb20gZGlzYWxsb3dlZCBHZW9sb2NhdGlvbiIgaWQ9IklM\
TEVHQUxfR0VPTE9DQVRJT04iLz4KICAgICAgICA8dmlvbGF0aW9uIG5hbWU9\
IklsbGVnYWwgcXVlcnkgc3RyaW5nIGxlbmd0aCIgaWQ9IlFTX0xFTiIvPgog\
ICAgICAgIDx2aW9sYXRpb24gbmFtZT0iSWxsZWdhbCByZXF1ZXN0IGxlbmd0\
aCIgaWQ9IlJFUV9MRU4iLz4KICAgICAgICA8dmlvbGF0aW9uIG5hbWU9Ikls\
bGVnYWwgY29va2llIGxlbmd0aCIgaWQ9IkNPT0tJRV9MRU4iLz4KICAgICAg\
ICA8dmlvbGF0aW9uIG5hbWU9IklsbGVnYWwgVVJMIGxlbmd0aCIgaWQ9Ik9C\
Sl9MRU4iLz4KICAgICAgICA8dmlvbGF0aW9uIG5hbWU9IlNPQVAgbWV0aG9k\
IG5vdCBhbGxvd2VkIiBpZD0iU09BUF9NRVRIT0RfTk9UX0FMTE9XRUQiLz4K\
ICAgICAgICA8dmlvbGF0aW9uIG5hbWU9IklsbGVnYWwgbWV0YSBjaGFyYWN0\
ZXIgaW4gdmFsdWUiIGlkPSJNRVRBQ0hBUl9JTl9ERUZfUEFSQU0iLz4KICAg\
ICAgICA8dmlvbGF0aW9uIG5hbWU9IklsbGVnYWwgbWV0YSBjaGFyYWN0ZXIg\
aW4gcGFyYW1ldGVyIG5hbWUiIGlkPSJNRVRBQ0hBUl9JTl9QQVJBTV9OQU1F\
Ii8+CiAgICAgICAgPHZpb2xhdGlvbiBuYW1lPSJJbGxlZ2FsIG1ldGEgY2hh\
cmFjdGVyIGluIFVSTCIgaWQ9Ik1FVEFDSEFSX0lOX09CSiIvPgogICAgICAg\
IDx2aW9sYXRpb24gbmFtZT0iSWxsZWdhbCByZXBlYXRlZCBwYXJhbWV0ZXIg\
bmFtZSIgaWQ9IlJFUEVBVEVEX1BBUkFNRVRFUl9OQU1FIi8+CiAgICAgICAg\
PHZpb2xhdGlvbiBuYW1lPSJKU09OIGRhdGEgZG9lcyBub3QgY29tcGx5IHdp\
dGggZm9ybWF0IHNldHRpbmdzIiBpZD0iSlNPTl9GT1JNQVRfU0VUVElORyIv\
PgogICAgICAgIDx2aW9sYXRpb24gbmFtZT0iSWxsZWdhbCBoZWFkZXIgbGVu\
Z3RoIiBpZD0iSEVBREVSX0xFTiIvPgogICAgICAgIDx2aW9sYXRpb24gbmFt\
ZT0iTnVsbCBpbiBtdWx0aS1wYXJ0IHBhcmFtZXRlciB2YWx1ZSIgaWQ9Ik1V\
TFRJX1BBUlRfUEFSQU1fVkFMIi8+CiAgICAgICAgPHZpb2xhdGlvbiBuYW1l\
PSJJbGxlZ2FsIFBPU1QgZGF0YSBsZW5ndGgiIGlkPSJQT1NUX0RBVEFfTEVO\
Ii8+CiAgICAgICAgPHZpb2xhdGlvbiBuYW1lPSJJbGxlZ2FsIGVtcHR5IHBh\
cmFtZXRlciB2YWx1ZSIgaWQ9IkVNUFRZX1BBUkFNX1ZBTFVFIi8+CiAgICAg\
ICAgPHZpb2xhdGlvbiBuYW1lPSJJbGxlZ2FsIHBhcmFtZXRlciIgaWQ9IlBB\
UkFNIi8+CiAgICAgICAgPHZpb2xhdGlvbiBuYW1lPSJJbGxlZ2FsIHF1ZXJ5\
IHN0cmluZyBvciBQT1NUIGRhdGEiIGlkPSJRU19PUl9QT1NUX0RBVEEiLz4K\
ICAgICAgICA8dmlvbGF0aW9uIG5hbWU9IklsbGVnYWwgZmxvdyB0byBVUkwi\
IGlkPSJGTE9XX1RPX09CSiIvPgogICAgICAgIDx2aW9sYXRpb24gbmFtZT0i\
SWxsZWdhbCBVUkwiIGlkPSJPQkpfRE9FU05UX0VYSVNUIi8+CiAgICAgICAg\
PHZpb2xhdGlvbiBuYW1lPSJJbGxlZ2FsIGZpbGUgdHlwZSIgaWQ9Ik9CSl9U\
WVBFIi8+CiAgICAgICAgPHZpb2xhdGlvbiBuYW1lPSJQYXJhbWV0ZXIgdmFs\
dWUgZG9lcyBub3QgY29tcGx5IHdpdGggcmVndWxhciBleHByZXNzaW9uIiBp\
ZD0iUEFSQU1fVkFMVUVfTk9UX01BVENISU5HX1JFR0VYIi8+CiAgICAgICAg\
PHZpb2xhdGlvbiBuYW1lPSJJbGxlZ2FsIG51bWJlciBvZiBtYW5kYXRvcnkg\
cGFyYW1ldGVycyIgaWQ9Ik5VTV9PRl9NQU5EQVRPUllfUEFSQU1TIi8+CiAg\
ICAgICAgPHZpb2xhdGlvbiBuYW1lPSJBdHRhY2sgc2lnbmF0dXJlIGRldGVj\
dGVkIiBpZD0iQVRUQUNLX1NJR05BVFVSRV9ERVRFQ1RFRCIvPgogICAgICAg\
IDx2aW9sYXRpb24gbmFtZT0iSWxsZWdhbCBwYXJhbWV0ZXIgbnVtZXJpYyB2\
YWx1ZSIgaWQ9IlBBUkFNX05VTUVSSUNfVkFMVUUiLz4KICAgICAgICA8dmlv\
bGF0aW9uIG5hbWU9IklsbGVnYWwgcGFyYW1ldGVyIGRhdGEgdHlwZSIgaWQ9\
IlBBUkFNX0RBVEFfVFlQRSIvPgogICAgICAgIDx2aW9sYXRpb24gbmFtZT0i\
SWxsZWdhbCBwYXJhbWV0ZXIgdmFsdWUgbGVuZ3RoIiBpZD0iUEFSQU1fVkFM\
VUVfTEVOIi8+CiAgICAgICAgPHZpb2xhdGlvbiBuYW1lPSJJbGxlZ2FsIHN0\
YXRpYyBwYXJhbWV0ZXIgdmFsdWUiIGlkPSJTVEFUSUNfUEFSQU1fVkFMVUUi\
Lz4KICAgICAgICA8dmlvbGF0aW9uIG5hbWU9IkV4cGlyZWQgdGltZXN0YW1w\
IiBpZD0iRVhQSVJFRF9USU1FU1RBTVAiLz4KICAgICAgICA8dmlvbGF0aW9u\
IG5hbWU9IkFTTSBDb29raWUgSGlqYWNraW5nIiBpZD0iTVNHX0tFWSIvPgog\
ICAgICAgIDx2aW9sYXRpb24gbmFtZT0iSWxsZWdhbCBlbnRyeSBwb2ludCIg\
aWQ9IkVOVFJZX1BPSU5UIi8+CiAgICAgICAgPHZpb2xhdGlvbiBuYW1lPSJN\
YWxmb3JtZWQgSlNPTiBkYXRhIiBpZD0iTUFMRk9STUVEX0pTT04iLz4KICAg\
ICAgICA8dmlvbGF0aW9uIG5hbWU9IkNvb2tpZSBub3QgUkZDLWNvbXBsaWFu\
dCIgaWQ9Ik5PVF9SRkNfQ09PS0lFIi8+CiAgICAgICAgPHZpb2xhdGlvbiBu\
YW1lPSJJbGxlZ2FsIEhUVFAgc3RhdHVzIGluIHJlc3BvbnNlIiBpZD0iSFRU\
UF9TVEFUVVNfSU5fUkVTUE9OU0UiLz4KICAgICAgICA8dmlvbGF0aW9uIG5h\
bWU9IklsbGVnYWwgcmVxdWVzdCBjb250ZW50IHR5cGUiIGlkPSJJTExFR0FM\
X1JFUVVFU1RfQ09OVEVOVF9UWVBFIi8+CiAgICAgICAgPHZpb2xhdGlvbiBu\
YW1lPSJJbGxlZ2FsIG1ldGEgY2hhcmFjdGVyIGluIGhlYWRlciIgaWQ9Ik1F\
VEFDSEFSX0lOX0hFQURFUiIvPgogICAgICAgIDx2aW9sYXRpb24gbmFtZT0i\
TWFsZm9ybWVkIEdXVCBkYXRhIiBpZD0iTUFMRk9STUVEX0dXVCIvPgogICAg\
ICAgIDx2aW9sYXRpb24gbmFtZT0iRGlzYWxsb3dlZCBmaWxlIHVwbG9hZCBj\
b250ZW50IGRldGVjdGVkIiBpZD0iRElTQUxMT1dFRF9GSUxFX1VQTE9BRF9D\
T05URU5UIi8+CiAgICAgICAgPHZpb2xhdGlvbiBuYW1lPSJJbGxlZ2FsIEJh\
c2U2NCB2YWx1ZSIgaWQ9IkJBU0U2NF9QQVJBTV9WQUxVRSIvPgogICAgICAg\
IDx2aW9sYXRpb24gbmFtZT0iR1dUIGRhdGEgZG9lcyBub3QgY29tcGx5IHdp\
dGggZm9ybWF0IHNldHRpbmdzIiBpZD0iR1dUX0ZPUk1BVF9TRVRUSU5HIi8+\
CiAgICAgICAgPHZpb2xhdGlvbiBuYW1lPSJNYW5kYXRvcnkgSFRUUCBoZWFk\
ZXIgaXMgbWlzc2luZyIgaWQ9Ik1JU1NJTkdfTUFOREFUT1JZX0hFQURFUiIv\
PgogICAgICAgIDx2aW9sYXRpb24gbmFtZT0iSWxsZWdhbCByZWRpcmVjdGlv\
biBhdHRlbXB0IiBpZD0iUkVESVJFQ1QiLz4KICAgICAgPC92aW9sYXRpb25z\
PgogICAgPC9kZWxheV9ibG9ja2luZz4KICA8L3Nlc3Npb25fYXdhcmVuZXNz\
PgogIDxnd3RfcHJvZmlsZXM+CiAgICA8Y2hhcmFjdGVyX3NldC8+CiAgPC9n\
d3RfcHJvZmlsZXM+CiAgPGpzb25fcHJvZmlsZXM+CiAgICA8Y2hhcmFjdGVy\
X3NldC8+CiAgPC9qc29uX3Byb2ZpbGVzPgogIDx4bWxfcHJvZmlsZXM+CiAg\
ICA8Y2hhcmFjdGVyX3NldC8+CiAgPC94bWxfcHJvZmlsZXM+CiAgPHBsYWlu\
X3RleHRfcHJvZmlsZXM+CiAgICA8cGxhaW5fdGV4dF9wcm9maWxlIG5hbWU9\
ImRlZmF1bHRfcGxhaW5fdGV4dF9wcm9maWxlIj4KICAgICAgPGRlc2NyaXB0\
aW9uPjwvZGVzY3JpcHRpb24+CiAgICAgIDxjaGVja19lbGVtZW50X21ldGFj\
aGFycz50cnVlPC9jaGVja19lbGVtZW50X21ldGFjaGFycz4KICAgICAgPGNo\
ZWNrX2F0dHJpYnV0ZV9tZXRhY2hhcnM+ZmFsc2U8L2NoZWNrX2F0dHJpYnV0\
ZV9tZXRhY2hhcnM+CiAgICAgIDxjaGVja19zaWduYXR1cmVzPnRydWU8L2No\
ZWNrX3NpZ25hdHVyZXM+CiAgICAgIDxkZWZlbnNlX3NldHRpbmcgZW5hYmxl\
ZD0idHJ1ZSIgbmFtZT0iTWF4aW11bSBUb3RhbCBMZW5ndGgiPjEwMDAwPC9k\
ZWZlbnNlX3NldHRpbmc+CiAgICAgIDxkZWZlbnNlX3NldHRpbmcgZW5hYmxl\
ZD0idHJ1ZSIgbmFtZT0iTWF4aW11bSBMaW5lIExlbmd0aCI+MTAwPC9kZWZl\
bnNlX3NldHRpbmc+CiAgICAgIDxkZWZlbnNlX3NldHRpbmcgZW5hYmxlZD0i\
dHJ1ZSIgbmFtZT0iUGVyZm9ybSBQZXJjZW50IERlY29kaW5nIj4wPC9kZWZl\
bnNlX3NldHRpbmc+CiAgICA8L3BsYWluX3RleHRfcHJvZmlsZT4KICAgIDxj\
aGFyYWN0ZXJfc2V0Lz4KICA8L3BsYWluX3RleHRfcHJvZmlsZXM+CiAgPGZp\
bGVfdHlwZXM+CiAgICA8ZmlsZV90eXBlIHR5cGU9IndpbGRjYXJkIiBuYW1l\
PSIqIj4KICAgICAgPGxlYXJuaW5nX21vZGU+QWx3YXlzPC9sZWFybmluZ19t\
b2RlPgogICAgICA8dXJsX2xlbmd0aD4xMDA8L3VybF9sZW5ndGg+CiAgICAg\
IDxyZXF1ZXN0X2xlbmd0aD41MDAwPC9yZXF1ZXN0X2xlbmd0aD4KICAgICAg\
PHF1ZXJ5X3N0cmluZ19sZW5ndGg+MTAwMDwvcXVlcnlfc3RyaW5nX2xlbmd0\
aD4KICAgICAgPHBvc3RfZGF0YV9sZW5ndGg+MTAwMDwvcG9zdF9kYXRhX2xl\
bmd0aD4KICAgICAgPGNoZWNrX3Jlc3BvbnNlPmZhbHNlPC9jaGVja19yZXNw\
b25zZT4KICAgICAgPGluX3N0YWdpbmc+dHJ1ZTwvaW5fc3RhZ2luZz4KICAg\
ICAgPGxhc3RfdXBkYXRlZD4yMDE3LTA2LTI5VDA4OjA2OjM0WjwvbGFzdF91\
cGRhdGVkPgogICAgICA8Y2hlY2tfdXJsX2xlbmd0aD5mYWxzZTwvY2hlY2tf\
dXJsX2xlbmd0aD4KICAgICAgPGNoZWNrX3JlcXVlc3RfbGVuZ3RoPmZhbHNl\
PC9jaGVja19yZXF1ZXN0X2xlbmd0aD4KICAgICAgPGNoZWNrX3F1ZXJ5X3N0\
cmluZ19sZW5ndGg+ZmFsc2U8L2NoZWNrX3F1ZXJ5X3N0cmluZ19sZW5ndGg+\
CiAgICAgIDxjaGVja19wb3N0X2RhdGFfbGVuZ3RoPmZhbHNlPC9jaGVja19w\
b3N0X2RhdGFfbGVuZ3RoPgogICAgPC9maWxlX3R5cGU+CiAgPC9maWxlX3R5\
cGVzPgogIDx1cmxzPgogICAgPHVybCBwcm90b2NvbD0iSFRUUFMiIHR5cGU9\
IndpbGRjYXJkIiBuYW1lPSIqIj4KICAgICAgPGxlYXJuaW5nX21vZGU+TmV2\
ZXI8L2xlYXJuaW5nX21vZGU+CiAgICAgIDxjaGVja19mbG93cz5mYWxzZTwv\
Y2hlY2tfZmxvd3M+CiAgICAgIDxpc19lbnRyeV9wb2ludD5mYWxzZTwvaXNf\
ZW50cnlfcG9pbnQ+CiAgICAgIDxpc19yZWZlcnJlcj5mYWxzZTwvaXNfcmVm\
ZXJyZXI+CiAgICAgIDxjYW5fY2hhbmdlX2RvbWFpbl9jb29raWU+ZmFsc2U8\
L2Nhbl9jaGFuZ2VfZG9tYWluX2Nvb2tpZT4KICAgICAgPGRlc2NyaXB0aW9u\
PjwvZGVzY3JpcHRpb24+CiAgICAgIDx1c2VyX2NvbmZpZ19sZXZlbD5iYXNp\
YzwvdXNlcl9jb25maWdfbGV2ZWw+CiAgICAgIDxjaGVja19tZXRhY2hhcnM+\
dHJ1ZTwvY2hlY2tfbWV0YWNoYXJzPgogICAgICA8Y2hlY2tfbWV0aG9kcz5m\
YWxzZTwvY2hlY2tfbWV0aG9kcz4KICAgICAgPGluX3N0YWdpbmc+dHJ1ZTwv\
aW5fc3RhZ2luZz4KICAgICAgPGxhc3RfdXBkYXRlZD4yMDE3LTA2LTI5VDA4\
OjA2OjQxWjwvbGFzdF91cGRhdGVkPgogICAgICA8Y2xpY2tqYWNraW5nX3By\
b3RlY3Rpb24+CiAgICAgICAgPGVuYWJsZWQ+ZmFsc2U8L2VuYWJsZWQ+CiAg\
ICAgICAgPGFsbG93X3JlbmRlcmluZ19pbl9mcmFtZXM+TmV2ZXI8L2FsbG93\
X3JlbmRlcmluZ19pbl9mcmFtZXM+CiAgICAgIDwvY2xpY2tqYWNraW5nX3By\
b3RlY3Rpb24+CiAgICAgIDxjb3JzX2VuZm9yY2VtZW50X2VuYWJsZT5mYWxz\
ZTwvY29yc19lbmZvcmNlbWVudF9lbmFibGU+CiAgICAgIDxhbGxvd19jb3Jz\
PnRydWU8L2FsbG93X2NvcnM+CiAgICAgIDxjb3JzX2FsbG93X2NyZWRlbnRp\
YWxzX2hhbmRsaW5nPnVubW9kaWZpZWQ8L2NvcnNfYWxsb3dfY3JlZGVudGlh\
bHNfaGFuZGxpbmc+CiAgICAgIDxjb3JzX2FsbG93X2NyZWRlbnRpYWxzPmFs\
bG93PC9jb3JzX2FsbG93X2NyZWRlbnRpYWxzPgogICAgICA8Y29yc19jaGVj\
a19tYXhpbXVtX2FnZT5mYWxzZTwvY29yc19jaGVja19tYXhpbXVtX2FnZT4K\
ICAgICAgPGNvcnNfbWF4aW11bV9hZ2U+MTgwMDwvY29yc19tYXhpbXVtX2Fn\
ZT4KICAgICAgPGNvcnNfYWxsb3dlZF9vcmlnaW5zX2hhbmRsaW5nPnVubW9k\
aWZpZWQ8L2NvcnNfYWxsb3dlZF9vcmlnaW5zX2hhbmRsaW5nPgogICAgICA8\
Y29yc19hbGxvd2VkX21ldGhvZHNfaGFuZGxpbmc+dW5tb2RpZmllZDwvY29y\
c19hbGxvd2VkX21ldGhvZHNfaGFuZGxpbmc+CiAgICAgIDxjb3JzX2FsbG93\
ZWRfaGVhZGVyc19oYW5kbGluZz51bm1vZGlmaWVkPC9jb3JzX2FsbG93ZWRf\
aGVhZGVyc19oYW5kbGluZz4KICAgICAgPGNvcnNfZXhwb3NlZF9oZWFkZXJz\
X2hhbmRsaW5nPnVubW9kaWZpZWQ8L2NvcnNfZXhwb3NlZF9oZWFkZXJzX2hh\
bmRsaW5nPgogICAgICA8ZmxnX3dpbGRjYXJkX2luY2x1ZGVzX3NsYXNoPnRy\
dWU8L2ZsZ193aWxkY2FyZF9pbmNsdWRlc19zbGFzaD4KICAgICAgPGNvbnRl\
bnRfcHJvZmlsZT4KICAgICAgICA8aGVhZGVyX25hbWU+KjwvaGVhZGVyX25h\
bWU+CiAgICAgICAgPGhlYWRlcl92YWx1ZT4qPC9oZWFkZXJfdmFsdWU+CiAg\
ICAgICAgPGhlYWRlcl9vcmRlcj4wPC9oZWFkZXJfb3JkZXI+CiAgICAgICAg\
PGVuZm9yY2VtZW50X3R5cGU+aHR0cDwvZW5mb3JjZW1lbnRfdHlwZT4KICAg\
ICAgICA8aW5fY2xhc3NpZmljYXRpb24+ZmFsc2U8L2luX2NsYXNzaWZpY2F0\
aW9uPgogICAgICA8L2NvbnRlbnRfcHJvZmlsZT4KICAgIDwvdXJsPgogICAg\
PHVybCBwcm90b2NvbD0iSFRUUCIgdHlwZT0id2lsZGNhcmQiIG5hbWU9Iioi\
PgogICAgICA8bGVhcm5pbmdfbW9kZT5OZXZlcjwvbGVhcm5pbmdfbW9kZT4K\
ICAgICAgPGNoZWNrX2Zsb3dzPmZhbHNlPC9jaGVja19mbG93cz4KICAgICAg\
PGlzX2VudHJ5X3BvaW50PmZhbHNlPC9pc19lbnRyeV9wb2ludD4KICAgICAg\
PGlzX3JlZmVycmVyPmZhbHNlPC9pc19yZWZlcnJlcj4KICAgICAgPGNhbl9j\
aGFuZ2VfZG9tYWluX2Nvb2tpZT5mYWxzZTwvY2FuX2NoYW5nZV9kb21haW5f\
Y29va2llPgogICAgICA8ZGVzY3JpcHRpb24+PC9kZXNjcmlwdGlvbj4KICAg\
ICAgPHVzZXJfY29uZmlnX2xldmVsPmJhc2ljPC91c2VyX2NvbmZpZ19sZXZl\
bD4KICAgICAgPGNoZWNrX21ldGFjaGFycz50cnVlPC9jaGVja19tZXRhY2hh\
cnM+CiAgICAgIDxjaGVja19tZXRob2RzPmZhbHNlPC9jaGVja19tZXRob2Rz\
PgogICAgICA8aW5fc3RhZ2luZz50cnVlPC9pbl9zdGFnaW5nPgogICAgICA8\
bGFzdF91cGRhdGVkPjIwMTctMDYtMjlUMDg6MDY6NDFaPC9sYXN0X3VwZGF0\
ZWQ+CiAgICAgIDxjbGlja2phY2tpbmdfcHJvdGVjdGlvbj4KICAgICAgICA8\
ZW5hYmxlZD5mYWxzZTwvZW5hYmxlZD4KICAgICAgICA8YWxsb3dfcmVuZGVy\
aW5nX2luX2ZyYW1lcz5OZXZlcjwvYWxsb3dfcmVuZGVyaW5nX2luX2ZyYW1l\
cz4KICAgICAgPC9jbGlja2phY2tpbmdfcHJvdGVjdGlvbj4KICAgICAgPGNv\
cnNfZW5mb3JjZW1lbnRfZW5hYmxlPmZhbHNlPC9jb3JzX2VuZm9yY2VtZW50\
X2VuYWJsZT4KICAgICAgPGFsbG93X2NvcnM+dHJ1ZTwvYWxsb3dfY29ycz4K\
ICAgICAgPGNvcnNfYWxsb3dfY3JlZGVudGlhbHNfaGFuZGxpbmc+dW5tb2Rp\
ZmllZDwvY29yc19hbGxvd19jcmVkZW50aWFsc19oYW5kbGluZz4KICAgICAg\
PGNvcnNfYWxsb3dfY3JlZGVudGlhbHM+YWxsb3c8L2NvcnNfYWxsb3dfY3Jl\
ZGVudGlhbHM+CiAgICAgIDxjb3JzX2NoZWNrX21heGltdW1fYWdlPmZhbHNl\
PC9jb3JzX2NoZWNrX21heGltdW1fYWdlPgogICAgICA8Y29yc19tYXhpbXVt\
X2FnZT4xODAwPC9jb3JzX21heGltdW1fYWdlPgogICAgICA8Y29yc19hbGxv\
d2VkX29yaWdpbnNfaGFuZGxpbmc+dW5tb2RpZmllZDwvY29yc19hbGxvd2Vk\
X29yaWdpbnNfaGFuZGxpbmc+CiAgICAgIDxjb3JzX2FsbG93ZWRfbWV0aG9k\
c19oYW5kbGluZz51bm1vZGlmaWVkPC9jb3JzX2FsbG93ZWRfbWV0aG9kc19o\
YW5kbGluZz4KICAgICAgPGNvcnNfYWxsb3dlZF9oZWFkZXJzX2hhbmRsaW5n\
PnVubW9kaWZpZWQ8L2NvcnNfYWxsb3dlZF9oZWFkZXJzX2hhbmRsaW5nPgog\
ICAgICA8Y29yc19leHBvc2VkX2hlYWRlcnNfaGFuZGxpbmc+dW5tb2RpZmll\
ZDwvY29yc19leHBvc2VkX2hlYWRlcnNfaGFuZGxpbmc+CiAgICAgIDxmbGdf\
d2lsZGNhcmRfaW5jbHVkZXNfc2xhc2g+dHJ1ZTwvZmxnX3dpbGRjYXJkX2lu\
Y2x1ZGVzX3NsYXNoPgogICAgICA8Y29udGVudF9wcm9maWxlPgogICAgICAg\
IDxoZWFkZXJfbmFtZT4qPC9oZWFkZXJfbmFtZT4KICAgICAgICA8aGVhZGVy\
X3ZhbHVlPio8L2hlYWRlcl92YWx1ZT4KICAgICAgICA8aGVhZGVyX29yZGVy\
PjA8L2hlYWRlcl9vcmRlcj4KICAgICAgICA8ZW5mb3JjZW1lbnRfdHlwZT5o\
dHRwPC9lbmZvcmNlbWVudF90eXBlPgogICAgICAgIDxpbl9jbGFzc2lmaWNh\
dGlvbj5mYWxzZTwvaW5fY2xhc3NpZmljYXRpb24+CiAgICAgIDwvY29udGVu\
dF9wcm9maWxlPgogICAgPC91cmw+CiAgICA8Y2hhcmFjdGVyX3NldC8+CiAg\
PC91cmxzPgogIDx3ZWJzb2NrZXRfdXJscz4KICAgIDx3ZWJzb2NrZXRfdXJs\
IHByb3RvY29sPSJXU1MiIHR5cGU9IndpbGRjYXJkIiBuYW1lPSIqIj4KICAg\
ICAgPGxlYXJuaW5nX21vZGU+TmV2ZXI8L2xlYXJuaW5nX21vZGU+CiAgICAg\
IDxkZXNjcmlwdGlvbj48L2Rlc2NyaXB0aW9uPgogICAgICA8dXNlcl9jb25m\
aWdfbGV2ZWw+YmFzaWM8L3VzZXJfY29uZmlnX2xldmVsPgogICAgICA8Y2hl\
Y2tfbWV0YWNoYXJzPnRydWU8L2NoZWNrX21ldGFjaGFycz4KICAgICAgPGlu\
X3N0YWdpbmc+dHJ1ZTwvaW5fc3RhZ2luZz4KICAgICAgPGxhc3RfdXBkYXRl\
ZD4yMDE3LTA2LTI5VDA4OjA2OjM0WjwvbGFzdF91cGRhdGVkPgogICAgICA8\
Y29yc19lbmZvcmNlbWVudF9lbmFibGU+ZmFsc2U8L2NvcnNfZW5mb3JjZW1l\
bnRfZW5hYmxlPgogICAgICA8YWxsb3dfY29ycz50cnVlPC9hbGxvd19jb3Jz\
PgogICAgICA8Y29yc19hbGxvd2VkX29yaWdpbnNfaGFuZGxpbmc+dW5tb2Rp\
ZmllZDwvY29yc19hbGxvd2VkX29yaWdpbnNfaGFuZGxpbmc+CiAgICAgIDx3\
aWxkY2FyZF9pbmNsdWRlc19zbGFzaD50cnVlPC93aWxkY2FyZF9pbmNsdWRl\
c19zbGFzaD4KICAgICAgPHdlYnNvY2tldF9leHRlbnNpb24+cmVtb3ZlPC93\
ZWJzb2NrZXRfZXh0ZW5zaW9uPgogICAgICA8d2Vic29ja2V0X21lc3NhZ2Vf\
Zm9ybWF0X3RleHQ+dHJ1ZTwvd2Vic29ja2V0X21lc3NhZ2VfZm9ybWF0X3Rl\
eHQ+CiAgICAgIDx3ZWJzb2NrZXRfbWVzc2FnZV9mb3JtYXRfanNvbj5mYWxz\
ZTwvd2Vic29ja2V0X21lc3NhZ2VfZm9ybWF0X2pzb24+CiAgICAgIDx3ZWJz\
b2NrZXRfbWVzc2FnZV9mb3JtYXRfYmluYXJ5PmZhbHNlPC93ZWJzb2NrZXRf\
bWVzc2FnZV9mb3JtYXRfYmluYXJ5PgogICAgICA8bWVzc2FnZV9tYXhfYmlu\
YXJ5X3NpemU+MTAwMDA8L21lc3NhZ2VfbWF4X2JpbmFyeV9zaXplPgogICAg\
ICA8bWVzc2FnZV9tYXhfZnJhbWVfc2l6ZT4xMDAwMDwvbWVzc2FnZV9tYXhf\
ZnJhbWVfc2l6ZT4KICAgICAgPG1lc3NhZ2VfbWF4X2ZyYW1lcz4xMDA8L21l\
c3NhZ2VfbWF4X2ZyYW1lcz4KICAgICAgPHBsYWluX3RleHRfcHJvZmlsZV9u\
YW1lPmRlZmF1bHRfcGxhaW5fdGV4dF9wcm9maWxlPC9wbGFpbl90ZXh0X3By\
b2ZpbGVfbmFtZT4KICAgICAgPGNoZWNrX3BheWxvYWQ+dHJ1ZTwvY2hlY2tf\
cGF5bG9hZD4KICAgICAgPGNoZWNrX21lc3NhZ2VfbWF4X2JpbmFyeV9zaXpl\
PnRydWU8L2NoZWNrX21lc3NhZ2VfbWF4X2JpbmFyeV9zaXplPgogICAgICA8\
Y2hlY2tfbWVzc2FnZV9tYXhfZnJhbWVfc2l6ZT50cnVlPC9jaGVja19tZXNz\
YWdlX21heF9mcmFtZV9zaXplPgogICAgICA8Y2hlY2tfbWVzc2FnZV9tYXhf\
ZnJhbWVzPnRydWU8L2NoZWNrX21lc3NhZ2VfbWF4X2ZyYW1lcz4KICAgIDwv\
d2Vic29ja2V0X3VybD4KICAgIDx3ZWJzb2NrZXRfdXJsIHByb3RvY29sPSJX\
UyIgdHlwZT0id2lsZGNhcmQiIG5hbWU9IioiPgogICAgICA8bGVhcm5pbmdf\
bW9kZT5OZXZlcjwvbGVhcm5pbmdfbW9kZT4KICAgICAgPGRlc2NyaXB0aW9u\
PjwvZGVzY3JpcHRpb24+CiAgICAgIDx1c2VyX2NvbmZpZ19sZXZlbD5iYXNp\
YzwvdXNlcl9jb25maWdfbGV2ZWw+CiAgICAgIDxjaGVja19tZXRhY2hhcnM+\
dHJ1ZTwvY2hlY2tfbWV0YWNoYXJzPgogICAgICA8aW5fc3RhZ2luZz50cnVl\
PC9pbl9zdGFnaW5nPgogICAgICA8bGFzdF91cGRhdGVkPjIwMTctMDYtMjlU\
MDg6MDY6MzRaPC9sYXN0X3VwZGF0ZWQ+CiAgICAgIDxjb3JzX2VuZm9yY2Vt\
ZW50X2VuYWJsZT5mYWxzZTwvY29yc19lbmZvcmNlbWVudF9lbmFibGU+CiAg\
ICAgIDxhbGxvd19jb3JzPnRydWU8L2FsbG93X2NvcnM+CiAgICAgIDxjb3Jz\
X2FsbG93ZWRfb3JpZ2luc19oYW5kbGluZz51bm1vZGlmaWVkPC9jb3JzX2Fs\
bG93ZWRfb3JpZ2luc19oYW5kbGluZz4KICAgICAgPHdpbGRjYXJkX2luY2x1\
ZGVzX3NsYXNoPnRydWU8L3dpbGRjYXJkX2luY2x1ZGVzX3NsYXNoPgogICAg\
ICA8d2Vic29ja2V0X2V4dGVuc2lvbj5yZW1vdmU8L3dlYnNvY2tldF9leHRl\
bnNpb24+CiAgICAgIDx3ZWJzb2NrZXRfbWVzc2FnZV9mb3JtYXRfdGV4dD50\
cnVlPC93ZWJzb2NrZXRfbWVzc2FnZV9mb3JtYXRfdGV4dD4KICAgICAgPHdl\
YnNvY2tldF9tZXNzYWdlX2Zvcm1hdF9qc29uPmZhbHNlPC93ZWJzb2NrZXRf\
bWVzc2FnZV9mb3JtYXRfanNvbj4KICAgICAgPHdlYnNvY2tldF9tZXNzYWdl\
X2Zvcm1hdF9iaW5hcnk+ZmFsc2U8L3dlYnNvY2tldF9tZXNzYWdlX2Zvcm1h\
dF9iaW5hcnk+CiAgICAgIDxtZXNzYWdlX21heF9iaW5hcnlfc2l6ZT4xMDAw\
MDwvbWVzc2FnZV9tYXhfYmluYXJ5X3NpemU+CiAgICAgIDxtZXNzYWdlX21h\
eF9mcmFtZV9zaXplPjEwMDAwPC9tZXNzYWdlX21heF9mcmFtZV9zaXplPgog\
ICAgICA8bWVzc2FnZV9tYXhfZnJhbWVzPjEwMDwvbWVzc2FnZV9tYXhfZnJh\
bWVzPgogICAgICA8cGxhaW5fdGV4dF9wcm9maWxlX25hbWU+ZGVmYXVsdF9w\
bGFpbl90ZXh0X3Byb2ZpbGU8L3BsYWluX3RleHRfcHJvZmlsZV9uYW1lPgog\
ICAgICA8Y2hlY2tfcGF5bG9hZD50cnVlPC9jaGVja19wYXlsb2FkPgogICAg\
ICA8Y2hlY2tfbWVzc2FnZV9tYXhfYmluYXJ5X3NpemU+dHJ1ZTwvY2hlY2tf\
bWVzc2FnZV9tYXhfYmluYXJ5X3NpemU+CiAgICAgIDxjaGVja19tZXNzYWdl\
X21heF9mcmFtZV9zaXplPnRydWU8L2NoZWNrX21lc3NhZ2VfbWF4X2ZyYW1l\
X3NpemU+CiAgICAgIDxjaGVja19tZXNzYWdlX21heF9mcmFtZXM+dHJ1ZTwv\
Y2hlY2tfbWVzc2FnZV9tYXhfZnJhbWVzPgogICAgPC93ZWJzb2NrZXRfdXJs\
PgogIDwvd2Vic29ja2V0X3VybHM+CiAgPHBhcmFtZXRlcnM+CiAgICA8cGFy\
YW1ldGVyIHR5cGU9IndpbGRjYXJkIiBuYW1lPSIqIj4KICAgICAgPGxlYXJu\
aW5nX21vZGU+V2hlbiBWaW9sYXRpb24gRGV0ZWN0ZWQ8L2xlYXJuaW5nX21v\
ZGU+CiAgICAgIDxpc19tYW5kYXRvcnk+ZmFsc2U8L2lzX21hbmRhdG9yeT4K\
ICAgICAgPGFsbG93X2VtcHR5X3ZhbHVlPnRydWU8L2FsbG93X2VtcHR5X3Zh\
bHVlPgogICAgICA8dmFsdWVfdHlwZT51c2VyIGlucHV0PC92YWx1ZV90eXBl\
PgogICAgICA8dXNlcl9pbnB1dF9mb3JtYXQ+PC91c2VyX2lucHV0X2Zvcm1h\
dD4KICAgICAgPG1pbmltdW1fdmFsdWU+MDwvbWluaW11bV92YWx1ZT4KICAg\
ICAgPG1heGltdW1fdmFsdWU+MTA8L21heGltdW1fdmFsdWU+CiAgICAgIDxt\
YXhpbXVtX2xlbmd0aD4xMDwvbWF4aW11bV9sZW5ndGg+CiAgICAgIDxtYXRj\
aF9yZWd1bGFyX2V4cHJlc3Npb24+PC9tYXRjaF9yZWd1bGFyX2V4cHJlc3Np\
b24+CiAgICAgIDxpc19zZW5zaXRpdmU+ZmFsc2U8L2lzX3NlbnNpdGl2ZT4K\
ICAgICAgPGluX3N0YWdpbmc+dHJ1ZTwvaW5fc3RhZ2luZz4KICAgICAgPGxh\
c3RfdXBkYXRlZD4yMDE3LTA2LTI5VDA4OjA2OjM0WjwvbGFzdF91cGRhdGVk\
PgogICAgICA8cGFyYW1ldGVyX25hbWVfbWV0YWNoYXJzPgogICAgICAgIDxj\
aGVja19tZXRhY2hhcnM+dHJ1ZTwvY2hlY2tfbWV0YWNoYXJzPgogICAgICA8\
L3BhcmFtZXRlcl9uYW1lX21ldGFjaGFycz4KICAgICAgPGNoZWNrX21heGlt\
dW1fbGVuZ3RoPmZhbHNlPC9jaGVja19tYXhpbXVtX2xlbmd0aD4KICAgICAg\
PGNoZWNrX21ldGFjaGFycz50cnVlPC9jaGVja19tZXRhY2hhcnM+CiAgICAg\
IDxjaGVja19hdHRhY2tfc2lnbmF0dXJlcz50cnVlPC9jaGVja19hdHRhY2tf\
c2lnbmF0dXJlcz4KICAgICAgPGFsbG93X3JlcGVhdGVkX3BhcmFtZXRlcl9u\
YW1lPmZhbHNlPC9hbGxvd19yZXBlYXRlZF9wYXJhbWV0ZXJfbmFtZT4KICAg\
ICAgPGluX2NsYXNzaWZpY2F0aW9uPmZhbHNlPC9pbl9jbGFzc2lmaWNhdGlv\
bj4KICAgICAgPGRpc2FsbG93X2ZpbGVfdXBsb2FkX29mX2V4ZWN1dGFibGVz\
PnRydWU8L2Rpc2FsbG93X2ZpbGVfdXBsb2FkX29mX2V4ZWN1dGFibGVzPgog\
ICAgICA8aXNfYmFzZTY0PmZhbHNlPC9pc19iYXNlNjQ+CiAgICA8L3BhcmFt\
ZXRlcj4KICAgIDxjaGFyYWN0ZXJfc2V0Lz4KICAgIDxwYXJhbWV0ZXJfbmFt\
ZV9tZXRhY2hhcnM+CiAgICAgIDxjaGFyYWN0ZXJfc2V0Lz4KICAgIDwvcGFy\
YW1ldGVyX25hbWVfbWV0YWNoYXJzPgogIDwvcGFyYW1ldGVycz4KICA8c2Vu\
c2l0aXZlX3BhcmFtZXRlcnM+CiAgICA8cGFyYW1ldGVyX25hbWU+cGFzc3dv\
cmQ8L3BhcmFtZXRlcl9uYW1lPgogIDwvc2Vuc2l0aXZlX3BhcmFtZXRlcnM+\
CiAgPGZsb3dzPgogICAgPGZsb3dfYWNjZXNzPgogICAgICA8ZXhwaXJhdGlv\
bl9wZXJpb2Q+MDwvZXhwaXJhdGlvbl9wZXJpb2Q+CiAgICAgIDxyZXNwb25z\
ZV9wYWdlPgogICAgICAgIDxyZXNwb25zZV90eXBlPmRlZmF1bHQ8L3Jlc3Bv\
bnNlX3R5cGU+CiAgICAgICAgPHJlc3BvbnNlX2hlYWRlcj5IVFRQLzEuMSAy\
MDAgT0sKQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUKUHJhZ21hOiBuby1jYWNo\
ZQpDb25uZWN0aW9uOiBjbG9zZTwvcmVzcG9uc2VfaGVhZGVyPgogICAgICAg\
IDxyZXNwb25zZV9odG1sX2NvZGU+Jmx0O2h0bWw+Jmx0O2hlYWQ+Jmx0O3Rp\
dGxlPlJlcXVlc3QgUmVqZWN0ZWQmbHQ7L3RpdGxlPiZsdDsvaGVhZD4mbHQ7\
Ym9keT5UaGUgcmVxdWVzdGVkIFVSTCB3YXMgcmVqZWN0ZWQuIFBsZWFzZSBj\
b25zdWx0IHdpdGggeW91ciBhZG1pbmlzdHJhdG9yLiZsdDticj4mbHQ7YnI+\
WW91ciBzdXBwb3J0IElEIGlzOiAmbHQ7JVRTLnJlcXVlc3QuSUQoKSU+Jmx0\
O2JyPiZsdDticj4mbHQ7YSBocmVmPSdqYXZhc2NyaXB0Omhpc3RvcnkuYmFj\
aygpOyc+W0dvIEJhY2tdJmx0Oy9hPiZsdDsvYm9keT4mbHQ7L2h0bWw+PC9y\
ZXNwb25zZV9odG1sX2NvZGU+CiAgICAgIDwvcmVzcG9uc2VfcGFnZT4KICAg\
IDwvZmxvd19hY2Nlc3M+CiAgPC9mbG93cz4KICA8bWV0aG9kcz4KICAgIDxt\
ZXRob2QgbmFtZT0iR0VUIj4KICAgICAgPGFjdF9hcz5HRVQ8L2FjdF9hcz4K\
ICAgICAgPHVzZXJfY29uZmlnX2xldmVsPmJhc2ljPC91c2VyX2NvbmZpZ19s\
ZXZlbD4KICAgIDwvbWV0aG9kPgogICAgPG1ldGhvZCBuYW1lPSJQT1NUIj4K\
ICAgICAgPGFjdF9hcz5QT1NUPC9hY3RfYXM+CiAgICAgIDx1c2VyX2NvbmZp\
Z19sZXZlbD5iYXNpYzwvdXNlcl9jb25maWdfbGV2ZWw+CiAgICA8L21ldGhv\
ZD4KICAgIDxtZXRob2QgbmFtZT0iSEVBRCI+CiAgICAgIDxhY3RfYXM+R0VU\
PC9hY3RfYXM+CiAgICAgIDx1c2VyX2NvbmZpZ19sZXZlbD5iYXNpYzwvdXNl\
cl9jb25maWdfbGV2ZWw+CiAgICA8L21ldGhvZD4KICA8L21ldGhvZHM+CiAg\
PGhlYWRlcnM+CiAgICA8YWxsb3dlZF9tb2RpZmllZF9jb29raWUgdHlwZT0i\
d2lsZGNhcmQiIG5hbWU9IioiPgogICAgICA8bGVhcm5pbmdfbW9kZT5OZXZl\
cjwvbGVhcm5pbmdfbW9kZT4KICAgICAgPGluX3N0YWdpbmc+dHJ1ZTwvaW5f\
c3RhZ2luZz4KICAgICAgPGVuZm9yY2VtZW50X21vZGU+YWxsb3c8L2VuZm9y\
Y2VtZW50X21vZGU+CiAgICAgIDxodHRwX29ubHk+ZmFsc2U8L2h0dHBfb25s\
eT4KICAgICAgPHNlY3VyZT5mYWxzZTwvc2VjdXJlPgogICAgICA8Y2hlY2tf\
c2lnbmF0dXJlcz50cnVlPC9jaGVja19zaWduYXR1cmVzPgogICAgICA8aXNf\
YmFzZTY0PmZhbHNlPC9pc19iYXNlNjQ+CiAgICA8L2FsbG93ZWRfbW9kaWZp\
ZWRfY29va2llPgogICAgPGNoYXJhY3Rlcl9zZXQvPgogIDwvaGVhZGVycz4K\
ICA8YXR0YWNrX3NpZ25hdHVyZXM+CiAgICA8c2lnbmF0dXJlX3NldD4KICAg\
ICAgPHNldCB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1M\
U2NoZW1hLWluc3RhbmNlIiBuYW1lPSJHZW5lcmljIERldGVjdGlvbiBTaWdu\
YXR1cmVzIiBpZD0iMSIvPgogICAgICA8YWxhcm0+dHJ1ZTwvYWxhcm0+CiAg\
ICAgIDxibG9jaz50cnVlPC9ibG9jaz4KICAgICAgPGxlYXJuPnRydWU8L2xl\
YXJuPgogICAgPC9zaWduYXR1cmVfc2V0PgogICAgPHNpZ25hdHVyZV9zZXQ+\
CiAgICAgIDxzZXQgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAx\
L1hNTFNjaGVtYS1pbnN0YW5jZSIgbmFtZT0iU3lzdGVtczogUEhQLCBBcGFj\
aGUsIE15U1FMLi4uIiBpZD0iMzAwMDAwMDAwIj4KICAgICAgICA8ZmxnX2Fs\
YXJtX2RlZmF1bHQ+MTwvZmxnX2FsYXJtX2RlZmF1bHQ+CiAgICAgICAgPGZs\
Z19sZWFybl9kZWZhdWx0PjE8L2ZsZ19sZWFybl9kZWZhdWx0PgogICAgICAg\
IDxzZXRfZ3JvdXBfbmFtZT5Vc2VyLWRlZmluZWQ8L3NldF9ncm91cF9uYW1l\
PgogICAgICAgIDxmbGdfcmVqZWN0X2RlZmF1bHQ+MTwvZmxnX3JlamVjdF9k\
ZWZhdWx0PgogICAgICAgIDxmbGdfYXNzaWduX3RvX3BvbGljeV9kZWZhdWx0\
PjA8L2ZsZ19hc3NpZ25fdG9fcG9saWN5X2RlZmF1bHQ+CiAgICAgICAgPHNl\
dF9mbGdfaXNfaGlkZGVuPjA8L3NldF9mbGdfaXNfaGlkZGVuPgogICAgICAg\
IDxzZXRfbmFtZT5TeXN0ZW1zOiBQSFAsIEFwYWNoZSwgTXlTUUwuLi48L3Nl\
dF9uYW1lPgogICAgICAgIDxzZXRfZmxnX2lzX3VzZXJfZGVmaW5lZD4xPC9z\
ZXRfZmxnX2lzX3VzZXJfZGVmaW5lZD4KICAgICAgICA8ZmxnX2lzX21hbnVh\
bD4wPC9mbGdfaXNfbWFudWFsPgogICAgICAgIDxmaWx0ZXI+CiAgICAgICAg\
ICA8ZmxnX2lzX2hpZGRlbj4wPC9mbGdfaXNfaGlkZGVuPgogICAgICAgIDwv\
ZmlsdGVyPgogICAgICAgIDxzeXN0ZW1zPgogICAgICAgICAgPHN5c3RlbV9u\
YW1lPlVuaXgvTGludXg8L3N5c3RlbV9uYW1lPgogICAgICAgICAgPHN5c3Rl\
bV9uYW1lPk15U1FMPC9zeXN0ZW1fbmFtZT4KICAgICAgICAgIDxzeXN0ZW1f\
bmFtZT5BcGFjaGUvTkNTQSBIVFRQIFNlcnZlcjwvc3lzdGVtX25hbWU+CiAg\
ICAgICAgICA8c3lzdGVtX25hbWU+UEhQPC9zeXN0ZW1fbmFtZT4KICAgICAg\
ICA8L3N5c3RlbXM+CiAgICAgIDwvc2V0PgogICAgICA8YWxhcm0+dHJ1ZTwv\
YWxhcm0+CiAgICAgIDxibG9jaz50cnVlPC9ibG9jaz4KICAgICAgPGxlYXJu\
PnRydWU8L2xlYXJuPgogICAgPC9zaWduYXR1cmVfc2V0PgogICAgPGVuYWJs\
ZV9zdGFnaW5nPnRydWU8L2VuYWJsZV9zdGFnaW5nPgogICAgPHN0YWdpbmdf\
cGVyaW9kX2luX2RheXM+Nzwvc3RhZ2luZ19wZXJpb2RfaW5fZGF5cz4KICAg\
IDxwbGFjZV9zaWduYXR1cmVzX2luX3N0YWdpbmc+ZmFsc2U8L3BsYWNlX3Np\
Z25hdHVyZXNfaW5fc3RhZ2luZz4KICA8L2F0dGFja19zaWduYXR1cmVzPgog\
IDxkYXRhX2d1YXJkPgogICAgPGVuYWJsZWQ+ZmFsc2U8L2VuYWJsZWQ+CiAg\
ICA8Y3JlZGl0X2NhcmRfbnVtYmVycz5mYWxzZTwvY3JlZGl0X2NhcmRfbnVt\
YmVycz4KICAgIDxzb2NpYWxfc2VjdXJpdHlfbnVtYmVycz5mYWxzZTwvc29j\
aWFsX3NlY3VyaXR5X251bWJlcnM+CiAgICA8ZmlsZV9jb250ZW50PmZhbHNl\
PC9maWxlX2NvbnRlbnQ+CiAgICA8bWFza19kYXRhPmZhbHNlPC9tYXNrX2Rh\
dGE+CiAgICA8Y2hlY2tfY3VzdG9tX3BhdHRlcm5zPmZhbHNlPC9jaGVja19j\
dXN0b21fcGF0dGVybnM+CiAgICA8Y2hlY2tfZXhjZXB0aW9uX3BhdHRlcm5z\
PmZhbHNlPC9jaGVja19leGNlcHRpb25fcGF0dGVybnM+CiAgICA8ZW5mb3Jj\
ZW1lbnRfbW9kZT5lbmZvcmNlX2FsbF9leGNlcHRfdXJsX2xpc3Q8L2VuZm9y\
Y2VtZW50X21vZGU+CiAgPC9kYXRhX2d1YXJkPgogIDxwb2xpY3lfYnVpbGRl\
cj4KICAgIDxsZWFybmluZ19tb2RlPkF1dG9tYXRpYzwvbGVhcm5pbmdfbW9k\
ZT4KICAgIDxsZWFybl9maWxlX3R5cGVzPkFsd2F5czwvbGVhcm5fZmlsZV90\
eXBlcz4KICAgIDxsZWFybl91cmxzPk5ldmVyPC9sZWFybl91cmxzPgogICAg\
PGxlYXJuX3dlYnNvY2tldF91cmxzPk5ldmVyPC9sZWFybl93ZWJzb2NrZXRf\
dXJscz4KICAgIDxsZWFybl9wYXJhbWV0ZXJzPldoZW4gVmlvbGF0aW9uIERl\
dGVjdGVkPC9sZWFybl9wYXJhbWV0ZXJzPgogICAgPGxlYXJuX2Nvb2tpZXM+\
TmV2ZXI8L2xlYXJuX2Nvb2tpZXM+CiAgICA8bGVhcm5fcmVkaXJlY3Rpb25f\
ZG9tYWlucz5BbHdheXM8L2xlYXJuX3JlZGlyZWN0aW9uX2RvbWFpbnM+CiAg\
ICA8bWF4aW11bV9yZWRpcmVjdGlvbl9kb21haW5zPjEwMDwvbWF4aW11bV9y\
ZWRpcmVjdGlvbl9kb21haW5zPgogICAgPHBhcmFtZXRlcnNfaW50ZWdlcl92\
YWx1ZT5mYWxzZTwvcGFyYW1ldGVyc19pbnRlZ2VyX3ZhbHVlPgogICAgPGNs\
aWVudF9zaWRlX3BvbGljeV9idWlsZGluZz5mYWxzZTwvY2xpZW50X3NpZGVf\
cG9saWN5X2J1aWxkaW5nPgogICAgPG1heGltdW1fZmlsZV90eXBlcz4yNTA8\
L21heGltdW1fZmlsZV90eXBlcz4KICAgIDxtYXhpbXVtX3VybHM+MTAwMDA8\
L21heGltdW1fdXJscz4KICAgIDxtYXhpbXVtX3dlYnNvY2tldF91cmxzPjEw\
MDAwPC9tYXhpbXVtX3dlYnNvY2tldF91cmxzPgogICAgPG1heGltdW1fcGFy\
YW1ldGVycz4xMDAwMDwvbWF4aW11bV9wYXJhbWV0ZXJzPgogICAgPG1heGlt\
dW1fYWxsb3dlZF9tb2RpZmllZF9jb29raWVzPjEwMDwvbWF4aW11bV9hbGxv\
d2VkX21vZGlmaWVkX2Nvb2tpZXM+CiAgICA8dHJhY2tfc2l0ZV9jaGFuZ2Vz\
PgogICAgICA8dW50cnVzdGVkPgogICAgICAgIDxlbmFibGVkPnRydWU8L2Vu\
YWJsZWQ+CiAgICAgICAgPGRpc3RpbmN0X3NvdXJjZXM+MTA8L2Rpc3RpbmN0\
X3NvdXJjZXM+CiAgICAgICAgPG1pbmltdW1faW50ZXJ2YWw+MzAwPC9taW5p\
bXVtX2ludGVydmFsPgogICAgICAgIDxtYXhpbXVtX2ludGVydmFsPjYwNDgw\
MDwvbWF4aW11bV9pbnRlcnZhbD4KICAgICAgPC91bnRydXN0ZWQ+CiAgICAg\
IDx0cnVzdGVkPgogICAgICAgIDxlbmFibGVkPnRydWU8L2VuYWJsZWQ+CiAg\
ICAgICAgPGRpc3RpbmN0X3NvdXJjZXM+MTwvZGlzdGluY3Rfc291cmNlcz4K\
ICAgICAgICA8bWluaW11bV9pbnRlcnZhbD4wPC9taW5pbXVtX2ludGVydmFs\
PgogICAgICAgIDxtYXhpbXVtX2ludGVydmFsPjYwNDgwMDwvbWF4aW11bV9p\
bnRlcnZhbD4KICAgICAgPC90cnVzdGVkPgogICAgPC90cmFja19zaXRlX2No\
YW5nZXM+CiAgICA8bG9vc2VuX3J1bGU+CiAgICAgIDx1bnRydXN0ZWQ+CiAg\
ICAgICAgPGRpc3RpbmN0X3NvdXJjZXM+MjA8L2Rpc3RpbmN0X3NvdXJjZXM+\
CiAgICAgICAgPG1pbmltdW1faW50ZXJ2YWw+MzYwMDwvbWluaW11bV9pbnRl\
cnZhbD4KICAgICAgICA8bWF4aW11bV9pbnRlcnZhbD42MDQ4MDA8L21heGlt\
dW1faW50ZXJ2YWw+CiAgICAgIDwvdW50cnVzdGVkPgogICAgICA8dHJ1c3Rl\
ZD4KICAgICAgICA8ZGlzdGluY3Rfc291cmNlcz4xPC9kaXN0aW5jdF9zb3Vy\
Y2VzPgogICAgICAgIDxtaW5pbXVtX2ludGVydmFsPjA8L21pbmltdW1faW50\
ZXJ2YWw+CiAgICAgICAgPG1heGltdW1faW50ZXJ2YWw+NjA0ODAwPC9tYXhp\
bXVtX2ludGVydmFsPgogICAgICA8L3RydXN0ZWQ+CiAgICA8L2xvb3Nlbl9y\
dWxlPgogICAgPHRpZ2h0ZW5fcnVsZT4KICAgICAgPHRvdGFsX3JlcXVlc3Rz\
PjE1MDAwPC90b3RhbF9yZXF1ZXN0cz4KICAgICAgPG1pbmltdW1faW50ZXJ2\
YWw+ODY0MDA8L21pbmltdW1faW50ZXJ2YWw+CiAgICAgIDxtYXhfbW9kaWZp\
Y2F0aW9uX3N1Z2dlc3Rpb25fc2NvcmU+NTA8L21heF9tb2RpZmljYXRpb25f\
c3VnZ2VzdGlvbl9zY29yZT4KICAgIDwvdGlnaHRlbl9ydWxlPgogICAgPGR5\
bmFtaWNfcGFyYW1ldGVycz4KICAgICAgPHVuaXF1ZV92YWx1ZV9zZXRzPjEw\
PC91bmlxdWVfdmFsdWVfc2V0cz4KICAgICAgPGhpZGRlbl9maWVsZHM+ZmFs\
c2U8L2hpZGRlbl9maWVsZHM+CiAgICAgIDx1c2Vfc3RhdGlzdGljc19mb3Jt\
cz5mYWxzZTwvdXNlX3N0YXRpc3RpY3NfZm9ybXM+CiAgICAgIDx1c2Vfc3Rh\
dGlzdGljc19saW5rcz5mYWxzZTwvdXNlX3N0YXRpc3RpY3NfbGlua3M+CiAg\
ICA8L2R5bmFtaWNfcGFyYW1ldGVycz4KICAgIDxwYXJhbWV0ZXJfbGV2ZWw+\
Z2xvYmFsPC9wYXJhbWV0ZXJfbGV2ZWw+CiAgICA8YWxsX3RydXN0ZWRfaXBz\
Pmxpc3Q8L2FsbF90cnVzdGVkX2lwcz4KICAgIDx2YWxpZF9ob3N0X25hbWVz\
PnRydWU8L3ZhbGlkX2hvc3RfbmFtZXM+CiAgICA8bGVhcm5fZnJvbV9yZXNw\
b25zZXM+dHJ1ZTwvbGVhcm5fZnJvbV9yZXNwb25zZXM+CiAgICA8Y29sbGFw\
c2VfdXJscz5mYWxzZTwvY29sbGFwc2VfdXJscz4KICAgIDxjb2xsYXBzZV91\
cmxzX29jY3VycmVuY2VzPjUwMDwvY29sbGFwc2VfdXJsc19vY2N1cnJlbmNl\
cz4KICAgIDxjb2xsYXBzZV91cmxzX2RlcHRoPjI8L2NvbGxhcHNlX3VybHNf\
ZGVwdGg+CiAgICA8ZmxnX2xlYXJuX2xvZ2luX3BhZ2VzPmZhbHNlPC9mbGdf\
bGVhcm5fbG9naW5fcGFnZXM+CiAgICA8Y29sbGFwc2VfY29va2llcz5mYWxz\
ZTwvY29sbGFwc2VfY29va2llcz4KICAgIDxjb2xsYXBzZV9jb29raWVzX29j\
Y3VycmVuY2VzPjEwPC9jb2xsYXBzZV9jb29raWVzX29jY3VycmVuY2VzPgog\
ICAgPGNvbGxhcHNlX3BhcmFtZXRlcnM+ZmFsc2U8L2NvbGxhcHNlX3BhcmFt\
ZXRlcnM+CiAgICA8Y29sbGFwc2VfcGFyYW1ldGVyc19vY2N1cnJlbmNlcz4x\
MDwvY29sbGFwc2VfcGFyYW1ldGVyc19vY2N1cnJlbmNlcz4KICAgIDxjb2xs\
YXBzZV9wcm9maWxlcz50cnVlPC9jb2xsYXBzZV9wcm9maWxlcz4KICAgIDxj\
b2xsYXBzZV9wcm9maWxlc19vY2N1cnJlbmNlcz4xMDwvY29sbGFwc2VfcHJv\
ZmlsZXNfb2NjdXJyZW5jZXM+CiAgICA8ZmxnX2VuZm9yY2VfdW5tb2RpZmll\
ZF9jb29raWVzPmZhbHNlPC9mbGdfZW5mb3JjZV91bm1vZGlmaWVkX2Nvb2tp\
ZXM+CiAgICA8Y2xhc3NpZnlfdXJscz5mYWxzZTwvY2xhc3NpZnlfdXJscz4K\
ICAgIDxjbGFzc2lmeV9wYXJhbWV0ZXJzPmZhbHNlPC9jbGFzc2lmeV9wYXJh\
bWV0ZXJzPgogICAgPGNsYXNzaWZ5X3dlYnNvY2tldF91cmxzPmZhbHNlPC9j\
bGFzc2lmeV93ZWJzb2NrZXRfdXJscz4KICAgIDxzZXRfbWV0aG9kX292ZXJy\
aWRlX29uX3VybD5mYWxzZTwvc2V0X21ldGhvZF9vdmVycmlkZV9vbl91cmw+\
CiAgICA8ZW5hYmxlX2Z1bGxfcG9saWN5X2luc3BlY3Rpb24+dHJ1ZTwvZW5h\
YmxlX2Z1bGxfcG9saWN5X2luc3BlY3Rpb24+CiAgICA8cmVzcG9uc2VfY29k\
ZT4xeHg8L3Jlc3BvbnNlX2NvZGU+CiAgICA8cmVzcG9uc2VfY29kZT4yeHg8\
L3Jlc3BvbnNlX2NvZGU+CiAgICA8cmVzcG9uc2VfY29kZT4zeHg8L3Jlc3Bv\
bnNlX2NvZGU+CiAgICA8ZmlsZXR5cGU+Ym1wPC9maWxldHlwZT4KICAgIDxm\
aWxldHlwZT5naWY8L2ZpbGV0eXBlPgogICAgPGZpbGV0eXBlPmljbzwvZmls\
ZXR5cGU+CiAgICA8ZmlsZXR5cGU+anBlZzwvZmlsZXR5cGU+CiAgICA8Zmls\
ZXR5cGU+anBnPC9maWxldHlwZT4KICAgIDxmaWxldHlwZT5wY3g8L2ZpbGV0\
eXBlPgogICAgPGZpbGV0eXBlPnBkZjwvZmlsZXR5cGU+CiAgICA8ZmlsZXR5\
cGU+cG5nPC9maWxldHlwZT4KICAgIDxmaWxldHlwZT5zd2Y8L2ZpbGV0eXBl\
PgogICAgPGZpbGV0eXBlPndhdjwvZmlsZXR5cGU+CiAgPC9wb2xpY3lfYnVp\
bGRlcj4KICA8Z2VvbG9jYXRpb24+CiAgICA8ZW5mb3JjZW1lbnRfbW9kZT4K\
ICAgICAgPG1vZGU+ZGlzYWxsb3c8L21vZGU+CiAgICA8L2VuZm9yY2VtZW50\
X21vZGU+CiAgPC9nZW9sb2NhdGlvbj4KICA8aXBfcmVwdXRhdGlvbj4KICAg\
IDxlbmFibGVkPmZhbHNlPC9lbmFibGVkPgogIDwvaXBfcmVwdXRhdGlvbj4K\
ICA8ZGF0YWJhc2VfcHJvdGVjdGlvbj4KICAgIDxlbmFibGVkPmZhbHNlPC9l\
bmFibGVkPgogICAgPHVzZXJfc291cmNlPkFQTSBVc2VybmFtZXMgYW5kIFNl\
c3Npb24gSUQ8L3VzZXJfc291cmNlPgogIDwvZGF0YWJhc2VfcHJvdGVjdGlv\
bj4KICA8aGVhZGVyIHR5cGU9IndpbGRjYXJkIiBuYW1lPSIqIj4KICAgIDxp\
c19tYW5kYXRvcnk+ZmFsc2U8L2lzX21hbmRhdG9yeT4KICAgIDxjaGVja19z\
aWduYXR1cmVzPnRydWU8L2NoZWNrX3NpZ25hdHVyZXM+CiAgICA8aXNfYmFz\
ZTY0PmZhbHNlPC9pc19iYXNlNjQ+CiAgICA8cGVyY2VudF9ub3JtYWxpemF0\
aW9uPmZhbHNlPC9wZXJjZW50X25vcm1hbGl6YXRpb24+CiAgICA8dXJpX25v\
cm1hbGl6YXRpb24+ZmFsc2U8L3VyaV9ub3JtYWxpemF0aW9uPgogICAgPGh0\
bWxfbm9ybWFsaXphdGlvbj5mYWxzZTwvaHRtbF9ub3JtYWxpemF0aW9uPgog\
ICAgPGVuYWJsZV9ub3JtYWxpemF0aW9uX3Zpb2xhdGlvbj5mYWxzZTwvZW5h\
YmxlX25vcm1hbGl6YXRpb25fdmlvbGF0aW9uPgogICAgPGlzX2RlZmF1bHQ+\
dHJ1ZTwvaXNfZGVmYXVsdD4KICA8L2hlYWRlcj4KICA8aGVhZGVyIHR5cGU9\
ImV4cGxpY2l0IiBuYW1lPSJhdXRob3JpemF0aW9uIj4KICAgIDxpc19tYW5k\
YXRvcnk+ZmFsc2U8L2lzX21hbmRhdG9yeT4KICAgIDxjaGVja19zaWduYXR1\
cmVzPnRydWU8L2NoZWNrX3NpZ25hdHVyZXM+CiAgICA8aXNfYmFzZTY0PmZh\
bHNlPC9pc19iYXNlNjQ+CiAgICA8cGVyY2VudF9ub3JtYWxpemF0aW9uPmZh\
bHNlPC9wZXJjZW50X25vcm1hbGl6YXRpb24+CiAgICA8dXJpX25vcm1hbGl6\
YXRpb24+ZmFsc2U8L3VyaV9ub3JtYWxpemF0aW9uPgogICAgPGh0bWxfbm9y\
bWFsaXphdGlvbj5mYWxzZTwvaHRtbF9ub3JtYWxpemF0aW9uPgogICAgPGVu\
YWJsZV9ub3JtYWxpemF0aW9uX3Zpb2xhdGlvbj5mYWxzZTwvZW5hYmxlX25v\
cm1hbGl6YXRpb25fdmlvbGF0aW9uPgogICAgPGlzX2RlZmF1bHQ+dHJ1ZTwv\
aXNfZGVmYXVsdD4KICA8L2hlYWRlcj4KICA8aGVhZGVyIHR5cGU9ImV4cGxp\
Y2l0IiBuYW1lPSJjb29raWUiPgogICAgPGlzX21hbmRhdG9yeT5mYWxzZTwv\
aXNfbWFuZGF0b3J5PgogICAgPGNoZWNrX3NpZ25hdHVyZXM+ZmFsc2U8L2No\
ZWNrX3NpZ25hdHVyZXM+CiAgICA8aXNfYmFzZTY0PmZhbHNlPC9pc19iYXNl\
NjQ+CiAgICA8cGVyY2VudF9ub3JtYWxpemF0aW9uPmZhbHNlPC9wZXJjZW50\
X25vcm1hbGl6YXRpb24+CiAgICA8dXJpX25vcm1hbGl6YXRpb24+ZmFsc2U8\
L3VyaV9ub3JtYWxpemF0aW9uPgogICAgPGh0bWxfbm9ybWFsaXphdGlvbj5m\
YWxzZTwvaHRtbF9ub3JtYWxpemF0aW9uPgogICAgPGVuYWJsZV9ub3JtYWxp\
emF0aW9uX3Zpb2xhdGlvbj5mYWxzZTwvZW5hYmxlX25vcm1hbGl6YXRpb25f\
dmlvbGF0aW9uPgogICAgPGlzX2RlZmF1bHQ+dHJ1ZTwvaXNfZGVmYXVsdD4K\
ICA8L2hlYWRlcj4KICA8aGVhZGVyIHR5cGU9ImV4cGxpY2l0IiBuYW1lPSJy\
ZWZlcmVyIj4KICAgIDxpc19tYW5kYXRvcnk+ZmFsc2U8L2lzX21hbmRhdG9y\
eT4KICAgIDxjaGVja19zaWduYXR1cmVzPnRydWU8L2NoZWNrX3NpZ25hdHVy\
ZXM+CiAgICA8aXNfYmFzZTY0PmZhbHNlPC9pc19iYXNlNjQ+CiAgICA8cGVy\
Y2VudF9ub3JtYWxpemF0aW9uPmZhbHNlPC9wZXJjZW50X25vcm1hbGl6YXRp\
b24+CiAgICA8dXJpX25vcm1hbGl6YXRpb24+dHJ1ZTwvdXJpX25vcm1hbGl6\
YXRpb24+CiAgICA8aHRtbF9ub3JtYWxpemF0aW9uPmZhbHNlPC9odG1sX25v\
cm1hbGl6YXRpb24+CiAgICA8ZW5hYmxlX25vcm1hbGl6YXRpb25fdmlvbGF0\
aW9uPnRydWU8L2VuYWJsZV9ub3JtYWxpemF0aW9uX3Zpb2xhdGlvbj4KICAg\
IDxpc19kZWZhdWx0PnRydWU8L2lzX2RlZmF1bHQ+CiAgPC9oZWFkZXI+CiAg\
PHJlZGlyZWN0aW9uX2RvbWFpbiB0eXBlPSJ3aWxkY2FyZCIgbmFtZT0iKiI+\
CiAgICA8aW5jbHVkZV9zdWJkb21haW5zPmZhbHNlPC9pbmNsdWRlX3N1YmRv\
bWFpbnM+CiAgICA8bGVhcm5pbmdfbW9kZT5BbHdheXM8L2xlYXJuaW5nX21v\
ZGU+CiAgPC9yZWRpcmVjdGlvbl9kb21haW4+CiAgPHJlZGlyZWN0aW9uX3By\
b3RlY3Rpb24+CiAgICA8ZW5hYmxlZD50cnVlPC9lbmFibGVkPgogIDwvcmVk\
aXJlY3Rpb25fcHJvdGVjdGlvbj4KICA8YnJ1dGVfZm9yY2U+CiAgICA8b2Jq\
ZWN0X2lkPjA8L29iamVjdF9pZD4KICAgIDxtYXhpbXVtX2xvZ2luX2F0dGVt\
cHRzPjU8L21heGltdW1fbG9naW5fYXR0ZW1wdHM+CiAgICA8c2Vzc2lvbl9l\
eHBpcmF0aW9uX2luX3NlY29uZHM+NjAwPC9zZXNzaW9uX2V4cGlyYXRpb25f\
aW5fc2Vjb25kcz4KICAgIDxtZWFzdXJlbWVudF9wZXJpb2Q+MTwvbWVhc3Vy\
ZW1lbnRfcGVyaW9kPgogICAgPGZvcmNlX2Jsb2NraW5nPmZhbHNlPC9mb3Jj\
ZV9ibG9ja2luZz4KICAgIDxhbGFybT50cnVlPC9hbGFybT4KICAgIDxibG9j\
az50cnVlPC9ibG9jaz4KICAgIDxsb2dpbl9hdHRlbXB0X2luY3JlYXNlX2xp\
bWl0PjUwMDwvbG9naW5fYXR0ZW1wdF9pbmNyZWFzZV9saW1pdD4KICAgIDxs\
b2dpbl9hdHRlbXB0c19yZWFjaGVkPjEwMDwvbG9naW5fYXR0ZW1wdHNfcmVh\
Y2hlZD4KICAgIDxtaW5pbXVtX2ZhaWxlZF9sb2dpbl9hdHRlbXB0cz4yMDwv\
bWluaW11bV9mYWlsZWRfbG9naW5fYXR0ZW1wdHM+CiAgICA8c3VzcGljaW91\
c19pcF90aHJlc2hvbGQ+NTAwPC9zdXNwaWNpb3VzX2lwX3RocmVzaG9sZD4K\
ICAgIDxzdXNwaWNpb3VzX2lwX3JhdGVfcmVhY2hlZD4yMDwvc3VzcGljaW91\
c19pcF9yYXRlX3JlYWNoZWQ+CiAgICA8c291cmNlX2lwX2NsaWVudF9zaWRl\
X2RlZmVuc2U+ZmFsc2U8L3NvdXJjZV9pcF9jbGllbnRfc2lkZV9kZWZlbnNl\
PgogICAgPHVybF9jbGllbnRfc2lkZV9kZWZlbnNlPmZhbHNlPC91cmxfY2xp\
ZW50X3NpZGVfZGVmZW5zZT4KICAgIDxzb3VyY2VfaXBfcmF0ZV9saW1pdD50\
cnVlPC9zb3VyY2VfaXBfcmF0ZV9saW1pdD4KICAgIDx1cmxfcmF0ZV9saW1p\
dD50cnVlPC91cmxfcmF0ZV9saW1pdD4KICAgIDxpZGVudGlmeV9kZXZpY2U+\
ZmFsc2U8L2lkZW50aWZ5X2RldmljZT4KICAgIDxtYXhpbXVtX3ByZXZlbnRp\
b25fdGltZT4wPC9tYXhpbXVtX3ByZXZlbnRpb25fdGltZT4KICAgIDxmbGdf\
ZW5hYmxlZD5mYWxzZTwvZmxnX2VuYWJsZWQ+CiAgPC9icnV0ZV9mb3JjZT4K\
PC9wb2xpY3k+Cg==}
regsub -all {\s} $bundler_data(irule:sorry_page) {} bundler_data(irule:sorry_page)
regsub -all {\s} $bundler_data(asm:LAMP_rapid_utf-8) {} bundler_data(asm:LAMP_rapid_utf-8)
regsub -all {\s} $bundler_data(asm:LAMP_PolicyBuilder) {} bundler_data(asm:LAMP_PolicyBuilder)

set app $tmsh::app_name
debug [list start] [format "Starting %s version IMPL=%s TMPLNAME=%s app_name=%s" $NAME $IMPLVERSION $TMPLNAME $app] 0
debug [list version_info] [array get version_info] 3

array set modenames {
  1 {Standalone}
  2 {iWorkflow}
  3 {Cisco APIC}
  4 {VMware NSX}
}

array set __provision_cache {}
array set __node_cache {}
load_provisioned

array set aso_config {}
set asoobj {}
set modeinfo [get_mode]
set mode [lindex $modeinfo 0]
set folder [lindex $modeinfo 1]
set partition [lindex $modeinfo 2]
set rd [lindex $modeinfo 3]
set newdeploy [lindex $modeinfo 4]
set app_path [format "/%s/%s.app" $partition $app]
set template_name [format "appsvcs_integration_v%s" $IMPLMAJORVERSION]
set aso [format "%s/%s" $app_path $app]
set redeploy 0
if { ! $newdeploy } { set redeploy 1 }
set postfinal_deferred_cmds []

debug "modeinfo" [format "mode=%s folder=%s partition=%s rd=%s newdeploy=%s redeploy=%s template_name=%s" $mode $folder $partition $rd $newdeploy $redeploy $template_name] 2

# Cache our ASO object data
for { set i 0 } { $i <= [llength $asoobj] } { set i [expr {$i+2}] } {
  set type [lindex $asoobj $i]
  if { $type == "variables" || $type == "lists" || $type == "tables" } {
    for { set j 0 } { $j < [llength [lindex $asoobj [expr {$i+1}]]] } { set j [expr {$j+2}] } {
      set name [lindex [lindex $asoobj [expr {$i+1}]] $j]

      if { $type == "tables" } {
        set val [lindex [lindex $asoobj [expr {$i+1}]] [expr {$j+1}]]
      } elseif { $type == "lists" } {
        set val [lindex [lindex [lindex $asoobj [expr {$i+1}]] [expr {$j+1}]] 1]
      } else {
        set val [lindex [lindex [lindex $asoobj [expr {$i+1}]] [expr {$j+1}]] 1]
      }
      set aso_config($name) $val
    }
  }
}
# Copy the array so that we can preserve the original values
# aso_config() can change at runtime
array set aso_config_orig [array get aso_config]

debug [list aso_config] [array names aso_config] 9
foreach var [array names aso_config] {
  debug [list aso_config $var] $aso_config($var) 9
}

set asodescr [format "Deployed by appsvcs_integration_v%s in %s mode on %s" $IMPLVERSION $modenames($mode) [clock format $startTime -format "%D %H:%M:%S"]]
debug [list set_aso_decription tmsh_modify] [format "sys application service %s description \"%s\"" $aso $asodescr] 1
tmsh::modify [format "sys application service %s description \"%s\"" $aso $asodescr]

# Define various global values
set allVars {
 iapp__strictUpdates \
 iapp__appStats \
 iapp__mode \
 iapp__logLevel \
 iapp__routeDomain \
 iapp__asmDeployMode \
 iapp__apmDeployMode \
 pool__addr \
 pool__mask \
 pool__port \
 pool__DefaultPoolIndex \
 pool__Pools \
 pool__MemberDefaultPort \
 pool__Members \
 monitor__Monitors \
 vs__Listeners \
 vs__Name \
 vs__Description \
 vs__RouteAdv \
 vs__SourceAddress \
 vs__IpProtocol \
 vs__ConnectionLimit \
 vs__ProfileClientProtocol \
 vs__ProfileServerProtocol \
 vs__ProfileHTTP \
 vs__ProfileOneConnect \
 vs__ProfileCompression \
 vs__ProfileAnalytics \
 vs__ProfileRequestLogging \
 vs__ProfileDefaultPersist \
 vs__ProfileFallbackPersist \
 vs__SNATConfig \
 vs__ProfileServerSSL \
 vs__ProfileClientSSL \
 vs__ProfileClientSSLCert \
 vs__ProfileClientSSLKey \
 vs__ProfileClientSSLChain \
 vs__ProfileClientSSLCipherString \
 vs__ProfileClientSSLAdvOptions \
 vs__ProfileSecurityLogProfiles \
 vs__ProfileSecurityIPBlacklist \
 vs__ProfileSecurityDoS \
 vs__ProfileAccess \
 vs__ProfileConnectivity \
 vs__ProfilePerRequest \
 vs__OptionSourcePort \
 vs__OptionConnectionMirroring \
 vs__Irules \
 vs__BundledItems \
 vs__AdvOptions \
 vs__AdvProfiles \
 vs__AdvPolicies \
 vs__VirtualAddrAdvOptions \
 l7policy__strategy \
 l7policy__defaultASM \
 l7policy__defaultL7DOS \
 l7policy__rulesMatch \
 l7policy__rulesAction \
 feature__statsTLS \
 feature__statsHTTP \
 feature__insertXForwardedFor \
 feature__redirectToHTTPS \
 feature__sslEasyCipher \
 feature__securityEnableHSTS \
 feature__easyL4Firewall \
 feature__easyL4FirewallBlacklist \
 feature__easyL4FirewallSourceList \
 extensions__Field1 \
 extensions__Field2 \
 extensions__Field3 \
}

set requiredVars {
 pool__addr \
 pool__mask \
 pool__port \
 vs__ProfileClientProtocol }

array set table_defaults {
    Members {
        Index 0
        State enabled
        IPAddress ""
        Port ""
        ConnectionLimit 0
        Ratio 1
        PriorityGroup 0
        AdvOptions ""
    }
    Pools {
      Index -1
      Name ""
      Description ""
      LbMethod ""
      Monitor ""
      AdvOptions ""
    }
    Monitors {
      Index -1
      Name ""
      Type ""
      Options ""
    }
    L7P_Match {
      Group -1
      Operand ""
      Negate no
      Condition ""
      CaseSensitive no
      Value ""
      Missing no
    }
    L7P_Action {
      Group -1
      Target error/error/error
      Parameter error
    }
    Listeners {
      Listener ""
      Destination ""
    }
}

array set pool_member_state {
    enabled        {session user-enabled state user-up}
    disabled       {session user-disabled state user-up}
    force-disabled {session user-disabled state user-down}
    drain-disabled {session user-disabled state user-up}
}

# Fixup incoming variables: If no value is sent for a particular iApp field than the var is not created which
# results in all sorts of problems.  We just check for existence of the var and set to "" if it doesn't exist
foreach var $allVars {
  if {[info exists [subst $var]]} {
    debug "input" [format "%s sent, value is: %s" $var [set [subst $var]]] 2
  } else {
    set [subst $var] ""
    debug "input" [format "%s NOT sent, setting to blank" $var] 2
  }
}

# Double check we got all the required variables.
foreach var $requiredVars {
  debug [list required_check] [format "var=%s val=%s len=%s" $var [set [subst $var]] [string length [set [subst $var]]]] 10
  if {! [info exists [subst $var]] || [string length [set [subst $var]]] == 0 } {
    if { ! [string match "vs__" $var] && $pool__addr != "255.255.255.254" } {
      error "The variable $var is required"
    }
  }
}

# Convert the $vs__BundledItems table to a list for easier manipulation
set vs__BundledItems [single_column_table_to_list $vs__BundledItems "Resource"]
debug [list convert_bundled] $vs__BundledItems 7

# Call the custom_extensions_start proc to allow site-specific customizations
custom_extensions_start

# Special handling for the Source Address because it comes in as 0.0.0.0/0 and
# needs to be 0.0.0.0%xxxx/0, where '%xxxx' is the route-domain ID
set working $vs__SourceAddress
debug [list fix_src_addr] "Check if vs__SourceAddress needs to be fixed" 7
if { [string length $working] > 0 } {
  set net  [lindex [split $working /] 0]
  set cidr [lindex [split $working /] 1]
  set vs__SourceAddress "$net%$rd\/$cidr"
  debug [list fix_src_addr] [format " Fixing vs__SourceAddress: orig=%s new=%s" $working $vs__SourceAddress] 7
}

# Create Client-SSL profile if Cert and Key are specified but ClientSSLProfile is not
debug [list client_ssl create] "checking if client ssl cert & key were entered" 7
set clientssl 0
if { [string length $vs__ProfileClientSSLKey] > 0 && [string length $vs__ProfileClientSSLCert] > 0 && [string length $vs__ProfileClientSSL] == 0 } {

  set crypto_url_found 0
  if { [string match "url=*" $vs__ProfileClientSSLKey] } {
    set vs__ProfileClientSSLKey [load_crypto_object "key" $vs__ProfileClientSSLKey]
    set crypto_url_found 1
  }

  if { [string match "url=*" $vs__ProfileClientSSLCert] } {
    set vs__ProfileClientSSLCert [load_crypto_object "cert" $vs__ProfileClientSSLCert]
    set crypto_url_found 1
  }

  if { [string match "url=*" $vs__ProfileClientSSLChain] } {
    set vs__ProfileClientSSLChain [load_crypto_object "cert" $vs__ProfileClientSSLChain]
    set crypto_url_found 1
  }

  if { $vs__ProfileClientSSLKey == "auto" } {
    debug [list client_ssl create auto_key] [format "found auto option for key, setting vs__ProfileClientSSLKey=/Common/%s.key" $app] 5
    set vs__ProfileClientSSLKey "/Common/$app.key"
  }

  if { $vs__ProfileClientSSLCert == "auto" } {
    debug [list client_ssl create auto_cert] [format "found auto option for key, setting vs__ProfileClientSSLCert=/Common/%s.crt" $app] 5
    set vs__ProfileClientSSLCert "/Common/$app.crt"
  }

  if { $crypto_url_found == 0 } {
    tmsh::get_config /sys file ssl-key $vs__ProfileClientSSLKey
    tmsh::get_config /sys file ssl-cert $vs__ProfileClientSSLCert
    debug [list client_ssl create check_exist] "ssl cert & key found... creating profile" 7
  }

  set cmd [format "ltm profile client-ssl %s_clientssl key %s cert %s" $app $vs__ProfileClientSSLKey $vs__ProfileClientSSLCert]

  if { [string length $vs__ProfileClientSSLChain] > 0 } {
      if { $crypto_url_found == 0 } {
        tmsh::get_config /sys file ssl-cert $vs__ProfileClientSSLChain
      }
      debug [list client_ssl create cert_chain] "adding cert chain" 7
      append cmd [format " chain %s" $vs__ProfileClientSSLChain]
  }

	array set feature_sslEasyCipher_strings {
		compatible {NATIVE:!SSLv3:!SSLv2:!EXPORT:!MD5:!ADH:@STRENGTH}
		medium {TLSv1_2+HIGH:TLSv1_1+HIGH:TLSv1+MEDIUM:TLSv1+HIGH:!EXPORT:!RC4:!EXPORT:!MD5:!ADH:@STRENGTH}
		high {TLSv1_2+HIGH:TLSv1_1+HIGH:TLSv1+MEDIUM:TLSv1+HIGH:!RC4:!RSA:!DHE:!EXPORT:!MD5:!ADH:@STRENGTH}
		tls_1.2 {TLSv1_2:!TLSv1_2+LOW:!EXPORT:!MD5:!ADH:@STRENGTH}
		tls_1.1+1.2 {TLSv1_2:TLSv1_1:!TLSv1_2+LOW:!TLSv1_1+LOW:!EXPORT:!MD5:!ADH:@STRENGTH}
	}

	if { $feature__sslEasyCipher ne "disabled" && [info exists feature_sslEasyCipher_strings($feature__sslEasyCipher)]} {
		debug [list client_ssl create ssl_easy_cipher] [format "sslEasyCipher is not disabled, setting vs__ProfileClientSSLCipherString=%s" $feature_sslEasyCipher_strings($feature__sslEasyCipher)] 5
		set vs__ProfileClientSSLCipherString $feature_sslEasyCipher_strings($feature__sslEasyCipher)
	}

  if { [string length $vs__ProfileClientSSLCipherString] > 0 } {
      debug [list client_ssl create cipher_string] "adding cipher string" 7
      append cmd [format " ciphers \"%s\"" $vs__ProfileClientSSLCipherString]
  }

  if { [string length $vs__ProfileClientSSLAdvOptions] > 0 } {
    debug [list client_ssl create adv_options] "processing advanced options string" 7
    append cmd [format " %s" [process_options_string $vs__ProfileClientSSLAdvOptions "profile client-ssl" "/Common/clientssl"]]
  }

  debug [list client_ssl create tmsh_create] $cmd 1
  tmsh::create $cmd
  set clientssl 1
} else {
  if { [string length $vs__ProfileClientSSL] > 0 } {
    if { ![string match "create:*" $vs__ProfileClientSSL] } {
      debug [list client_ssl associate] "ClientSSLProfile was provided... checking if it exists" 5
      tmsh::get_config /ltm profile client-ssl $vs__ProfileClientSSL
      set clientssl 2
    } else {
      debug [list client_ssl create] "create ClientSSLProfile was provided..." 5
      set clientssl 3
    }
  } else {
    set clientssl 0
    if { [string length $vs__ProfileClientSSLKey] > 0 && [string length $vs__ProfileClientSSLCert] == 0 } {
      error "A client-ssl key was specified without a client-ssl certifcate"
    }
    if { [string length $vs__ProfileClientSSLKey] == 0 && [string length $vs__ProfileClientSSLCert] > 0 } {
      error "A client-ssl certifcate was specified without a client-ssl key"
    }
    debug [list client_ssl] "ssl cert & key not specified... skipped Client-SSL profile creation" 2
  }
}

# Fixup empty pool__Pools and monitor__Monitors table if pool__Members is populated
# The behaviour implemented here will create a pool with a round-robin lb-method
#
# If a monitor with Index 0 is present in the monitor__Monitors table
# the pool monitor will be set to that.
#
# If the monitor__Monitors is empty a default monitor will be created
set monCount [llength $monitor__Monitors]
set poolCount [llength $pool__Pools]
set poolMemberCount [llength $pool__Members]

set poolTmpl {{{
    AdvOptions none
    Description
    Index %INDEX%
    LbMethod round-robin
    Monitor %MONITOR%
    Name
}} }

set monitorTmpl {{{
  Index 0
  Name %NAME%
  Type
  Options
}} }

if { $poolCount == 0 && $poolMemberCount > 0 } {
  debug [list pools_fixup] [format "poolCount=%s" $poolCount] 7
  debug [list pools_fixup] [format "monCount=%s" $monCount] 7
  debug [list pools_fixup] [format "poolMemberCount=%s" $poolMemberCount] 7
  set poolFixupIndexes []
  array set poolFixupFound {}
  foreach memberRow $pool__Members {
    array unset memberColumn
    array set memberColumn {}
    table_row_to_array $memberRow memberColumn ::table_defaults(Members) [list AdvOptions]
    if { ![info exists poolFixupFound($memberColumn(Index))] } {
      debug [list pools_fixup found_pool] [format "index=%s" $memberColumn(Index)] 7
      lappend poolFixupIndexes $memberColumn(Index)
      set poolFixupFound($memberColumn(Index)) 1
    }
  }
  debug [list pools_fixup create_indexes] $poolFixupIndexes 7

  set poolFixupMonitor "0"
  if { $monCount == 0 } {
    if { $vs__IpProtocol == "tcp" } {
      if { [string length $vs__ProfileHTTP] > 0 } {
        set monFixupName "/Common/http"
      } else {
        set monFixupName "/Common/tcp"
      }
      set monTmpl_map [list %NAME% $monFixupName]
      set monitor__Monitors [string map $monTmpl_map $monitorTmpl]
      debug [list pools_fixup monitor__Monitors] $monitor__Monitors 7
    } else {
      set poolFixupMonitor ""
    }
  }

  set poolTemp ""
  foreach foundIndex $poolFixupIndexes {
    set poolTmpl_map [list %INDEX% $foundIndex \
                           %MONITOR% $poolFixupMonitor ]
    append poolTemp [string map $poolTmpl_map $poolTmpl]
  }
  set pool__Pools $poolTemp
  debug [list pools_fixup pool__Pools] $pool__Pools 7

  set monCount [llength $monitor__Monitors]
  set poolCount [llength $pool__Pools]
}

# Create Monitors
debug [list monitors] [format "monCount=%s" $monCount] 7
set monIdx 0
array set monNames {}
array set monCreate {}
foreach monRow $monitor__Monitors {
  set cmd ""
  debug [list monitors $monIdx] [format "monRow=%s" $monRow] 9

  array unset monColumn
  array set monColumn {}
  table_row_to_array $monRow monColumn ::table_defaults(Monitors)
  debug [list monitors table_row_to_array return] [array get monColumn] 7

  # Fixup the Index in case a table with exactly one row and no Index is sent
  if { [llength $monitor__Monitors] == 1 && $monColumn(Index) == -1 } {
    debug [list monitors fixup_index] "setting Index to 0" 9
    set monColumn(Index) 0
  }

  # The BIG-IP UI sends empty rows... above this we set Index to -1 if it wasn't found
  # If a Index is not specified then skip this row in the table
  if { $monColumn(Index) < 0 } {
    debug [list monitors $monIdx check_index] "no index value found, skipping row" 9
    continue
  } elseif { [info exists monNames($monColumn(Index))] } {
    error "A monitor with Index of \"$monColumn(Index)\" was already specified"
  } else {
    if {[string length $monColumn(Name)] > 0 } {
      if { [string match "/*" $monColumn(Name)] } {
        set monNames($monColumn(Index)) $monColumn(Name)
        set monCreate($monColumn(Index)) 0
      } else {
        set monNames($monColumn(Index)) [format "%s/%s" $app_path $monColumn(Name)]
        set monCreate($monColumn(Index)) 1
      }
    } else {
      set monNames($monColumn(Index)) [format "%s/monitor_%s" $app_path $monColumn(Index)]
      set monCreate($monColumn(Index)) 1
    }
  }

  if { $monCreate($monColumn(Index)) == 1 } {
    if { [string length $monColumn(Type)] <= 0 } {
      error "A Monitor Type was not specified for monitor with Index $monColumn(Index)"
    }

    set cmd [format "ltm monitor %s %s " $monColumn(Type) $monNames($monIdx)]
    if { [string length $monColumn(Options)] > 0 } {
      set monColumn(Options) [join $monColumn(Options) " "]
      debug [list monitors $monIdx options] [format "processing options string \"%s\"" $monColumn(Options)] 10
      append cmd [format " %s" [process_options_string $monColumn(Options) "" ""]]
    }

    debug [list monitors $monIdx tmsh_create] $cmd 1
    tmsh::create $cmd
  }

  incr monIdx
}

# Call the custom_extensions_before_pool proc to allow site-specific customizations
custom_extensions_before_pools

# Create pool
debug [list pools] [format "poolCount=%s" $poolCount] 7

set poolIdx 0
set default_pool_name ""
array set poolIndexes {}
array set poolNames {}
foreach poolRow $pool__Pools {
  set cmd ""
  set numMembers 0

  debug [list pools $poolIdx] [format "poolRow=%s" $poolRow] 9

  custom_extensions_before_pool

  array unset poolColumn
  array set poolColumn {}
  table_row_to_array $poolRow poolColumn ::table_defaults(Pools) [list AdvOptions]
  debug [list pools $poolIdx table_row_to_array return] [array get poolColumn] 7

  # Fixup the Index in case a table with exactly one row and no Index is sent
  if { [llength $pool__Pools] == 1 && $poolColumn(Index) == -1 } {
    debug [list pools $poolIdx fixup_index] "setting Index to 0" 9
    set poolColumn(Index) 0
  }

  # The BIG-IP UI sends empty rows... above this we set Index to -1 if it wasn't found
  # If a Index is not specified then skip this row in the table
  if { $poolColumn(Index) < 0 } {
    debug [list pools $poolIdx] "no index value found, skipping row" 9
    continue
  } elseif { [info exists poolIndexes($poolColumn(Index))] } {
    error "A pool with Index of \"$poolColumn(Index)\" was already specified"
  } else {
    set poolIndexes($poolColumn(Index)) 1
  }

  # Check to see if a poolName was specified... if not set to $app_pool_$poolColumn(Index)
  if { [string length $poolColumn(Name)] == 0 } {
      set poolColumn(Name) [format "%s_pool_%s" $app $poolColumn(Index)]
      debug [list pools $poolIdx] [format "no pool name specified... setting to %s" $poolColumn(Name)] 7
  }
  set poolNames($poolColumn(Index)) $poolColumn(Name)

  if { $poolColumn(Index) == $pool__DefaultPoolIndex } {
    # Set the default pool name for use later during virtual server creation
    set default_pool_name $poolColumn(Name)
  }

  # Process the pool__Members table
  set memberStr "members replace-all-with \{ "
  foreach memberRow $pool__Members {
    array unset memberColumn
    array set memberColumn {}
    table_row_to_array $memberRow memberColumn ::table_defaults(Members) [list AdvOptions]

    set memberId [format "%s/%s:%s" $memberColumn(Index) $memberColumn(IPAddress) $memberColumn(Port)]

    if { [llength $pool__Pools] == 1 &&  $memberColumn(Index) == -1 } {
      set memberColumn(Index) 0
    }

    if { $memberColumn(Index) != $poolColumn(Index) } {
      debug [list pools $poolIdx members $memberId skip_index] [format "not a member of pool %s skipping" $poolColumn(Index)] 11
      continue
    }

    debug [list pools $poolIdx members $memberId config_raw] [array get memberColumn] 9


    set memberColumn(AdvOptions) [lindex $memberColumn(AdvOptions) 0]

    # We support for many option formats for the IPAddress field.  Examples are:
    #  0.0.0.0                   Special value that signals to skip this pool member
    #  x.x.x.x[%y][;nodename]    IPv4 Address w/w/o Route Domain or Node Name
    #  abcd::0001[%y][;nodename] IPv6 Address w/w/o Route Domain or Node Name
    #  /Common/node_name         Pre-existing node name
    #  node_name                 Pre-existing node name without folder (default folder=Common)
    #  hostname.org.com          A DNS Hostname (resolved on deployment)
    #
    # These options are processed as follows:
    #  1) Skip row if IPAddress == "0.0.0.0*" or is empty
    #  2) Determine if a node object was specified or not
    #  3) If node object does not exist process as follows
    #    3a) If a nodename option was specified create the node object
    #    3b) If not IP than assume a hostname and resolve IP, create node using hostname, add node to member string

    # 1) Skip pool members with a 0.0.0.0 or empty IP.  Added to allow creation of an empty pool when you still have
    # to expose the pool member IP as a tenant editable field in iWorkflow (Cisco APIC needs this for Dynamic Endpoint Insertion)
    if { [string match 0.0.0.0* $memberColumn(IPAddress)] || [string length $memberColumn(IPAddress)] == 0 } {
      debug [list pools $poolIdx members $memberId skip_ip] "ip=0.0.0.0 or empty, skipping" 7
      continue
    } else {
      incr numMembers
    }

    # TODO: Is this still required?
    # Sometimes we receive a transposed ip/port from iWorkflow... fix it here
    if {[has_routedomain $memberColumn(Port)]} {
      set new_port $memberColumn(IPAddress)
      set new_ip $memberColumn(Port)
      set memberColumn(Port) $new_port
      set memberColumn(IPAddress) $new_ip
      debug [list pools $poolIdx members $memberId fix_ip_port] [format "ip=%s port=%s" $memberColumn(IPAddress) $memberColumn(Port)] 7
    }

    set node_default_folder "/Common/"
    if { [string first "/" $memberColumn(IPAddress)] >= 0 } { set node_default_folder "" }
    set node_create 0
    if { [string first \; $memberColumn(IPAddress)] > 1 } {
      set memberColumn(IPAddress) [lindex $memberColumn(IPAddress) 0]
      set node_info [psplit $memberColumn(IPAddress) \;]
      set memberColumn(IPAddress) [lindex $node_info 0]
      set memberColumn(NodeName) [lindex $node_info 1]
      set node_obj_name [format "%s%s" $node_default_folder $memberColumn(NodeName)]
      debug [list pools $poolIdx members $memberId named_node node_obj_name] $node_obj_name 7
    } else {
      set node_obj_name [format "%s%s" $node_default_folder $memberColumn(IPAddress)]
      debug [list pools $poolIdx members $memberId node_obj_name] $node_obj_name 7
    }

    # 2) Determine if a node object was specified rather than an IP address
    set node_exist [check_node_exist $node_obj_name]
    debug [list pools $poolIdx members $memberId set_blank_folder] "folder=$node_default_folder name=$node_obj_name exist=$node_exist" 7

    debug [list pools $poolIdx members $memberId is_ip] "$memberColumn(IPAddress) [is_ip $memberColumn(IPAddress)]" 7

    if { [info exists memberColumn(NodeName)] && $node_exist == 0 } {
      set node_create 1
    } else {
      if { $node_exist == 0 && [is_ip $memberColumn(IPAddress)] == 0 } {
        set memberColumn(NodeName) $memberColumn(IPAddress)
        set memberColumn(IPAddress) [dns_lookup $memberColumn(IPAddress)]
        debug [list pools $poolIdx members $memberId resolved_ip] $memberColumn(IPAddress) 7
        set node_create 1
      }
    }

    if { $node_create } {
      set node_cmd [format "ltm node /%s/%s address %s" $partition $memberColumn(NodeName) $memberColumn(IPAddress)]
      debug [list pools $poolIdx members $memberId named_node tmsh_create] $node_cmd 7
      tmsh::create $node_cmd
      set __node_cache($memberColumn(NodeName)) 1
      set node_exist 1
      set memberColumn(IPAddress) [format "/Common/%s" $memberColumn(NodeName)]
    }

    # Add a route domain if it wasn't included and we don't already have a node object created
    if { $node_exist == 0 && ![has_routedomain $memberColumn(IPAddress)]} {
      set memberColumn(IPAddress) [get_dest_addr $memberColumn(IPAddress)]
    }

    # If we don't get a port in the pool member table than use the template value for pool__MemberDefaultPort
    # If pool__MemberDefaultPort is empty than use the value for pool__port
    if { [string length $memberColumn(Port)] == 0} {
      if { [string length $pool__MemberDefaultPort] == 0 } {
        debug [list pools $poolIdx members $memberId port_sub_vs] [format "using %s" $pool__port] 5
        set memberColumn(Port) $pool__port
      } else {
        debug [list pools $poolIdx members $memberId port_sub_default] [format "using %s" $pool__MemberDefaultPort] 5
        set memberColumn(Port) $pool__MemberDefaultPort
      }
    }

    debug [list pools $poolIdx members $memberId normalized_config] [array get memberColumn] 7

    if { [string length $memberColumn(AdvOptions)] > 0} {
      debug [list pools $poolIdx members $memberId adv_options] "processing member advanced options string" 7
      set memberColumn(AdvOptions) [format " %s" [process_options_string $memberColumn(AdvOptions) "" ""]]
    }

    if { $node_exist } {
      # Node did exist, create <node name>:<port> string
      set memberColumn(Dest) [format "%s:%s" $memberColumn(IPAddress) $memberColumn(Port)]
    } else {
      # Node did not exist, get the correctly formatted ip, port string
      set memberColumn(Dest) [get_dest_str $memberColumn(IPAddress) $memberColumn(Port)]
    }

	if { ![info exists ::pool_member_state($memberColumn(State))] } {
		error "The pool member state specified for $memberColumn(Dest) is not valid"
	}

	lappend postfinal_deferred_cmds [create_escaped_tmsh [format "tmsh::modify ltm pool %s/%s members modify \{ %s \{ %s \} \}" $app_path $poolNames($poolColumn(Index)) $memberColumn(Dest) $::pool_member_state($memberColumn(State))]]

    append memberStr [format " %s \{ connection-limit %s ratio %s priority-group %s %s \} " $memberColumn(Dest) $memberColumn(ConnectionLimit) $memberColumn(Ratio) $memberColumn(PriorityGroup) $memberColumn(AdvOptions)]
  }
  append memberStr " \} "

  # Check to see if we really have any pool members after table processing
  if { $numMembers == 0 } {
    debug [list pools $poolIdx members] "no true pool members found after table was processed, setting to none" 5
    set memberStr " members none"
  }

  debug [list pools $poolIdx member_str] "memberStr=$memberStr" 7

  set poolColumn(AdvOptions) [lindex $poolColumn(AdvOptions) 0]

  # We support multiple monitors and the ability to specify the minimum number of monitors that need
  # to pass for the pool to be considered healthy.  The format of the Monitor string from the Pool table is:
  #    (<monitor index>[,<monitor index>][;<minimum healthy>])
  #      For example:  0,1,2;3  specifies that this pool should associate the monitors created with
  #                             monitor index 0, 1 and 2 and that all 3 monitors need to pass for the
  #                             pool to be considered available.
  #
  # If no value is specifed no monitor is associated with the pool
  set monitor $poolColumn(Monitor)
  if { [string length $monitor] > 0 } {
    # Monitor info entered
    if { [string match "*\;*" $monitor] } {
      # Min monitors specified
      set monitor [lindex $monitor 0]
      set monparts [split $monitor \;]
      if { [llength $monparts] == 2 } {
        # Set the minimum number of monitors and list of monitors to associate
        set monmin [lindex $monparts 1]
        set monlist [split [lindex $monparts 0] ,]
      }
    } else {
      # Min monitors NOT specified, assume ALL monitors should pass and create list of monitors
      set monmin -1
      set monlist [split [lindex $poolColumn(Monitor) 0] ,]
    }

    # Get the names of the monitors that were created above (array keyed by monitor index) and
    # check to make sure all monitors specified were actually created
    set monmapped {}
    foreach mon $monlist {
      if { [info exists monNames($mon)] } {
        lappend monmapped $monNames($mon)
      } else {
        error "The monitor index '$mon' specified in pool index '$poolColumn(Index)' does not exist"
      }
    }

    # Setup our command
    if { $monmin > 0 } {
      set monitorCmd [format "monitor min %s of { %s }" $monmin [join $monmapped " "]]
    } else {
      set monitorCmd [format "monitor \"%s\"" [join $monmapped " and "]]
    }
  } else {
    # No monitor specified, set to none
    set monitorCmd "monitor none"
  }

  # iCR does not like table columns with empty values.  Workaround this by allow use of keyword 'none' and NOOP
  if { [string tolower $poolColumn(AdvOptions)] == "none" } {
    set poolColumn(AdvOptions) ""
  }

  # Setup the base pool create command
  set cmd [format "ltm pool %s/%s %s %s " $app_path $poolColumn(Name) $memberStr $monitorCmd]

  array set pool_options {
    "poolColumn(LbMethod)" "load-balancing-mode"
    "poolColumn(Description)" "description"
  }

  foreach {optionvar optioncmd} [array get pool_options] {
    append cmd [generic_add_option [list pools $poolIdx options] [set [subst $optionvar]] $optioncmd "" 0]
  }

  if { [string length poolColumn(AdvOptions)] > 0 } {
    debug [list pools $poolIdx adv_options] "processing advanced options string" 7
    append cmd [format " %s" [process_options_string $poolColumn(AdvOptions) "" ""]]
  }

  debug [list pools $poolIdx tmsh_create] $cmd 1
  tmsh::create $cmd

  custom_extensions_after_pool
  incr poolIdx
}

if { ![info exists poolIndexes($pool__DefaultPoolIndex)] 
     && $pool__DefaultPoolIndex ne "" 
     && $poolCount > 0 } {
  error "The default pool index specified was not present in the pool table"
}

# Call the custom_extensions_after_pool proc to allow site-specific customizations
custom_extensions_after_pools

# Check to see if a vsName was specified... if not set to $app_vs
if { [string length $vs__Name] == 0 } {
  set vs__Name [format "%s_default_vs_%s" $app $pool__port]
  set addl_vs_basename [format "%s_idx" $app]
  change_var vs__Name $vs__Name
  debug [list virtual_server set_vs_name] [format "no VS Name specified... setting to %s" $vs__Name] 5
} else {
  set addl_vs_basename [format "%s_idx" $vs__Name]
}

# Create L7 Traffic policy
set l7p_matchGroups [list]
array set l7p_matchGroupMap {}
array set l7p_matchRules {}
set l7p_actionGroups [list]
array set l7p_actionGroupMap {}
array set l7p_actionRules {}
array set l7p_requires {}
array set l7p_controls {}
array set l7p_asmrule {}
array set l7p_l7dosrule {}
set l7p_defer_create 0

set l7p_numMatchRows [llength $l7policy__rulesMatch]
set l7p_numActionRows [llength $l7policy__rulesAction]
debug "l7policy" [format "numMatchRows=%s numActionRows=%s" $l7p_numMatchRows, $l7p_numActionRows] 7

# Prepare the l7p_matchGroups list and the associated l7p_matchGroupMap array.
# The list holds an ordered set of the discreet groups received
# The array holds a mapping of the group to it's associated rows in the table
set l7p_matchIdx 0
foreach l7p_matchRow $l7policy__rulesMatch {
  debug [list l7policy match_prep $l7p_matchIdx] [format "matchRow=%s" $l7p_matchRow] 9

  array unset l7p_matchColumn
  array set l7p_matchColumn {}
  table_row_to_array $l7p_matchRow l7p_matchColumn ::table_defaults(L7P_Match)

  if { [string tolower $l7p_matchColumn(Group)] != "default" && $l7p_matchColumn(Group) < 0 } {
    debug [list l7policy match_prep] "skipping row, Group < 0" 9
    incr l7p_matchIdx
    continue
  }

  if { ![info exists l7p_matchGroupMap($l7p_matchColumn(Group))] } {
    set l7p_matchGroupMap($l7p_matchColumn(Group)) [list]
    lappend l7p_matchGroups $l7p_matchColumn(Group)
  }
  lappend l7p_matchGroupMap($l7p_matchColumn(Group)) $l7p_matchIdx
  incr l7p_matchIdx
}

# Prepare the l7p_actionGroups list and the associated l7p_actionGroupMap array.
# The list holds an ordered set of the discreet groups received
# The array holds a mapping of the group to it's associated rows in the table
set l7p_actionIdx 0
foreach l7p_actionRow $l7policy__rulesAction {
  debug [list l7policy action_prep $l7p_actionIdx] [format "actionRow=%s" $l7p_actionRow] 9

  array unset l7p_actionColumn
  array set l7p_actionColumn {}
  table_row_to_array $l7p_actionRow l7p_actionColumn ::table_defaults(L7P_Action)

  if { [string tolower $l7p_actionColumn(Group)] != "default" && $l7p_actionColumn(Group) < 0 } {
    debug [list l7policy action_prep] "skipping row, index < 0" 9
    incr l7p_actionIdx
    continue
  }

  if { ![info exists l7p_actionGroupMap($l7p_actionColumn(Group))] } {
    set l7p_actionGroupMap($l7p_actionColumn(Group)) [list]
    lappend l7p_actionGroups $l7p_actionColumn(Group)
  }
  lappend l7p_actionGroupMap($l7p_actionColumn(Group)) $l7p_actionIdx
  incr l7p_actionIdx
}

# Perform a sanity check.  The number of groups should match between the match and action tables
foreach l7p_matchGroup $l7p_matchGroups {
  if { ! [info exists l7p_actionGroupMap($l7p_matchGroup)] } {
    error "The L7 Policy Match Group '$l7p_matchGroup' was specified, however, an associated Action Group was not found"
  }
}

# Iterate through the l7p_matchGroups list (and the associated mapping array) and create our conditions.
foreach l7p_matchGroup $l7p_matchGroups {
  debug [list l7policy match $l7p_matchGroup] [format "matchGroup=%s, mapping=%s" $l7p_matchGroup $l7p_matchGroupMap($l7p_matchGroup)] 9

  set l7p_matchRuleIdx 0
  foreach l7p_matchRule $l7p_matchGroupMap($l7p_matchGroup) {
    set l7p_matchRow [lindex $l7policy__rulesMatch $l7p_matchRule]
    debug [list l7policy match $l7p_matchGroup $l7p_matchRuleIdx] [format "data=%s" $l7p_matchRow] 9

    array unset l7p_matchColumn
    array set l7p_matchColumn {}
    table_row_to_array $l7p_matchRow l7p_matchColumn ::table_defaults(L7P_Match)

    # Determine which profile is required in the policy for the specified operand
    switch -glob [string tolower $l7p_matchColumn(Operand)] {
      client-ssl* { set l7p_requires("client-ssl") 1 }
      http*       { set l7p_requires("http") 1 }
      ssl*        { set l7p_requires("ssl-persistence") 1 }
      tcp*        { set l7p_requires("tcp") 1 }
      default {
        if { $l7p_matchColumn(Group) != "default" } {
          error "Could not determine the correct profile type for L7 Policy Match, Group $l7p_matchColumn(Group), Operand $l7p_matchColumn(Operand)"
        }
      }
    }

    # Set our tmsh modifiers
    if { [string tolower $l7p_matchColumn(Negate)] == "no" } { set l7p_matchColumn(Negate) "" }
    if { [string tolower $l7p_matchColumn(Negate)] == "yes" } { set l7p_matchColumn(Negate) "not" }
    if { [string tolower $l7p_matchColumn(Missing)] == "no" } { set l7p_matchColumn(Missing) "" }
    if { [string tolower $l7p_matchColumn(Missing)] == "yes" } { set l7p_matchColumn(Missing) "missing" }
    if { [string tolower $l7p_matchColumn(CaseSensitive)] == "no" } { set l7p_matchColumn(CaseSensitive) "case-insensitive" }
    if { [string tolower $l7p_matchColumn(CaseSensitive)] == "yes" } { set l7p_matchColumn(CaseSensitive) "case-sensitive" }

    # Process the operand.  The '/' character gets replaced with a ' ' to build the tmsh
    # command.  Additionally the ',' character gets replaced with a ' ' to allow for multiple
    # values to be passed to the operand.
    set l7p_match_oper [split $l7p_matchColumn(Operand) /]
    if { [llength $l7p_match_oper] > 0 } {
      set l7p_rule_opertmp [join $l7p_match_oper " "]
      set l7p_rule_valtmp ""
      if { [string length $l7p_matchColumn(Value)] > 0 } {
        set l7p_rule_valtmp [format "%s %s values { \"%s\" }" $l7p_matchColumn(Negate) $l7p_matchColumn(Condition) [string map {, "\" \""} $l7p_matchColumn(Value)]]
      }
      lappend l7p_matchRules($l7p_matchGroup) [format "%s { %s %s %s %s }" $l7p_matchRuleIdx $l7p_rule_opertmp $l7p_matchColumn(Missing) $l7p_matchColumn(CaseSensitive) $l7p_rule_valtmp]
    } else {
      lappend l7p_matchRules($l7p_matchGroup) ""
    }
    debug [list l7policy match $l7p_matchGroup $l7p_matchRuleIdx] [format "rule=%s" [lindex $l7p_matchRules($l7p_matchGroup) $l7p_matchRuleIdx]] 7
    incr l7p_matchRuleIdx
  }
}

# Iterate through the l7p_actionGroups list (and the associated mapping array) and create our actions.
foreach l7p_actionGroup $l7p_actionGroups {
  debug [list l7policy action $l7p_actionGroup] [format "actionGroup=%s, mapping=%s" $l7p_actionGroup $l7p_actionGroupMap($l7p_actionGroup)] 9

  set l7p_actionRuleIdx 0
  foreach l7p_actionRule $l7p_actionGroupMap($l7p_actionGroup) {
    set l7p_actionRow [lindex $l7policy__rulesAction $l7p_actionRule]
    debug [list l7policy action $l7p_actionGroup $l7p_actionRuleIdx] [format "data=%s" $l7p_actionRow] 9

    array unset l7p_actionColumn
    array set l7p_actionColumn {}
    table_row_to_array $l7p_actionRow l7p_actionColumn ::table_defaults(L7P_Action)

    if { [string tolower $l7p_actionColumn(Group)] == "default" } {
      set l7p_action_found_default 1
    }

    # Determine which profile is required in the policy for the specified operand
    switch -glob [string tolower $l7p_actionColumn(Target)] {
      asm*            {
                        set l7p_controls("asm") 1
                        set l7p_asmrule($l7p_actionGroup) 1
                      }
      cache*          { set l7p_controls("cache") 1 }
      *compress*      { set l7p_controls("compression") 1 }
      forward*        { set l7p_controls("forwarding") 1 }
      http*           { set l7p_controls("forwarding") 1 }
      l7dos*          {
                        set l7p_controls("l7dos") 1
                        set l7p_controls("asm") 1
                        set l7p_l7dosrule($l7p_actionGroup) 1
                      }
      log*            { set l7p_controls("forwarding") 1 }
      request-adapt*  { set l7p_controls("request-adaption") 1 }
      response-adapt* { set l7p_controls("response-adaptions") 1 }
      server-ssl*     { set l7p_controls("server-ssl") 1 }
      tcp-nagle*      { set l7p_controls("forwarding") 1 }
      tcl*            { set l7p_controls("tcl") 1 }
      default {
        error "Could not determine the correct profile type for L7 Policy Action, Group $l7p_actionColumn(Group), Target $l7p_actionColumn(Target)"
      }
    }

    # Process the target(s).  Multiple targets/parameters are delimited by a '|' seperator.  The '/' character
    # gets replaced with a ' ' to build the tmsh command.  We then determine the type of target by
    # counting the number unique target elements.  3 element targets don't require a parameter
    # (eg: forward/request/reset). 4 element target require parameters.  We then parse the 4th element
    # as a comma-seperated string to determine the number of unique parameters required.  The
    # entered parameter is checked to ensure a parameters are entered (can be blank) and the the
    # tmsh command is created.
    set l7p_action_target_chunk ""
    set l7p_action_targets [split $l7p_actionColumn(Target) /]
    switch [llength $l7p_action_targets] {
      3 {
        set l7p_rule_targettmp [join $l7p_action_targets " "]
        set l7p_action_target_chunk [format "%s \{ %s \}" $l7p_actionRuleIdx $l7p_rule_targettmp]
        debug [list l7policy action $l7p_actionGroup $l7p_actionRuleIdx 3_elements] [format "chunk=%s" $l7p_action_target_chunk] 7
       }
      4 {
        set l7p_rule_targettmp [format "%s %s %s" [lindex $l7p_action_targets 0] [lindex $l7p_action_targets 1] [lindex $l7p_action_targets 2]]
        set l7p_rule_parameters [psplit [lindex $l7p_action_targets 3] ,]
        # Fix the list in the case that we got a reserved character
        if { [llength $l7p_actionColumn(Parameter)] == 1 } {
          set l7p_actionColumn(Parameter) [lindex $l7p_actionColumn(Parameter) 0]
        }

        set l7p_rule_values [psplit $l7p_actionColumn(Parameter) ,]
        debug [list l7policy action $l7p_actionGroup $l7p_actionRuleIdx val_list] $l7p_actionColumn(Parameter) 7

        set l7p_action_parIdx 0

        set l7p_action_target_chunk [format "%s \{ %s " $l7p_actionRuleIdx  $l7p_rule_targettmp]
        foreach l7p_action_parameter $l7p_rule_parameters {
          if { [llength $l7p_rule_parameters] == 1 } {
            set l7p_action_parameter_value $l7p_actionColumn(Parameter)
          } else {
            set l7p_action_parameter_value [lindex $l7p_rule_values $l7p_action_parIdx]
          }

          # Special handling for forward/request/select/(pool|clone-pool).  Either a full path to
          # a pool can be entered (eg: /Common/mypool) or the index of a pool created in the pool__Pools
          # table can be referenced.  If a pool index is referenced we replace it here with the name
          # of the pool
          switch -regexp $l7p_actionColumn(Target) {
            ^.*(pool|clone-pool)$ {
              set l7p_action_parameter_poolidx -1
              if { [regexp {^pool:[0-9]+$} $l7p_action_parameter_value] } {
                set l7p_action_parameter_poolidx [lindex [split $l7p_action_parameter_value :] 1]
                debug [list l7policy action $l7p_actionGroup $l7p_actionRuleIdx pool_substitute] [format "idx=%s val=%s name=%s" $l7p_action_parameter_poolidx $l7p_action_parameter_value $poolNames($l7p_action_parameter_poolidx)] 7
                set l7p_action_parameter_value [format "%s/%s" $app_path $poolNames($l7p_action_parameter_poolidx)]
              }
            }
            ^asm.*enable.*$ {
              if { [regexp {^bundled:(.*$)} $l7p_action_parameter_value -> l7p_action_parameter_asmpolicy] } {
                debug [list l7policy action $l7p_actionGroup $l7p_actionRuleIdx asm_policy] [format "%s" $l7p_action_parameter_asmpolicy] 7
                if { ! [string match *$l7p_action_parameter_asmpolicy* $vs__BundledItems] } {
                  error "L7 Policy Action Rule with Group $l7p_actionGroup Index $l7p_actionRuleIdx specified a bundled policy that wasn't selected for deployment"
                }
                set l7p_action_parameter_asmpolicy [string map [list "%APP_NAME%" $app] $l7p_action_parameter_asmpolicy]
                set l7p_action_parameter_value [format "%s/%s" $app_path $l7p_action_parameter_asmpolicy]
                # Flag deferred creation of the policy because of bundled ASM policy
                set l7p_defer_create 1
              }
            }
          }

          append l7p_action_target_chunk [format "%s \"%s\" " $l7p_action_parameter $l7p_action_parameter_value]
          incr l7p_action_parIdx
        }
        append l7p_action_target_chunk "\} "
        debug [list l7policy action $l7p_actionGroup $l7p_actionRuleIdx 4_element] [format "chunk=%s" $l7p_action_target_chunk] 7
      }
      default { error "The target $l7p_actionColumn(Target) could not be processed" }
    }
    lappend l7p_actionRules($l7p_actionGroup) $l7p_action_target_chunk
    debug [list l7policy action $l7p_actionGroup $l7p_actionRuleIdx] [format "rule=%s" [lindex $l7p_actionRules($l7p_actionGroup) $l7p_actionRuleIdx]] 7
    incr l7p_actionRuleIdx
  }
  debug [list l7policy action $l7p_actionGroup] [format "rules=%s" $l7p_actionRules($l7p_actionGroup)] 7
}

if { [info exists l7p_controls("asm")] && ! $l7p_action_found_default } {
  error "A 'default' L7 Policy Action must be defined if you wish you use an ASM policy"
}

# Build our L7 ruleset
set l7p_cmd_rules "rules replace-all-with \{ "
set l7p_ruleIdx 0
foreach l7p_matchGroup $l7p_matchGroups {
  debug [list l7policy rules $l7p_matchGroup "match "] $l7p_matchRules($l7p_matchGroup) 7
  debug [list l7policy rules $l7p_matchGroup action] $l7p_actionRules($l7p_matchGroup) 7

  # If an ASM target was selected we must add a bypass action to each action in the ruleset
  # that does not contain an ASM target
  set l7p_rule_asmdefault ""
  if { ![info exists l7p_asmrule($l7p_matchGroup)] && [info exists l7p_controls("asm")] } {
    if { [string tolower $l7policy__defaultASM] != "bypass" } {
      if { [regexp {^bundled:(.*$)} $l7policy__defaultASM -> l7p_action_default_asmpolicy] } {
        debug [list l7policy l7policy rules $l7p_matchGroup action default_asmpolicy] [format "%s" $l7p_action_default_asmpolicy] 7
        if { ! [string match *$l7p_action_default_asmpolicy* $vs__BundledItems] } {
          error "L7 Policy Default ASM Policy specified a bundled policy that wasn't selected for deployment"
        }
        set l7policy__defaultASM [format "%s/%s" $app_path $l7p_action_default_asmpolicy]
        set l7p_defer_create 1
      }
      set l7p_rule_asmdefault [format " 98 { asm request enable policy %s } " $l7policy__defaultASM]
      set l7p_controls("asm") 1
    } else {
      set l7p_rule_asmdefault " 98 { asm request disable } "
    }
  }

  set l7p_rule_l7dosdefault ""
  if { ![info exists l7p_l7dosrule($l7p_matchGroup)] && [info exists l7p_controls("l7dos")] } {
    if { [string tolower $l7policy__defaultL7DOS] != "bypass" } {
      set l7p_rule_l7dosdefault [format " 99 { l7dos request enable from-profile %s } " $l7policy__defaultL7DOS]
      set l7p_controls("asm") 1
      set l7p_controls("l7dos") 1
    } else {
      set l7p_rule_l7dosdefault " 99 { l7dos request disable } "
    }
  }

  set l7p_rule_default [format "%s %s" $l7p_rule_asmdefault $l7p_rule_l7dosdefault]

  set l7p_rule_condpart ""
  if { [llength $l7p_matchRules($l7p_matchGroup)] > 0 && [string length [lindex $l7p_matchRules($l7p_matchGroup) 0]] > 0 } {
    set l7p_rule_condpart [format "conditions replace-all-with \{ %s \}" [join $l7p_matchRules($l7p_matchGroup) " "]]
  }
  set l7p_rule_actionpart [format "actions replace-all-with \{ %s %s \}" [join $l7p_actionRules($l7p_matchGroup) " "] $l7p_rule_default]
  append l7p_cmd_rules [format "%s \{ %s %s ordinal %s \} " $l7p_matchGroup $l7p_rule_condpart $l7p_rule_actionpart [expr {$l7p_ruleIdx+1}]]
  incr l7p_ruleIdx
}

# Finish building the tmsh command and execute it
set l7p_cmd_requires [format " requires replace-all-with { %s } " [join [array names l7p_requires] " "]]
set l7p_cmd_controls [format " controls replace-all-with { %s } " [join [array names l7p_controls] " "]]

# TMOS 12.1 introduced a new draft/publish model for L7 policies.  Check for
# that version and set a mode accordingly
if { [string match "12.1*" $version_info(version)] } {
  debug [list l7policy version_check] "12.1 or newer detected" 7
  set l7p_new_model 1
} else {
  debug [list l7policy version_check] "12.0 or older detected" 7
  set l7p_new_model 0
}

if { $l7p_new_model } {
  if { $l7p_defer_create > 0 } {
    set l7p_cmd [format "ltm policy %s/Drafts/%s_l7policy" $app_path $app]
  } else {
    set l7p_cmd [format "ltm policy %s/Drafts/%s_l7policy legacy" $app_path $app]
  }
  set l7p_publish_cmd [format "ltm policy %s/Drafts/%s_l7policy" $app_path $app]
} else {
  set l7p_cmd [format "ltm policy %s/%s_l7policy" $app_path $app]
  set l7p_defer_cmd $l7p_cmd
}

append l7p_cmd [format " strategy %s %s %s %s \}" $l7policy__strategy $l7p_cmd_requires $l7p_cmd_controls $l7p_cmd_rules]
debug [list l7policy l7p_cmd] $l7p_cmd 7

if { [llength $l7p_matchGroups] > 0 && [llength $l7p_actionGroups] > 0 } {
  if { $l7p_defer_create > 0 } {
    lappend bundler_deferred_cmds [format "catch { %s }" [create_escaped_tmsh [format "tmsh::create sys folder %s/Drafts" $app_path]]]
    
    debug [list l7policy defer_create] $l7p_cmd 1
    set l7p_cmd_create [format "tmsh::create %s" $l7p_cmd]
    set l7p_cmd_modify [format "tmsh::modify %s" $l7p_cmd]

    lappend bundler_deferred_cmds [format "catch { %s }" [create_escaped_tmsh $l7p_cmd_modify]]
    lappend bundler_deferred_cmds [format "catch { %s }" [create_escaped_tmsh $l7p_cmd_create]]

    if { $l7p_new_model } {
    	lappend bundler_deferred_cmds [format "catch { tmsh::publish %s }" [create_escaped_tmsh $l7p_publish_cmd]]
    }

    lappend bundler_deferred_cmds [format "catch { %s }" [create_escaped_tmsh [format "tmsh::modify ltm virtual %s/%s profiles add \{ /Common/websecurity \{ \} \}" $app_path $vs__Name]]]
    lappend bundler_deferred_cmds [format "catch { %s }" [create_escaped_tmsh [format "tmsh::modify ltm virtual %s/%s policies add \{ %s/%s_l7policy \}" $app_path $vs__Name $app_path $app]]]

    if { $l7p_new_model } {
      lappend bundler_deferred_cmds [format "tmsh::delete sys folder %s/Drafts " $app_path]
    }
  } else {
    tmsh::create [format "sys folder %s/Drafts" $app_path]
    debug [list l7policy tmsh_create] $l7p_cmd 1
    tmsh::create $l7p_cmd
  	if { $l7p_new_model } {
  		debug [list l7policy tmsh_publish] $l7p_publish_cmd 1
  		tmsh::publish $l7p_publish_cmd
      tmsh::delete [format "sys folder %s/Drafts" $app_path]
  	}

    # Add the created policy to the vs__AdvPolicies variable so we attach it to the
    # Virtual Server when it's created.
    append vs__AdvPolicies [format " %s/%s_l7policy " $app_path $app]
    debug [list l7policy add_policy_to_vs] [format "vs__AdvPolicies=%s" $vs__AdvPolicies] 5
  }
} else {
  debug [list l7policy skip_creation] "No valid actions or rules after processing, skipping creation" 7
}

# Call the custom_extensions_before_vs proc to allow site-specific customizations
custom_extensions_before_vs

# Create virtual Server

# Process the HTTP dependent features
if { [string length $vs__ProfileHTTP] > 0 } {
  # Process the 'auto' flag for feature__redirectToHTTPS
  if { $feature__redirectToHTTPS eq "auto" && $pool__port eq "443" && $pool__addr ne "255.255.255.254"} {
    debug [list virtual_server feature__redirectToHTTPS] "found auto flag and port is 443, setting feature to enabled" 5
    set feature__redirectToHTTPS enabled
  }

  # Process the 'auto' flag for feature__insertXForwardedFor
  if { $feature__insertXForwardedFor eq "auto" && $vs__SNATConfig ne ""} {
    debug [list virtual_server feature__insertXForwardedFor] "found auto flag, port is 443 or 80 and SNAT enabled, setting feature to enabled" 5
    set feature__insertXForwardedFor enabled
  }
}

# Process the vs__ProfileSecurityIPBlacklist option.
set ipi_mode 0
switch -glob [string tolower $vs__ProfileSecurityIPBlacklist] {
  enabled-block { set ipi_action "drop" }
  enabled-log   { set ipi_action "accept" }
  none          { set ipi_mode 0 }
  /*            { set ipi_mode 2 }
  default {
    set ipi_create 0
    set vs__ProfileSecurityIPBlacklist none
  }
}

# Process feature__easyL4Firewall options
set afm_auto_ipistring ""
if { [is_provisioned afm] && $pool__addr != "255.255.255.254" } {
  switch [string tolower $feature__easyL4Firewall] {
    auto {
      debug [list virtual_server feature__easyL4Firewall] "found auto option, setting feature to enabled" 5
      set feature__easyL4Firewall enabled
      set afm_auto_ipistring "none"
    }
    base {
      debug [list virtual_server feature__easyL4Firewall] "found base flag, setting feature to enabled, vs__ProfileSecurityIPBlacklist to disabled" 5
      set feature__easyL4Firewall enabled
      set afm_auto_ipistring "none"
    }
    base+ip_blacklist_block {
      debug [list virtual_server feature__easyL4Firewall] "found auto option, setting feature to enabled, vs__ProfileSecurityIPBlacklist to enabled-block" 5
      set feature__easyL4Firewall enabled
      set afm_auto_ipistring "enabled-block"
    }
    base+ip_blacklist_log {
      debug [list virtual_server feature__easyL4Firewall] "found base+ipblacklist_log option, setting feature to enabled, vs__ProfileSecurityIPBlacklist to enabled-log" 5
      set feature__easyL4Firewall enabled
      set afm_auto_ipistring "enabled-log"
    }
    default {
      if { [get_var feature__easyL4Firewall] == "auto"} {
        set afm_auto_ipistring "none"
      }
      set feature__easyL4Firewall disabled
    }
  }
  if { $ipi_mode < 2 } {
    change_var vs__ProfileSecurityIPBlacklist $afm_auto_ipistring
  }
} else {
  debug [list virtual_server feature__easyL4Firewall] "AFM not provisioned, skipping" 5
  if { $feature__easyL4Firewall != "auto" } {
    change_var feature__easyL4Firewall disabled
  }
  set feature__easyL4Firewall disabled
}

# Check for HTTP Strict Transport Security (HSTS) option.  We do this here
# so the irule can be easily appended to the existing iRule list
if { $clientssl > 0 && [string match enabled* $feature__securityEnableHSTS] } {
  # include iRules used for feature__securityEnableHSTS
  set irule_HSTS {
    when HTTP_RESPONSE {
  HTTP::header insert Strict-Transport-Security "%HSTSOPTIONS%"
}
  }; # end irule_HSTS
  set irule_HSTS_redirect {
    when HTTP_REQUEST {
  HTTP::respond 301 Location "https://[getfield [HTTP::host] ":" 1][HTTP::uri]"
}
  };

  debug [list virtual_server feature__securityEnableHSTS] "creating HSTS iRule" 5
  set hstsrule [format "%s/hsts_irule" $app_path]

  # Substitute in HSTS options is specified
  if { [string match "*;*" $feature__securityEnableHSTS] } {
    set hstsoptions [format "%s\; " [lindex [split $feature__securityEnableHSTS \;] 1]]
    set feature__securityEnableHSTS [lindex [split $feature__securityEnableHSTS \;] 0]
    debug [list virtual_server feature__securityEnableHSTS options] $hstsoptions 7
  } else {
    set hstsoptions "max-age=31536000; "
  }

  switch [string tolower $feature__securityEnableHSTS] {
    enabled-preload { append hstsoptions "preload" }
    enabled-subdomain { append hstsoptions "includeSubDomains" }
    enabled-preload-subdomain { append hstsoptions "includeSubDomains\; preload" }
    default { error "An invalid option was specified for feature__securityEnableHSTS" }
  }

  set irule_HSTS_final [string map [list %HSTSOPTIONS% $hstsoptions] $irule_HSTS]

  set hstscmd "ltm rule $hstsrule $irule_HSTS_final"
  debug [list virtual_server feature__securityEnableHSTS tmsh_create] $hstscmd 1
  tmsh::create $hstscmd

  if { $feature__redirectToHTTPS eq "enabled"} {
    debug [list virtual_server feature__securityEnableHSTS ssl_redirect_check] "feature_redirectToHTTPS enabled, creating HSTS redirect iRule" 5
    set hstsredirectrule [format "%s/hsts_redirect_irule" $app_path]
    set hstsredirectcmd "ltm rule $hstsredirectrule $irule_HSTS_redirect"
    debug [list virtual_server feature__securityEnableHSTS tmsh_create] $hstsredirectcmd 1
    tmsh::create $hstsredirectcmd
  }

  if { [string length $vs__Irules] > 0 } {
    append vs__Irules ",$hstsrule"
  } else {
    set vs__Irules $hstsrule
  }
  debug [list virtual_server feature__securityEnableHSTS add_irule_to_vs] [format "vs__Irules=%s" $vs__Irules] 7
}

set cmd [format "ltm virtual %s/%s " $app_path $vs__Name]

# Setup our listener destination address
set vs_dest_addr [get_dest_addr $pool__addr]

# Keep vs_dest_addr as is for use by other features, create vs_dest with full <ip>%<rd>:<port> format
set vs_dest [get_dest_str $vs_dest_addr $pool__port]

debug [list virtual_server set_dest] [format "vs_dest_addr=%s vs_dest=%s" $vs_dest_addr $vs_dest] 7

# Set virtual server options we support.  This array assumes a format " <option> <input value>" for the TMSH command.
array set vs_options {
 "pool__mask" "mask"
 "vs_dest" "destination"
 "vs__IpProtocol" "ip-protocol"
 "vs__ConnectionLimit" "connection-limit"
 "vs__Description" "description"
 "vs__SourceAddress" "source"
 "vs__OptionSourcePort" "source-port"
 "vs__OptionConnectionMirroring" "mirror"
 "vs__ProfileFallbackPersist" "fallback-persistence"
 "vs__ProfilePerRequest" "per-flow-request-access-policy"
}

if { [string length $default_pool_name] > 0 } {
  set vs_options(default_pool_name) "pool"
}

# Set virtual server options we support.  This array allows specifcation of the specific TMSH command format
array set vs_options_custom {
 "vs__Irules" " rules \{ %s \} "
 "vs__ProfileDefaultPersist" " persist replace-all-with \{ %s \} "
 "vs__ProfileSecurityLogProfiles" " security-log-profiles replace-all-with \{ %s \} "
}

# Process the create: option for persistence profiles
array set persist_create_defaults {
  "cookie" { default "/Common/cookie" }
  "dest-addr" { default "/Common/dest_addr" }
  "hash" { default "/Common/hash" }
  "msrdp" { default "/Common/msrdp" }
  "sip" { default "/Common/sip_info" }
  "source-addr" { default "/Common/source_addr" }
  "ssl" { default "/Common/ssl" }
  "universal" { default "/Common/universal" }
}

# Loop over the two fields that allow this option
foreach persist_var [list vs__ProfileDefaultPersist vs__ProfileFallbackPersist] {
  set persist_val [set [subst $persist_var]]
  set persist_type ""
  if { [regexp -nocase {^create:} $persist_val] } {
    set persist_val [string map {"create:" ""} $persist_val]

    # Process the string, check to see the persistence type was specified and is valid
    array set persist_options [process_kvp_string $persist_val]
    if { ! [info exists persist_options(type)] } {
      error "The create string specified for $persist_var needs to include a 'type=(cookie|dest-addr|hash|msrdp|sip|source-addr|ssl|universal)' option"
    }

    if { ! [info exists persist_create_defaults($persist_options(type))] } {
      error "The persistence type '$persist_options(type)' specified for $persist_var is not valid"
    }

    # Set some inital values
    array set persist_attr [subst $::persist_create_defaults($persist_options(type))]
    set persist_name [format "%s_persistence_%s" $app $persist_options(type)]
    set persist_cmd [format "ltm persistence %s %s/%s " $persist_options(type) $app_path $persist_name]

    # Remove the 'type=XXX;' field from the create string
    set persist_val [string map [list "type=$persist_options(type);" ""] $persist_val]

    # Process the rest of the options and get the TMSH string portion for options
    set persist_option_cmd [process_options_string $persist_val "persistence $persist_options(type)" $persist_attr(default) 1]
    debug [list virtual_server persistence create_handler $persist_var $persist_options(type)] [format "%s" $persist_option_cmd] 7

    # Build our full TMSH command
    append persist_cmd $persist_option_cmd

    # Reset the APL var to point to the new profile name
    set [subst $persist_var] [format "%s/%s" $app_path $persist_name]
    debug [list virtual_server persistence create_handler $persist_var $persist_options(type)] [format "%s=%s" $persist_var [set [subst $persist_var]]] 1
    debug [list virtual_server persistence create_handler $persist_var $persist_options(type) tmsh_create] [format "%s" $persist_cmd] 1
    tmsh::create $persist_cmd
  }
}

handle_opt_remove_on_redeploy vs__ProfilePerRequest "" "per-flow-request-access-policy" "apm"
handle_opt_remove_on_redeploy vs__ProfileSecurityIPBlacklist "none" "ip-intelligence-policy" "ltm"

# Process the vs__ProfileSecurityIPBlacklist option according to $ipi_mode set above
if { $ipi_mode == 1 } {
  debug [list virtual_server ip_blacklist create] [format "ipi_action=%s, creating IPI policy" $ipi_action] 7
  set ipi_name [create_obj_name "ip_blacklist"]
  set ipi_cmd [format "security ip-intelligence policy %s default-action %s default-log-blacklist-hit-only yes" $ipi_name $ipi_action]
  debug [list virtual_server ip_blacklist tmsh_create] $ipi_cmd 1
  tmsh::create $ipi_cmd
  set vs__ProfileSecurityIPBlacklist $ipi_name
  array set vs_options [list vs__ProfileSecurityIPBlacklist ip-intelligence-policy]
}

if { $ipi_mode == 2 } {
  debug [list virtual_server ip_blacklist associate] [format "adding existing IPI policy %s" $vs__ProfileSecurityIPBlacklist] 7
  array set vs_options [list vs__ProfileSecurityIPBlacklist ip-intelligence-policy]
}

# Process the feature__easyL4Firewall option
handle_opt_remove_on_redeploy feature__easyL4Firewall "disabled" "fw-enforced-policy" "afm"

if { $feature__easyL4Firewall == "enabled" } {
  debug [list virtual_server l4_firewall] "creating FW policy" 5

  set cidr_blacklist [single_column_table_to_list $feature__easyL4FirewallBlacklist "CIDRRange"]
  debug [list virtual_server l4_firewall cidr_blacklist] $cidr_blacklist 7

  set cidr_sourcelist [single_column_table_to_list $feature__easyL4FirewallSourceList "CIDRRange"]
  debug [list virtual_server l4_firewall cidr_sourcelist] $cidr_sourcelist 7

  if { [llength $cidr_blacklist] > 0 } {
    debug [list virtual_server l4_firewall create_blacklist] "creating static blacklist address-list" 7
    set feature_easyL4Firewall_blacklistcmd [format "security firewall address-list %s/afm_staticBlacklist addresses replace-all-with { %s }" \
     $app_path [join $cidr_blacklist " "]]

    debug [list virtual_server l4_firewall create_blacklist tmsh_create] $feature_easyL4Firewall_blacklistcmd 1
    tmsh::create $feature_easyL4Firewall_blacklistcmd
    set feature_easyL4Firewall_blacklisttmpl [format "staticBlacklist { action drop source { address-lists replace-all-with { %s/afm_staticBlacklist } } }" $app_path]
  } else {
    set feature_easyL4Firewall_blacklisttmpl ""
  }

  if { [llength $cidr_sourcelist] > 0 } {
    debug [list virtual_server l4_firewall create_sourcelist] "creating source address-list" 7
    set feature_easyL4Firewall_srclistcmd [format "security firewall address-list %s/afm_sourceList addresses replace-all-with { %s }" \
     $app_path [join $cidr_sourcelist " "]]

    debug [list virtual_server l4_firewall create_sourcelist tmsh_create] $feature_easyL4Firewall_srclistcmd 1
    tmsh::create $feature_easyL4Firewall_srclistcmd
  } else {
    debug [list virtual_server l4_firewall create_sourcelist] "creating DEFAULT source address-list" 7
    set feature_easyL4Firewall_srclistcmd [format "security firewall address-list %s/afm_sourceList addresses replace-all-with { 0.0.0.0/0 }" $app_path]

    debug [list virtual_server l4_firewall create_sourcelist tmsh_create] $feature_easyL4Firewall_srclistcmd 1
    tmsh::create $feature_easyL4Firewall_srclistcmd
  }
  set feature_easyL4Firewall_srclist [format "%s/afm_sourceList" $app_path]

  set fw_name [create_obj_name "firewall"]
  set fw_cmd [format ""]
  set fw_tmpl {
security firewall policy %NAME% {
    rules replace-all-with {
        %STATIC_BLACKLIST%
        allowFrom {
            action accept
            ip-protocol %IP_PROTOCOL%
            source {
                address-lists replace-all-with {
                    %SOURCE_LIST%
                }
            }
        }
        defaultDeny {
            action drop
            ip-protocol %IP_PROTOCOL%
            log yes
            source {
                addresses replace-all-with {
                    0.0.0.0/0 { }
                }
            }
        }
    }
}
  };

  set tmpl_map [list %NAME%             $fw_name \
                     %IP_PROTOCOL%      $vs__IpProtocol \
                     %STATIC_BLACKLIST% $feature_easyL4Firewall_blacklisttmpl \
                     %SOURCE_LIST%      $feature_easyL4Firewall_srclist ]

  set fw_policy [string map $tmpl_map $fw_tmpl]
  debug [list virtual_server l4_firewall tmsh_create] $fw_policy 1
  tmsh::create $fw_policy
  array set vs_options [list fw_name fw-enforced-policy]
}

# Process bundled iRules
set vs__BundledItems [string map {"," " " ";" " "} $vs__BundledItems]
set bundled_irules [get_items_starting_with "irule:" $vs__BundledItems]
debug [list virtual_server bundled_irule get_list] [format "%s" $bundled_irules] 7

if { [llength $bundled_irules] > 0 } {
  set bundled_irule_map [list %APP_PATH%      $app_path \
                             %APP_NAME%      $app \
                             %VS_NAME%       $vs__Name \
                             %POOL_NAME%     $default_pool_name \
                             %PARTITION%     $partition ]

  foreach bundled_irule $bundled_irules {
    debug [list virtual_server bundled_irule create_irule] [format "deploying bundled iRule %s" $bundled_irule] 5

    set bundled_irule_curl_mode -1
    if { [string match "irule:url=*" $bundled_irule] } {
      set bundled_irule_curl_mode 1
    } elseif { [string match "irule:urloptional=*" $bundled_irule] } {
      set bundled_irule_curl_mode 2
    } else {
      if {! [info exists bundler_objects($bundled_irule)] } {
        error "A bundled iRule named '$bundled_irule' was not found in the template"
      }
      set bundled_irule_src [string map $bundled_irule_map [::base64::decode $bundler_data($bundled_irule)]]
      set bundled_irule [string map {"irule:" ""} $bundled_irule]
      set bundled_irule_do_add 1
    }

    debug [list virtual_server bundled_irule create_irule curl_mode] [format "mode=%s" $bundled_irule_curl_mode] 7
    if { $bundled_irule_curl_mode > 0 } {
      set bundled_irule_isurl 1
      set bundled_irule_url [url_subst $bundled_irule]

      regexp {^.*/(.*).irule} $bundled_irule_url -> bundled_irule
      set bundled_irule_filename [format "/var/tmp/appsvcs_irule_%s_%s_%s.irule" $::app $bundled_irule $bundler_timestamp]

      set bundled_irule_curl_state [curl_save_file $bundled_irule_url $bundled_irule_filename $bundled_irule_curl_mode]
      debug [list virtual_server bundled_irule create_irule curl_state] [format "state=%s" $bundled_irule_curl_state] 7

      if { $bundled_irule_curl_state } {
        set bundled_irule_fh [open $bundled_irule_filename]
        set bundled_irule_src [string map $bundled_irule_map [read $bundled_irule_fh]]
        close $bundled_irule_fh
        set bundled_irule_do_add 1
      } else {
        set bundled_irule_do_add 0
      }
      file delete $bundled_irule_filename
    }

    debug [list virtual_server bundled_irule $bundled_irule do_add] [format "%s" $bundled_irule_do_add] 7
    if { $bundled_irule_do_add } {
      set bundled_irule_cmd [format "ltm rule %s/%s \{\n%s\n\}" $app_path $bundled_irule $bundled_irule_src]
      debug [list virtual_server bundled_irule $bundled_irule tmsh_create] $bundled_irule_cmd 1
      tmsh::create $bundled_irule_cmd
      if { [string length $vs__Irules] > 0 } {
        append vs__Irules ","
      }
      append vs__Irules [format "%s/%s" $app_path $bundled_irule]
    }
  }
  debug [list virtual_server bundled_irule add_irule_to_vs] [format "vs__Irules=\"%s\"" $vs__Irules] 7
}

# Process the vs_options array
foreach {optionvar optioncmd} [array get vs_options] {
  append cmd [generic_add_option [list virtual_server options] [set [subst $optionvar]] $optioncmd "" 0]
}

# Process the vs_options_custom array
foreach {optionvar optioncmd} [array get vs_options_custom] {
  append cmd [generic_add_option [list virtual_server options_custom] [set [subst $optionvar]] "" $optioncmd 1]
}

if { [string length $vs__AdvOptions] > 0 } {
  debug [list virtual_server adv_options] "processing advanced options string" 7
  append cmd [format " %s" [process_options_string $vs__AdvOptions "" ""]]
}

set snatcmd ""
# Add SNAT options
if { [string length $vs__SNATConfig] > 0 } {
  switch -glob [string tolower $vs__SNATConfig] {
    automap {
      append snatcmd " source-address-translation \{ type automap \}"
    }
    partition-default {
      append snatcmd [format " source-address-translation \{ pool /%s/%s type snat \}" $partition $partition]
    }
    none {
      append snatcmd " source-address-translation \{ type none \}"
    }
    create:* {
      # split a string formatted like this: "<ip>[,<ip1>]"

      set create_snat_iplist [split [string map {"create:" ""} $vs__SNATConfig] ,]
      set create_snat_poolname [format "%s/%s_snatpool" $app_path $app]
      set create_snat_poolcmd [format "ltm snatpool %s members replace-all-with { " $create_snat_poolname]
      foreach ip $create_snat_iplist {
        append create_snat_poolcmd [format " %s%%%s " $ip $rd]
      }
      append create_snat_poolcmd "} "
      debug [list virtual_server snat create_snat_pool tmsh_create] $create_snat_poolcmd 1
      tmsh::create $create_snat_poolcmd
      append snatcmd [format " source-address-translation \{ pool %s type snat \}" $create_snat_poolname]
    }
    default {
          tmsh::get_config /ltm snatpool $vs__SNATConfig
          append snatcmd [format " source-address-translation \{ pool %s type snat \}" $vs__SNATConfig]
    }
  }
  debug [list virtual_server snatcmd] $snatcmd 7
}
append cmd $snatcmd

# Process feature__insertXForwardedFor
if { $feature__insertXForwardedFor eq "enabled"} {
  if { [regexp -nocase {^create:} $vs__ProfileHTTP] } {
    if { ! [regexp -nocase {insert-xforwarded-for=enabled} $vs__ProfileHTTP] } {
      debug [list virtual_server feature__insertXForwardedFor append] "Appending insert-xforwarded-for=enabled to existing HTTP profile customization string" 5
      append vs__ProfileHTTP ";insert-xforwarded-for=enabled"
    } else {
      debug [list virtual_server feature__insertXForwardedFor ignore] "insert-xforwarded-for=enabled alredy in HTTP profile customization string... doing nothing" 5
    }
  } else {
    debug [list virtual_server feature__insertXForwardedFor create] [format "Creating HTTP profile customization string \"create:insert-xforwarded-for=enabled;defaults-from=%s\"" $vs__ProfileHTTP] 5
    set vs__ProfileHTTP [format "create:insert-xforwarded-for=enabled;defaults-from=%s" $vs__ProfileHTTP]
  }
}

# Process the create: option for profiles in the array below.
# Profiles that we support the "create:option[=value][,option2[=value2]]" format for option customization
array set profile_create_supported {
 "vs__ProfileClientProtocol" { append "_clientside" }
 "vs__ProfileServerProtocol" { append "_serverside"}
 "vs__ProfileHTTP" { type "http" append ""}
 "vs__ProfileOneConnect" { type "one-connect" append ""}
 "vs__ProfileCompression" { type "http-compression" append ""}
 "vs__ProfileRequestLogging" { type "request-log" append ""}
 "vs__ProfileServerSSL" { type "server-ssl" append ""}
 "vs__ProfileClientSSL" { type "client-ssl" append ""}
}

array set profile_create_defaults {
  "tcp" { default "/Common/tcp" }
  "udp" { default "/Common/udp" }
  "fastl4" { default "/Common/fastL4" }
  "fasthttp" { default "/Common/fasthttp" }
  "sctp" { default "/Common/sctp" }
  "ipother" { default "/Common/ipother" }
  "http" { default "/Common/http" }
  "one-connect" { default "/Common/oneconnect" }
  "http-compression" { default "/Common/httpcompression" }
  "request-log" { default "/Common/request-log" }
  "server-ssl" { default "/Common/serverssl" }
  "client-ssl" { default "/Common/clientssl" }
}

# Loop through the array
foreach {profile_var} [array names profile_create_supported] {
  # Setup some base vars
  array unset profile_attr
  array set profile_attr [subst $::profile_create_supported($profile_var)]
  set profile_val [set [subst $profile_var]]
  if { [regexp -nocase {^create:} $profile_val] } {
    set profile_val [string map {"create:" ""} $profile_val]

    # Process the string, check to see the profile type was specified and is valid
    array unset profile_options
    array unset profile_default_array
    array set profile_options [process_kvp_string $profile_val]
    if { ! [info exists profile_options(type)] } {
      if { [info exists profile_attr(type)] } {
        set profile_options(type) $profile_attr(type)
      } else {
        error "The create string specified for $profile_var needs to include a 'type' option specifying the type of profile to create"
      }
    }

    if { ! [info exists profile_create_defaults($profile_options(type))] } {
      error "The profile type '$profile_options(type)' specified for $profile_var is not valid"
    }

    # Remove the 'type=XXX;' field from the create string
    set profile_val [string map [list "type=$profile_options(type);" ""] $profile_val]
    set profile_name [format "%s_profile_%s%s" $app $profile_options(type) $profile_attr(append)]
    set profile_cmd [format "ltm profile %s %s/%s " $profile_options(type) $app_path $profile_name]
    array set profile_default_array [subst $::profile_create_defaults($profile_options(type))]
    set profile_default $profile_default_array(default)

    # Create the options portion of the TMSH command
    set profile_option_cmd [process_options_string $profile_val "profile $profile_options(type)" $profile_default 1]
    debug [list virtual_server profiles create_handler $profile_var] [format "%s" $profile_option_cmd] 7

    # Build the final TMSH command
    append profile_cmd $profile_option_cmd

    # Replace the APL var with the new profile name
    set [subst $profile_var] [format "%s/%s" $app_path $profile_name]
    debug [list virtual_server profiles create_handler $profile_var] [format "%s=%s" $profile_var [set [subst $profile_var]]] 1

    # Allow run-time substition of the app name
    set profile_cmd [string map [list "%APP_NAME%" $app] $profile_cmd]
    debug [list virtual_server profiles create_handler $profile_var tmsh_create] [format "%s" $profile_cmd] 1
    tmsh::create $profile_cmd
  }
}

# Add profiles
set vsprofiles " profiles replace-all-with  \{ "
debug [list virtual_server profiles] [format "adding base vsprofiles=%s" $vsprofiles] 7

# We have to specify context aware profiles first
# Figure out the correct context to apply protocol profiles
set clientContext "all"
set serverContext "all"

if { [string length $vs__ProfileClientProtocol] > 0 && [string length $vs__ProfileServerProtocol] > 0 && $vs__ProfileClientProtocol ne $vs__ProfileServerProtocol } {
  debug [list virtual_server profiles protocol] "got both client and server protocol profiles" 7
  set clientContext "clientside"
  set serverContext "serverside"
}

# Client-side protocol
if { [string length $vs__ProfileClientProtocol] > 0 } {
  append vsprofiles [format " %s \{ context %s \}" $vs__ProfileClientProtocol $clientContext]
  debug [list virtual_server profiles protocol] [format "clientside protocol name=%s context=%s" $vs__ProfileClientProtocol $clientContext] 7
}

# Server-side protocol
if { [string length $vs__ProfileServerProtocol] > 0 && $vs__ProfileClientProtocol ne $vs__ProfileServerProtocol } {
  append vsprofiles [format " %s \{ context %s \}" $vs__ProfileServerProtocol $serverContext]
  debug [list virtual_server profiles protocol] [format "serverside protocol name=%s context=%s" $vs__ProfileServerProtocol $serverContext] 7
}


# Set virtual server profiles we support.  The tmsh format expected is:
#    profiles replace-all-with { <profile1> [ { context [clientside|serverside|all] } ] <profile2> }
# To achieve this while re-using generic_add_option() we simply pass the var name with a blank option string
# Profiles that specify a proxy context can be specified in the vs_profiles_contextual array with the value
#   specifying the proxy context
array set vs_profiles_contextual {
   "vs__ProfileConnectivity" "clientside"
}

array set vs_profiles {
 "vs__ProfileHTTP" ""
 "vs__ProfileOneConnect" ""
 "vs__ProfileCompression" ""
 "vs__ProfileAnalytics" ""
 "vs__ProfileRequestLogging" ""
 "vs__ProfileServerSSL" ""
 "vs__ProfileSecurityDoS" ""
}

# Handle the 'use-bundled' value for the VS Access Profile
# The bundler code will
set bundler_apm_associate 0
if { $vs__ProfileAccess eq "use-bundled" } {
  set bundler_apm_associate 1
} else {
  set vs_profiles(vs__ProfileAccess) ""
}

# Save the base profile string for later use by feature__redirectToHTTPS
if { $feature__redirectToHTTPS eq "enabled"} {
  set vsprofiles_redirect $vsprofiles
}

# Client-SSL profile created by iApp
if { $clientssl == 1 } {
  set vs__ProfileClientSSL [format "%s/%s_clientssl" $app_path $app]
  set vs_profiles(vs__ProfileClientSSL) ""
  debug [list virtual_server client_ssl associate_created] [format "name=%s" $vs__ProfileClientSSL] 7
}

# Client-SSL profile specified via vs__ProfileClientSSL
if { $clientssl == 2 || $clientssl == 3} {
  set vs_profiles(vs__ProfileClientSSL) ""
  debug [list virtual_server client_ssl associate_existing] [format "name=%s" $vs__ProfileClientSSL] 7
}

# Process the vs_profiles_contextual array first to make sure profiles that require a proxy
# context are added first
foreach {optionvar optioncmd} [array get vs_profiles_contextual] {
  append vsprofiles [generic_add_option [list virtual_server options] [set [subst $optionvar]] "" " %s { context $optioncmd } " 0]
}

# Process the vs_profiles array to build the profiles command
foreach {optionvar optioncmd} [array get vs_profiles] {
  append vsprofiles [generic_add_option [list virtual_server options] [set [subst $optionvar]] $optioncmd "" 0]
}

if { [string length $vs__AdvProfiles] > 0 } {
  debug [list virtual_server adv_options] "processing advanced profile string" 7
  append vsprofiles [format " %s" [generic_add_option [list virtual_server adv_profiles] $vs__AdvProfiles "" "%s" 1]]
}

append vsprofiles " \}"
debug [list virtual_server profiles cmd] $vsprofiles 7

# Add the profile string to the TMSH command
append cmd $vsprofiles

# Process the $vs__AdvPolicies option
if { [string length $vs__AdvPolicies] > 0 } {
  debug [list virtual_server adv_policies] "processing advanced policies string" 7
  # Add the polcies string to the TMSH command
  set vspolicies [format " policies replace-all-with \{ %s \} " [generic_add_option [list virtual_server adv_policies] $vs__AdvPolicies "" "%s" 1]]
  debug [list virtual_server adv_policies cmd] $vspolicies 7
  append cmd $vspolicies
}

# Create the virtual server
set stats_vs 0
if { $pool__addr ne "255.255.255.254" } {
  debug [list virtual_server tmsh_create] $cmd 1
  tmsh::create $cmd
  set stats_vs 1

  # Process the additional listeners table
  set redirect_listeners []
  set vs_origcmd $cmd

  debug [list virtual_server add_listeners] [format "listenerCount=%s" [llength $vs__Listeners]] 7

  set listenerIdx 0
  set listenerRedirOverlap 0
  foreach listenerRow $vs__Listeners {
    debug [list virtual_server add_listeners $listenerIdx] [format "listenerRow=%s" $listenerRow] 9

    set listenerMap [list]
    array unset listenerColumn
    array set listenerColumn {}
    table_row_to_array $listenerRow listenerColumn ::table_defaults(Listeners)
    debug [list virtual_server add_listeners $listenerIdx table_row_to_array return] [array get listenerColumn] 7

    set listenerColumn(Listener) [lindex $listenerColumn(Listener) 0]

    if { [string length $listenerColumn(Listener)] == 0 } {
      incr listenerIdx
      continue
    }

    set listenerColumn(Destination) [lindex $listenerColumn(Destination) 0]
    array unset listenerDestOptions
    array set listenerDestOptions [process_kvp_string $listenerColumn(Destination)]
    debug [list virtual_server add_listeners $listenerIdx dest_options] [array get listenerDestOptions] 7
    regexp {^(.*)[:.]([0-9]{1,5})$} $listenerColumn(Listener) --> listenerColumn(Addr) listenerColumn(Port)

    # If this row had the 'redirect' destination specified save it for later and skip this row
    if { [info exists listenerDestOptions(redirect)] } {
        if { $feature__redirectToHTTPS != "enabled" } {
          error "To use the 'redirect' Destination for Listener $listenerColumn(Listener) feature__redirectToHTTPS but be enabled"
        }

        debug [list virtual_server add_listeners $listenerIdx redirect] $listenerColumn(Listener) 7
        lappend redirect_listeners [list $listenerColumn(Listener) [format "%s_%s_redirect_%s" $addl_vs_basename $listenerIdx $listenerColumn(Port)]]
        incr listenerIdx
        continue
    }

    # If this row had the 'nossl,noclientssl,noserverssl' destination specified do not attach SSL profiles to the virtual server
    if { [info exists listenerDestOptions(nossl)] } {
      debug [list virtual_server add_listeners $listenerIdx nossl] $listenerColumn(Listener) 7
      lappend listenerMap "\"$vs__ProfileClientSSL\"" ""
      lappend listenerMap "\"$vs__ProfileServerSSL\"" ""
      set listenerColumn(Destination) [string map [list "\;nossl" ""] $listenerColumn(Destination)]
    }
    if { [info exists listenerDestOptions(noclientssl)] } {
      debug [list virtual_server add_listeners $listenerIdx noclientssl] $listenerColumn(Listener) 7
      lappend listenerMap "\"$vs__ProfileClientSSL\"" ""
      set listenerColumn(Destination) [string map [list "\;noclientssl" ""] $listenerColumn(Destination)]
    }
    if { [info exists listenerDestOptions(noserverssl)] } {
      debug [list virtual_server add_listeners $listenerIdx noserverssl] $listenerColumn(Listener) 7
      lappend listenerMap "\"$vs__ProfileServerSSL\"" ""
      set listenerColumn(Destination) [string map [list "\;noserverssl" ""] $listenerColumn(Destination)]
    }

    if { $listenerColumn(Destination) eq "" || [string tolower $listenerColumn(Destination)] eq "default"} {
      set listenerColumn(Pool) $default_pool_name
    } elseif { [string first "/" $listenerColumn(Destination)] >= 0 } {
      set listenerColumn(Pool) $listenerColumn(Destination)
    } else {
      if { ![info exist poolNames($listenerColumn(Destination))] } {
        error "The listener $listenerColumn(Listener) referenced a destination pool index $listenerColumn(Destination) which does not exist"
      }
      set listenerColumn(Pool) $poolNames($listenerColumn(Destination))
    }

    # Setup our new tmsh command string
    set listenerColumn(Name) [format "%s_%s_%s" $addl_vs_basename $listenerIdx $listenerColumn(Port)]
    set listenerColumn(Dest) [get_dest_str $listenerColumn(Addr) $listenerColumn(Port)]

    # Check to see if there is a potential overlap with the feature__redirectToHTTPS functionality
    if { $listenerColumn(Dest) eq [format "%s:80" $vs_dest_addr] } {
      set listenerRedirOverlap 1
    }

    debug [list virtual_server add_listeners $listenerIdx] [format "name=%s addr=%s port=%s dest=%s" $listenerColumn(Name) $listenerColumn(Addr) $listenerColumn(Port) $listenerColumn(Dest)] 7
    set vs_listener_cmd [string map [list $vs__Name $listenerColumn(Name) "$vs_dest_addr:$pool__port" $listenerColumn(Dest) $default_pool_name $listenerColumn(Pool)] $vs_origcmd]
    # If our listener address is IPv6 we need to fixup the VS source filter and destination mask
    if { [is_ipv6 $listenerColumn(Addr)] } {
      set vs_listener_cmd [string map [list $vs__SourceAddress [format "::%%%s/0" $rd]] $vs_listener_cmd]
      set vs_listener_cmd [string map [list $pool__mask [format "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff" $pool__mask]] $vs_listener_cmd]
    }

    set vs_listener_cmd [string map $listenerMap $vs_listener_cmd]

    debug [list virtual_server add_listeners $listenerIdx tmsh_create] $vs_listener_cmd 1
    tmsh::create $vs_listener_cmd
    incr listenerIdx
  }

  if { !$listenerRedirOverlap } {
    # Add a listener for the default virtual server redirect
    lappend redirect_listeners [list [format "%s:80" $vs_dest_addr] [format "%s_default_vs_redirect_80" $app]]
  }
} else {
  debug [list virtual_server skip_create] "found 255.255.255.254 as pool__addr, skipping creation" 2
}

# Call the custom_extensions_after_vs proc to allow site-specific customizations
custom_extensions_after_vs

# Create an additional virtual server on port 80 for feature__redirectToHTTPS
if { $feature__redirectToHTTPS eq "enabled" && $pool__addr ne "255.255.255.254" } {
  set redirect_listener_idx 0
  debug [list virtual_server feature__redirectToHTTPS redirect_listeners] $redirect_listeners 7
  foreach redirect_listener_list $redirect_listeners {
    set redirect_listener [lindex $redirect_listener_list 0]
    set redirect_listener_name [lindex $redirect_listener_list 1]
    debug [list virtual_server feature__redirectToHTTPS $redirect_listener_idx] [format "dest=%s name=%s" $redirect_listener $redirect_listener_name] 5

    regexp {^(.*)[:.]([0-9]{1,5})$} $redirect_listener --> redirect_listener_addr redirect_listener_port

    set redirect_listener_dest [get_dest_str $redirect_listener_addr $redirect_listener_port]
    debug [list virtual_server feature__redirectToHTTPS $redirect_listener_idx] [format "creating redirect virtual server on %s" $redirect_listener_dest] 5

    array set redirect_listener_options {
     "redirect_listener_mask" "mask"
     "redirect_listener_src" "source"
     "vs__IpProtocol" "ip-protocol"
    }

    if { $feature__easyL4Firewall == "enabled" } {
      set redirect_listener_options(fw_name) "fw-enforced-policy"
      debug [list virtual_server feature__redirectToHTTPS $redirect_listener_idx fw_check] [format "feature__easyL4Firewall is enabled, using %s" $redirect_listener_options(fw_name)] 5
    }

    if { [is_ipv6 $redirect_listener_addr] } {
      set redirect_listener_src [format "::0.0.0.0%%%s/0" $rd]
      set redirect_listener_mask "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
    } else {
      set redirect_listener_src $vs__SourceAddress
      set redirect_listener_mask "255.255.255.255"
    }

    set redirect_listener_cmd [format "ltm virtual %s/%s destination %s " $app_path $redirect_listener_name $redirect_listener_dest]

    # Process the vs_options array
    foreach {optionvar optioncmd} [array get redirect_listener_options] {
      append redirect_listener_cmd [generic_add_option [list virtual_server feature__redirectToHTTPS $redirect_listener_idx options] [set [subst $optionvar]] $optioncmd "" 0]
    }

    # The HSTS spec recommends that when redirected a 301 Redirect is used, rather than a 302 like _sys_https_redirect uses
    if { [string match "enabled*" $feature__securityEnableHSTS] } {
      debug [list virtual_server feature__redirectToHTTPS $redirect_listener_idx hsts_check] [format "feature__securityEnableHSTS is enabled, using %s" $hstsredirectrule] 5
      append redirect_listener_cmd " rules { $hstsredirectrule } "
    } else {
      append redirect_listener_cmd " rules { /Common/_sys_https_redirect } "
    }

    append redirect_listener_cmd $vsprofiles_redirect
    append redirect_listener_cmd [generic_add_option [list virtual_server feature__redirectToHTTPS $redirect_listener_idx options] $vs__ProfileHTTP "" "" 0]
    append redirect_listener_cmd " \}"
    debug [list virtual_server feature__redirectToHTTPS $redirect_listener_idx tmsh_create] $redirect_listener_cmd 1
    tmsh::create $redirect_listener_cmd
    incr redirect_listener_idx
  }
}

# Create iCall statistics publisher
debug [list stats] [format "mode=%s iapp__appStats=%s" $mode $iapp__appStats] 7
if { ($iapp__appStats eq "enabled") } {
  # Create the iCall stats publisher
  debug [list stats] "creating icall stats publisher" 7
      # START EMBEDDED ICALL SCRIPT
  set icall_script_tmpl {
# Copyright (c) 2017 F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
#
set app %APP_NAME%
set partition %PARTITION%
set aso "sys.application.service /$partition/${app}.app/$app"

set enabled_stats {}

set pool_enabled %POOL_ENABLED%
set vs_enabled %VS_ENABLED%
set http_enabled %HTTP_ENABLED%
set ssl_enabled %SSL_ENABLED%

if { $pool_enabled } { lappend enabled_stats "pool" }
if { $vs_enabled } { lappend enabled_stats "virtual" }
if { $http_enabled } { lappend enabled_stats "http" }
if { $ssl_enabled } { lappend enabled_stats "ssl" }

set virtual_path    "ltm virtual /$partition/${app}.app/%VS_NAME%"
set http_path       "ltm profile http %HTTP_PROFILE%"
set ssl_path        "ltm profile client-ssl %SSL_PROFILE%"
set pool_path       "ltm pool /$partition/${app}.app/%POOL_NAME%"

#puts "app=$app"
#puts "partition=$partition"
#puts "aso=$aso"
#puts "virtual_path=$virtual_path"
#puts "http_path=$http_path"
#puts "pool_path=$pool_path"

# these lists represent strings taken from "show ... field-fmt"
set http_stats {
  get-reqs number-reqs post-reqs resp-2xx-cnt resp-3xx-cnt resp-4xx-cnt
  resp-5xx-cnt resp-bucket-1k resp-bucket-2m resp-bucket-4k resp-bucket-16k
  resp-bucket-32k resp-bucket-64k resp-bucket-128k resp-bucket-512k
  resp-bucket-large
}
set ssl_stats {
  common.cipher-uses.adh-keyxchg common.cipher-uses.aes-bulk common.cipher-uses.aes-gcm-bulk
  common.cipher-uses.des-bulk common.cipher-uses.dh-rsa-keyxchg common.cipher-uses.dhe-dss-keyxchg
  common.cipher-uses.ecdh-ecdsa-keyxchg common.cipher-uses.ecdh-rsa-keyxchg
  common.cipher-uses.ecdhe-ecdsa-keyxchg common.cipher-uses.ecdhe-rsa-keyxchg
  common.cipher-uses.edh-rsa-keyxchg common.cipher-uses.idea-bulk common.cipher-uses.md5-digest
  common.cipher-uses.null-bulk common.cipher-uses.null-digest common.cipher-uses.rc2-bulk
  common.cipher-uses.rc4-bulk common.cipher-uses.rsa-keyxchg common.cipher-uses.sha-digest
  common.cur-compat-conns common.cur-conns common.cur-native-conns common.decrypted-bytes-in
  common.decrypted-bytes-out common.encrypted-bytes-in common.encrypted-bytes-out
  common.fatal-alerts common.fully-hw-accelerated-conns common.handshake-failures
  common.insecure-handshake-accepts common.insecure-handshake-rejects common.insecure-renegotiation-rejects
  common.max-compat-conns common.max-conns common.max-native-conns
  common.non-hw-accelerated-conns common.partially-hw-accelerated-conns
  common.protocol-uses.dtlsv1 common.protocol-uses.sslv2 common.protocol-uses.sslv3
  common.protocol-uses.tlsv1 common.protocol-uses.tlsv1-1 common.protocol-uses.tlsv1-2
  common.secure-handshakes common.tot-compat-conns common.tot-native-conns
}
set virtual_stats {
    clientside.bits-in clientside.bits-out clientside.cur-conns
    clientside.max-conns clientside.pkts-in clientside.pkts-out
    clientside.tot-conns status.availability-state status.enabled-state
    status.status-reason
}
set pool_stats {
    active-member-cnt serverside.bits-in serverside.bits-out
    serverside.cur-conns serverside.max-conns serverside.pkts-in
    serverside.pkts-out serverside.tot-conns
}

# loop over each type of object we want to look at, building the name
# of the path and the stats for it as needed
foreach type $enabled_stats {
    # making this its own variable made the Tcl validator stop throwing
    # a warning - though it _should_ be fine to move it inline w/its use
    set path [set ${type}_path]
    set objs [tmsh::get_status $path raw]
    if { [llength $objs] == 0 } {
        puts "no object found for: $type"
        continue
    }
    set obj [lindex $objs 0]
    #puts "obj=$obj"
    foreach stat [set ${type}_stats] {
        #puts " stat=$stat"
        set value [tmsh::get_field_value $obj $stat]
        #puts " aso=$aso type=$type stat=$stat value=$value"
        # associate the iStat with the app service
        istats::set "$aso string $stat" $value
    }
}

# Set an additional iStat for the size of the pool, as this is not
# stored as a stat but is nice to have when looking at pool health.
# Do that here each run through rather than in the iApp because if
# an external pool is used or strictness was off the size of the
# pool can change and the iApp wouldn't run to adjust the size
if { $pool_enabled } {
  set pools [tmsh::get_config $pool_path]
  set numpools [llength $pools]
  set pool_size 0
  #puts "numpools=$numpools pool_size=$pool_size"
  if { $numpools == 1 } {
    # safe to assume only obj in list is our pool now. grab its size
    # and move along
    set pool [lindex $pools 0]
    set fdx 0
    set fields [tmsh::get_field_names nested $pool]
    set field_count [llength $fields]
    while { $fdx < $field_count } {
      set field [lindex $fields $fdx]
      #puts "field=$field"
      incr fdx
      if { $field eq "members"} {
        set pool_size [llength [tmsh::get_field_value $pool members]]
        #puts "new pool_size=$pool_size"
      }
    }
  }
  istats::set "$aso string total-member-cnt" $pool_size
}
#set tmc [istats::get $aso total-member-cnt]
#puts "tmc=$tmc"
  }; # END EMBEDDED ICALL SCRIPT

  set stats_pool 0
  if { $poolCount > 0 && $default_pool_name ne "" } {
    set stats_pool 1
  }

  if { [expr {$feature__statsHTTP eq "enabled" || $feature__statsHTTP eq "auto"}] && [string length $vs__ProfileHTTP] > 0 } {
    debug [list stats feature_statsHTTP] "enabling HTTP stats" 7
    set feature__statsHTTP 1
  } else {
    set feature__statsHTTP 0
  }

  if { [expr {$feature__statsTLS eq "enabled" || $feature__statsTLS eq "auto"}] && [string length $vs__ProfileClientSSL] > 0 } {
    debug [list stats feature_statsTLS] "enabling TLS stats" 7
    set feature__statsTLS 1
  } else {
    set feature__statsTLS 0
  }

  # used to fill in variables within iCall script
  set script_map [list %APP_NAME%      $app \
                       %VS_NAME%       $vs__Name \
                       %POOL_NAME%     $default_pool_name \
                       %PARTITION%     $partition \
                       %POOL_ENABLED%  $stats_pool \
                       %VS_ENABLED%    $stats_vs \
                       %HTTP_ENABLED%  $feature__statsHTTP \
                       %HTTP_PROFILE%  [format "%s" $vs__ProfileHTTP] \
                       %SSL_ENABLED%   $feature__statsTLS \
                       %SSL_PROFILE%   [format "%s" $vs__ProfileClientSSL] ]

  set icall_script_src [string map $script_map $icall_script_tmpl]
  debug [list stats icall_src] $icall_script_src 10

  debug [list stats icall_script tmsh_create] "publish_stats script" 1
  tmsh::create sys icall script publish_stats definition \{ $icall_script_src \}
  debug [list stats icall_handler tmsh_create] "iCall handler" 1
  tmsh::create sys icall handler periodic publish_stats interval 60 script publish_stats
}

# Process deferred deployment bundled ASM policies
set bundler_asm_policies [get_items_starting_with "asm:" $vs__BundledItems]
set bundler_apm_policies [get_items_starting_with "apm:" $vs__BundledItems]
set bundler_asm_deploy []
set bundler_apm_deploy []
set bundler_all_deploy 0
set postdeploy_final_state 1

# First perform all our checks
if { [llength $bundler_asm_policies] > 0 } {
  if { ![is_provisioned asm]} {
    error "A bundled ASM policy was selected, however, the ASM module is not provisioned on this device"
  }

  if { [string length $vs__ProfileHTTP] == 0 } {
    error "A HTTP Profile is required to use ASM functionality"
  }
}

if { [llength $bundler_apm_policies] > 1 } {
  error "Only one bundled APM policy may be selected for deployment"
}

if { [llength $bundler_apm_policies] == 1 } {
  if { ![is_provisioned apm]} {
    error "A bundled APM policy was selected, however, the APM module is not provisioned on this device"
  }
  if { [string length $vs__ProfileHTTP] == 0 } {
    error "A HTTP Profile is required to use APM functionality"
  }
}

# Process deferred deployment bundled ASM policies
set bundler_asm_mode 0
if { [llength $bundler_asm_policies] > 0 } {
  foreach bundled_asm $bundler_asm_policies {
    set bundled_asm_isurl 0
    if { [string match "asm:url=*" $bundled_asm] } {
      set bundled_asm_isurl 1
      set bundled_asm_url [url_subst $bundled_asm]
      regexp {^.*/(.*).xml} $bundled_asm_url -> bundled_asm_stripped
      set bundled_asm_filename [format "/var/tmp/appsvcs_asm_%s_%s_%s.xml" $::app $bundled_asm_stripped $bundler_timestamp]
    } else {
      set bundled_asm_stripped [string map {"asm:" ""} $bundled_asm]
      set bundled_asm_filename [format "/var/tmp/appsvcs_asm_%s_%s_%s.xml" $::app $bundled_asm_stripped $bundler_timestamp]
    }

    debug [list bundler asm check_preserve] [format "%s %s" $bundled_asm [string match *$bundled_asm* [get_items_starting_with "asm:" [get_var vs__BundledItems]]]] 7
    if { $newdeploy || \
         [expr { $redeploy && [string match redeploy* $iapp__asmDeployMode]}] || \
         [expr { $redeploy && [string match *$bundled_asm* [get_items_starting_with "asm:" [get_var vs__BundledItems]]]}] == 0 } {
      debug [list bundler asm deploy] $bundled_asm 5
      set bundler_asm_mode 1

      if { $bundled_asm_isurl } {
        curl_save_file $bundled_asm_url $bundled_asm_filename
      } else {
        if {! [info exists bundler_objects($bundled_asm)] } {
          error "A bundled ASM policy named '$bundled_asm' was not found in the template"
        }

        set outfile [open $bundled_asm_filename w]
        puts -nonewline $outfile [::base64::decode $bundler_data($bundled_asm)]
        close $outfile
      }
    } else {
      set bundler_asm_mode 2
      set savecmd [format "asm policy %s/%s min-xml-file %s" $app_path $bundled_asm_stripped $bundled_asm_filename]
      debug [list bundler asm preserve] [format "preserving existing policy... save to %s" $bundled_asm_filename] 5
      debug [list bundler asm preserve tmsh_save] $savecmd 1
      tmsh::save $savecmd
    }
    lappend bundler_asm_deploy $bundled_asm_stripped
    incr bundler_all_deploy
  }
}

# Process deferred deployment bundled APM policies
set bundler_apm_mode 0

if { [llength $bundler_apm_policies] == 1 } {
  set bundled_apm [lindex $bundler_apm_policies 0]

  set bundled_apm_isurl 0
  if { [string match "apm:url=*" $bundled_apm] } {
    set bundled_apm_isurl 1
    set bundled_apm_url [url_subst $bundled_apm]
    regexp {^.*/(.*).tar.gz} $bundled_apm_url -> bundled_apm_stripped
    set bundled_apm_filename [format "/var/tmp/appsvcs_apm_%s_%s_%s.tar.gz" $::app $bundled_apm_stripped $bundler_timestamp]
  } else {
    set bundled_apm_stripped [string map {"apm:" ""} $bundled_apm]
    set bundled_apm_filename [format "/var/tmp/appsvcs_apm_%s_%s_%s.tar.gz" $::app $bundled_apm_stripped $bundler_timestamp]
  }

  debug [list bundler apm check_preserve] [format "%s %s" $bundled_apm [string match *$bundled_apm* [get_items_starting_with "apm:" [get_var vs__BundledItems]]]] 7
  if { $newdeploy || \
       [expr { $redeploy && [string match redeploy* $iapp__apmDeployMode]}] || \
       [expr { $redeploy && [llength [get_items_starting_with "apm:" [get_var vs__BundledItems]]]}] == 0 } {
    debug [list bundler apm deploy] $bundled_apm 5
    set bundler_apm_mode 1

    if { $bundled_apm_isurl } {
      curl_save_file $bundled_apm_url $bundled_apm_filename
    } else {
      if {! [info exists bundler_objects($bundled_apm)] } {
        error "A bundled APM policy named '$bundled_apm' was not found in the template"
      }

      debug [list bundler apm deploy version_check] [format "bundled_version=%s system_version=%s" $bundler_objects($bundled_apm) $version_info(version)] 7
      if {! [string match $bundler_objects($bundled_apm)* $version_info(version)] } {
        error "The bundled APM policy '$bundled_apm' requires BIG-IP version $bundler_objects($bundled_apm).  This system is running version $version_info(version)"
      }

      set outfile [open $bundled_apm_filename w]
      fconfigure $outfile -translation binary
      puts -nonewline $outfile [::base64::decode $bundler_data($bundled_apm)]
      close $outfile
    }
  } else {
    debug [list bundler apm preserve] $bundled_apm 5
    set bundler_apm_mode 2
    set bundled_apm_export_filename [format "appsvcs_apm_%s_%s_%s" $::app $bundled_apm_stripped $bundler_timestamp]
    switch -glob $version_info(version) {
      11.5* {
        #ng_export <access_profile_name> <filename> [<partition>] FIXTHIS
        set bundler_apm_exportcmd [format "/usr/bin/env REMOTEUSER=admin USER=admin /usr/bin/ng_export %s.app/bundled_apm_policy %s %s" $app $bundled_apm_export_filename $partition]
        set bundler_apm_renamecmd [format "mv /tmp/%s.conf.tar.gz %s" $bundled_apm_export_filename $bundled_apm_filename]
      }
      11.6* {
        set bundler_apm_exportcmd [format "/usr/bin/env REMOTEUSER=admin USER=admin /usr/bin/ng_export %s.app/bundled_apm_policy %s -p %s" $app $bundled_apm_export_filename $partition]
        set bundler_apm_renamecmd [format "mv /tmp/profile-%s.conf.tar.gz %s" $bundled_apm_export_filename $bundled_apm_filename]
      }
      12.* {
        set bundler_apm_exportcmd [format "/usr/bin/env REMOTEUSER=admin USER=admin /usr/bin/ng_export %s.app/bundled_apm_policy %s -p %s" $app $bundled_apm_export_filename $partition]
        set bundler_apm_renamecmd [format "mv /tmp/profile-%s.conf.tar.gz %s" $bundled_apm_export_filename $bundled_apm_filename]
      }
      default { error "The TMOS version running on this device does not support the preserve APM deployment modes" }
    }
    debug [list bundler apm preserve] [format "preserving existing policy... save to %s" $bundled_apm_filename] 5
    debug [list bundler apm preserve export_cmd] $bundler_apm_exportcmd 1
    debug [list bundler apm preserve rename_cmd] $bundler_apm_renamecmd 1
    eval exec $bundler_apm_exportcmd
    eval exec $bundler_apm_renamecmd

  }
  lappend bundler_apm_deploy $bundled_apm_stripped
  incr bundler_all_deploy
}

if { $bundler_all_deploy } {
  set postdeploy_final_state 0
  set bundler_enablevs 0
  if { [string match *\-block $iapp__asmDeployMode] || [string match *\-block $iapp__apmDeployMode] } {
    set bundler_vs_cmd [format "ltm virtual %s/%s disabled" $app_path $vs__Name]
    debug [list bundler check_deploy_mode] "iapp__(asm|apm)DeployMode specified block mode, disabling virtual server" 5
    debug [list bundler check_deploy_mode tmsh_modify] $bundler_vs_cmd 1
    tmsh::modify $bundler_vs_cmd
    set bundler_enablevs 1
  }

  set bundler_icall_tmpl {
sys icall script %APP_PATH%/postdeploy_bundler {
    app-service %APP_PATH%/%APP_NAME%
    definition {
set app %APP_NAME%
set app_path %APP_PATH%
set partition %PARTITION%
set vs_name %VS_NAME%
set enable_vs %ENABLEVS%
set asm_policy_list [list %ASMPOLICYLIST%]
set apm_policy_list [list %APMPOLICYLIST%]
set all_policy_list [list %ASMPOLICYLIST% %APMPOLICYLIST%]
set timestamp %TIMESTAMP%
set apm_import_cmd [list %APMIMPORTCMD%]
set newdeploy %NEWDEPLOY%
set redeploy %REDEPLOY%
set apm_associate %APMASSOCIATE%
set asm_mode %ASMMODE%
set apm_mode %APMMODE%
set strict_updates %STRICTUPDATES%

set aso "/$partition/${app}.app/$app"
set iaso [format "sys.application.service %s" $aso]
set logprefix "\[appsvcs_postdeploy_bundler\]\[$app\]"

set systemTime [clock seconds]
puts "$logprefix Starting at [clock format $systemTime -format %D] [clock format $systemTime -format %H:%M:%S]"

set file_found 0
foreach policy $asm_policy_list {
	set policy_filename [format "/var/tmp/appsvcs_asm_%s_%s_%s.xml" $app $policy $timestamp]
	puts "$logprefix Looking for file '$policy_filename'..."
	if { [file exists $policy_filename] } {
		puts "$logprefix  Found file matching policy '$policy' at '$policy_filename'"
		incr file_found
	}
}

foreach policy $apm_policy_list {
	set policy_filename [format "/var/tmp/appsvcs_apm_%s_%s_%s.tar.gz" $app $policy $timestamp]

	puts "$logprefix Looking for file '$policy_filename'..."
	if { [file exists $policy_filename] } {
		puts "$logprefix Found file matching policy '$policy' at '$policy_filename'"
		incr file_found
	}
}

puts "$logprefix [llength $all_policy_list] policies selected for deployment, $file_found policy files found"

if { $file_found != [llength $all_policy_list] } {
		puts "$logprefix All policy files were not found, exiting (this is normal on the secondary device)"
		exit 0
}

tmsh::cd $app_path
puts "$logprefix Setting iCall handler to inactive..."
tmsh::modify sys application service $aso strict-updates disabled
tmsh::modify sys icall handler periodic postdeploy_bundler status inactive

istats::set [format "%s string deploy.postdeploy_bundler" $iaso] "ASM_IN_PROGRESS"
foreach policy $asm_policy_list {
	istats::set [format "%s string deploy.postdeploy_bundler.asm.%s" $iaso $policy] "DEPLOY_IN_PROGRESS"
	set policy_filename [format "/var/tmp/appsvcs_asm_%s_%s_%s.xml" $app $policy $timestamp]
	puts "$logprefix Loading ASM policy from $policy_filename to ASO $aso..."
	tmsh::load asm policy $policy file $policy_filename overwrite
	tmsh::modify asm policy $policy app-service $aso

	puts "$logprefix  Setting ASM policy $app_path/$policy active..."
	tmsh::modify asm policy $policy active

	puts "$logprefix  Deleting file $policy_filename..."
	file delete $policy_filename
	istats::set [format "%s string deploy.postdeploy_bundler.asm.%s" $iaso $policy] "DEPLOY_COMPLETE"

}
istats::set [format "%s string deploy.postdeploy_bundler" $iaso] "ASM_COMPLETE"

istats::set [format "%s string deploy.postdeploy_bundler" $iaso] "APM_IN_PROGRESS"
set apm_apply 0
foreach policy $apm_policy_list {
	istats::set [format "%s string deploy.postdeploy_bundler.apm.%s" $iaso $policy] "DEPLOY_IN_PROGRESS"
	set policy_filename [format "/var/tmp/appsvcs_apm_%s_%s_%s.tar.gz" $app $policy $timestamp]

	if { $redeploy && $apm_mode == 2 } {
		catch { tmsh::modify [format "ltm virtual %s/%s profiles delete \{ %s/bundled_apm_policy \{ \} \}" $app_path $vs_name $app_path]
				tmsh::delete apm profile access bundled_apm_policy
				tmsh::delete apm policy access-policy bundled_apm_policy }
	}

	puts "$logprefix Loading APM policy from $policy_filename to ASO $aso..."
	eval exec $apm_import_cmd 2>&1

	# Iterate through all the create APM objects and set the ASO
	foreach {apm_obj} [tmsh::get_config /apm] {
		set apm_objname [lrange $apm_obj 0 end-1]
		tmsh::modify [format "%s app-service %s" $apm_objname $aso]
	}

	puts "$logprefix  Applying APM policy $app_path/bundled_apm_policy..."
	# We need to sleep outside of scriptd to allow TMM to commit the APM config
	# Credit to F5 iApp team/CTX VDI iApp for finding this
    set fn [format "/var/tmp/appsvcs_apmapply_%s.sh" $app]
    catch {
        set fh [open $fn w]
        puts $fh "sleep 5"
        puts $fh [format "tmsh modify apm profile access %s/bundled_apm_policy generation-action increment" $app_path]
        if { $enable_vs } {
        	set apm_apply 1
			puts "$logprefix   Re-enabling Virtual Server after apply operation completes (block modifier was specified in deployment mode)"
        	puts $fh [format "tmsh modify ltm virtual %s/%s enabled" $app_path $vs_name]
        }
        close $fh
        exec chmod 777 $fn
        exec $fn &
    } {}

	if { $apm_associate } {
		puts "$logprefix  Associating APM policy with VS (use-bundled value specified for vs__ProfileAccess)"
		tmsh::modify [format "ltm virtual %s/%s profiles add \{ %s/bundled_apm_policy \{ \} \}" $app_path $vs_name $app_path]
	}

	puts "$logprefix  Deleting file $policy_filename..."
	file delete $policy_filename
	istats::set [format "%s string deploy.postdeploy_bundler.apm.%s" $iaso $policy] "DEPLOY_COMPLETE"
}
istats::set [format "%s string deploy.postdeploy_bundler" $iaso] "APM_COMPLETE"

istats::set [format "%s string deploy.postdeploy_bundler" $iaso] "DEFERRED_CMDS_IN_PROGRESS"
%DEFERREDCMDS%
istats::set [format "%s string deploy.postdeploy_bundler" $iaso] "DEFERRED_CMDS_COMPLETE"

puts "$logprefix Bundled policy deployment completed"

if { $enable_vs && ! $apm_apply} {
	puts "$logprefix Re-enabling Virtual Server (block modifier was specified in deployment mode)"
	tmsh::modify [format "ltm virtual %s/%s enabled" $app_path $vs_name]
}

# puts "$logprefix Delaying to ensure completion..."
# after 10000

set dellist {}
lappend dellist [format "/var/tmp/appsvcs_apmapply_%s.sh" $app]
# lappend dellist [format "/var/tmp/appsvcs_postdeploy_%s.conf" $app]
# lappend dellist [format "/var/tmp/appsvcs_load_postdeploy_%s.sh" $app]

puts "$logprefix Cleaning up..."
foreach df $dellist {
	if { [file exists $df] } {
		puts "$logprefix  Deleting file '$df'"
		file delete $df
	}
}

tmsh::delete sys icall handler periodic postdeploy_bundler
tmsh::modify sys icall handler periodic postdeploy_final first-occurrence now status active
if { $strict_updates eq "enabled" } {
	tmsh::modify sys application service $aso strict-updates enabled
}

set systemTime [clock seconds]
puts "$logprefix Finished at [clock format $systemTime -format %D] [clock format $systemTime -format %H:%M:%S]"
istats::set [format "%s string deploy.postdeploy_bundler" $iaso] "FINISHED"
    }
    description none
    events none
}

sys icall handler periodic %APP_PATH%/postdeploy_bundler {
    app-service %APP_PATH%/%APP_NAME%
    first-occurrence %ICALLTIME%
    interval 3000
    last-occurrence now+10m
    script %APP_PATH%/postdeploy_bundler
    status active
}
  };

  set bundler_apm_importcmd ""
  if { [llength $bundler_apm_policies] == 1 } {
    switch -glob $version_info(version) {
      11.5* {
        #ng_export <access_profile_name> <filename> [<partition>]
        set bundler_apm_importcmd [format "/usr/bin/ng_import %s %s.app/bundled_apm_policy %s" $bundled_apm_filename $app $partition]
      }
      11.6* {
        #ng_import [-s] <templatefile.conf.tar[.gz]> <new_name> [-p|-partition <partition>]
        set bundler_apm_importcmd [format "/usr/bin/ng_import %s %s.app/bundled_apm_policy -p %s" $bundled_apm_filename $app $partition]
      }
      12.* {
        #ng_import [-s] <templatefile.conf.tar[.gz]> <new_name> [-p|-partition <partition>]
        set bundler_apm_importcmd [format "/usr/bin/ng_import %s %s.app/bundled_apm_policy -p %s" $bundled_apm_filename $app $partition]
      }
      default { error "The TMOS version running on this device does not support the preserve APM deployment modes" }
    }
  }

  set bundler_icall_time [clock format [expr {[clock seconds] + $::POSTDEPLOY_DELAY}] -format {%Y-%m-%d:%H:%M:%S}]
  set bundler_script_map [list %APP_NAME%  $::app \
                       %APP_PATH%      $::app_path \
                       %VS_NAME%       $::vs__Name \
                       %PARTITION%     $::partition \
                       %ENABLEVS%      $bundler_enablevs \
                       %ASMPOLICYLIST% $bundler_asm_deploy \
                       %APMPOLICYLIST% $bundler_apm_deploy \
                       %TIMESTAMP%     $bundler_timestamp \
                       %APMIMPORTCMD%  $bundler_apm_importcmd \
                       %ICALLTIME%     $bundler_icall_time \
                       %NEWDEPLOY%     $newdeploy \
                       %REDEPLOY%      $redeploy \
                       %ASMMODE%       $bundler_asm_mode \
                       %APMMODE%       $bundler_apm_mode \
                       %APMASSOCIATE%  $bundler_apm_associate \
                       %DEFERREDCMDS%  [join $bundler_deferred_cmds "\n"] \
                       %STRICTUPDATES% $iapp__strictUpdates ]

  set bundler_icall_src [string map $bundler_script_map $bundler_icall_tmpl]
  debug [list bundler icall_src] [format "%s" $bundler_icall_src] 10
  debug [list bundler icall_handler] [format "creating iCall handler; executing postdeploy script at: %s" $bundler_icall_time] 7

  set fn [format "/var/tmp/appsvcs_postdeploy_%s.conf" $app]
  catch {
      set fh [open $fn w]
      puts $fh $bundler_icall_src
      close $fh
  } {}

  debug [list bundler deploy] "Bundled policy deployment will complete momentarily..." 5
}

if { [string length $vs__RouteAdv] > 0 && $vs__RouteAdv ne "disabled" } {
  switch $vs__RouteAdv {
    "any_vs" { set routeadv_mode "any" }
    "all_vs" { set routeadv_mode "all" }
    "always" { set routeadv_mode "none" }
    default { error "The value specified for the Route Advertisement mode (vs__RouteAdv) is invalid" }
  }
  debug [list virtual_address route-adv] [format "enabling route advertisement for virtual address %s with mode %s (postdeploy_final)" $vs_dest_addr $routeadv_mode] 5
  lappend postfinal_deferred_cmds [create_escaped_tmsh [format "tmsh::modify ltm virtual-address /%s/%s route-advertisement enabled" $partition $vs_dest_addr]]
  lappend postfinal_deferred_cmds [create_escaped_tmsh [format "tmsh::modify ltm virtual-address /%s/%s server-scope %s" $partition $vs_dest_addr $routeadv_mode]]
}

if { [string length $vs__VirtualAddrAdvOptions] > 0 } {
  set cmd [format "tmsh::modify ltm virtual-address /%s/%s" $partition $vs_dest_addr]
  if { [string length $vs__VirtualAddrAdvOptions] > 0 } {
    debug [list virtual_address adv_options] "processing advanced options string" 7
    append cmd [format " %s" [process_options_string $vs__VirtualAddrAdvOptions "" ""]]
  }
  debug [list virtual_address adv_options] $cmd 5
  lappend postfinal_deferred_cmds [create_escaped_tmsh $cmd]
}

# Call the custom_extensions_end proc to allow site-specific customizations
custom_extensions_end

set postfinal_icall_tmpl {
sys icall script %APP_PATH%/postdeploy_final {
    app-service %APP_PATH%/%APP_NAME%
    definition {
set app %APP_NAME%
set app_path %APP_PATH%
set partition %PARTITION%
set vs_name %VS_NAME%
set newdeploy %NEWDEPLOY%
set redeploy %REDEPLOY%
set strict_updates %STRICTUPDATES%

set aso "/$partition/${app}.app/$app"
set iaso [format "sys.application.service %s" $aso]
set logprefix "\[appsvcs_postdeploy_final\]\[$app\]"

set systemTime [clock seconds]
puts "$logprefix Starting at [clock format $systemTime -format %D] [clock format $systemTime -format %H:%M:%S]"

tmsh::cd $app_path
puts "$logprefix Setting iCall handler to inactive..."
tmsh::modify sys application service $aso strict-updates disabled
tmsh::modify sys icall handler periodic postdeploy_final status inactive

istats::set [format "%s string deploy.postdeploy_final" $iaso] "STARTED"
istats::set [format "%s string deploy.postdeploy_final" $iaso] "DEFERRED_CMDS_IN_PROGRESS"
puts "$logprefix Executing deferred commands..."
%DEFERREDCMDS%
puts "$logprefix Completed executing deferred commands..."
istats::set [format "%s string deploy.postdeploy_final" $iaso] "DEFERRED_CMDS_COMPLETE"

tmsh::delete sys icall handler periodic postdeploy_final
if { $strict_updates eq "enabled" } {
	tmsh::modify sys application service $aso strict-updates enabled
}
#tmsh::save sys config

set systemTime [clock seconds]
puts "$logprefix Finished at [clock format $systemTime -format %D] [clock format $systemTime -format %H:%M:%S]"
istats::set [format "%s string deploy.postdeploy_final" $iaso] [format "FINISHED_%s" $systemTime]
    }
    description none
    events none
}

sys icall handler periodic %APP_PATH%/postdeploy_final {
    app-service %APP_PATH%/%APP_NAME%
    first-occurrence %ICALLTIME%
    interval 3000
    last-occurrence now+10m
    script %APP_PATH%/postdeploy_final
    status %HANDLER_STATE%
}

cli script /Common/appsvcs_get_istat {
proc script::init {} {
}

proc script::run {} {
    if { $tmsh::argc < 2 } {
        puts "Please specify a iStat key to get"
        exit
    }
    puts [istats::get [lindex $tmsh::argv 1]]
}

proc script::help {} {
}

proc script::tabc {} {
}
}
};

set postfinal_handler_state "inactive"
if { $postdeploy_final_state } {
  set postfinal_handler_state "active"
}

set postfinal_deferred_cmds_str [join $postfinal_deferred_cmds "\n"]

set postfinal_icall_time [clock format [expr {[clock seconds] + $::POSTDEPLOY_DELAY}] -format {%Y-%m-%d:%H:%M:%S}]
set postfinal_script_map [list %APP_NAME%  $::app \
                     %APP_PATH%      $::app_path \
                     %VS_NAME%       $::vs__Name \
                     %PARTITION%     $::partition \
                     %ICALLTIME%     $postfinal_icall_time \
                     %NEWDEPLOY%     $newdeploy \
                     %REDEPLOY%      $redeploy \
                     %DEFERREDCMDS%  $postfinal_deferred_cmds_str \
                     %STRICTUPDATES% $iapp__strictUpdates \
                     %HANDLER_STATE% $postfinal_handler_state ]

set postfinal_icall_src [string map $postfinal_script_map $postfinal_icall_tmpl]
debug [list postfinal icall_src] [format "%s" $postfinal_icall_src] 10
debug [list postfinal icall_handler] [format "creating iCall handler; executing postdeploy_final script at: %s" $postfinal_icall_time] 7

set fn [format "/var/tmp/appsvcs_postdeploy_%s.conf" $app]
catch {
    if { $bundler_all_deploy } {
      set fh [open $fn a]
    } else {
      set fh [open $fn w]
    }
    puts $fh ""
    puts $fh $postfinal_icall_src
    close $fh
} {}

set fn [format "/var/tmp/appsvcs_load_postdeploy_%s.sh" $app]
catch {
    set fh [open $fn w]
    puts $fh "sleep 5"
    puts $fh [format "tmsh load sys config file /var/tmp/appsvcs_postdeploy_%s.conf merge" $app]
    puts $fh [format "rm -f /var/tmp/appsvcs_postdeploy_%s.conf" $app]
    puts $fh [format "rm -f /var/tmp/appsvcs_load_postdeploy_%s.sh" $app]
    close $fh
    exec chmod 777 $fn
    exec $fn &
} {}

if { $iapp__strictUpdates eq "disabled" } {
  debug [list strict_updates] "disabling strict updates" 5
  tmsh::modify [format "sys application service %s/%s strict-updates disabled" $app_path $app]
}

set runTime [expr {[clock seconds] - $startTime}]
debug [list stop] [format "Finished app_name=%s, total run time was %s seconds" $app $runTime] 0
            }
            macro {
            }
            presentation {
#
# Copyright (c) 2017 F5 Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed to in writing, software
#     distributed under the License is distributed on an "AS IS" BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#     See the License for the specific language governing permissions and
#     limitations under the License.
#

section intro {
	message hello
}

section iapp {
	choice strictUpdates default "enabled" {
		"enabled",
		"disabled"
	}
	choice appStats default "enabled" {
		"enabled",
		"disabled"
	}
	string mode display "large" default "auto"
	string logLevel display "large" default "7"
	string routeDomain display "large" default "auto"
	choice asmDeployMode display "large" default "preserve-bypass" {
		"preserve-bypass",
		"preserve-block",
		"redeploy-bypass",
		"redeploy-block"
	}
	choice apmDeployMode display "large" default "preserve-bypass" {
		"preserve-bypass",
		"preserve-block",
		"redeploy-bypass",
		"redeploy-block"
	}
}

section pool {
	string addr required display "large" validator "IpAddress" default ""
	string mask required display "large" validator "IpAddress" default "255.255.255.255"
	string port required display "small" validator "PortNumber" default ""
	string DefaultPoolIndex display "small" validator "NonNegativeNumber" default "0"
	table Pools {
		string Index display "small" validator "NonNegativeNumber" default "0"
		string Name display "medium" default ""
		string Description display "medium" default ""
		choice LbMethod display "medium" default "round-robin" {
			"dynamic-ratio-member",
			"dynamic-ratio-node",
			"fastest-app-response",
			"fastest-node",
			"least-connections-member",
			"least-connections-node",
			"least-sessions",
			"observed-member",
			"observed-node",
			"predictive-member",
			"predictive-node",
			"round-robin",
			"ratio-member",
			"ratio-node",
			"ratio-session",
			"ratio-least-connections-member",
			"ratio-least-connections-node",
			"weighted-least-connections-member"
		}
		string Monitor display "medium" default ""
		string AdvOptions display "medium" default ""
	}
	string MemberDefaultPort display "small" default ""
	table Members {
		string Index display "small" validator "NonNegativeNumber" default "0"
		editchoice IPAddress display "large" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list ltm node]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
		string Port display "small" default "80"
		string ConnectionLimit display "medium" default "0"
		string Ratio display "small" default "1"
		string PriorityGroup display "small" default "0"
		choice State display "large"  default "enabled" {
			"enabled",
			"drain-disabled",
			"disabled"
		}
		string AdvOptions display "medium"
	}
}

section monitor {
	table Monitors {
		string Index display "small" validator "NonNegativeNumber" default "0"
		string Name display "medium" default ""
		string Type display "medium" default ""
		string Options display "medium" default ""
	}
}

section vs {
	table Listeners {
		string Listener display "large"
		string Destination display "medium" default ""
	}
	string Name display "xxlarge" default ""
	string Description display "xxlarge" default ""
	choice RouteAdv display "medium" default "disabled" {
		"disabled",
		"all_vs",
		"any_vs",
		"always"
	}
	string SourceAddress display "large" default "0.0.0.0/0"
	string IpProtocol display "small" default "tcp"
	string ConnectionLimit display "medium" default "0"
	editchoice ProfileClientProtocol display "xxlarge" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {ltm profile tcp} {ltm profile udp} {ltm profile fastl4}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	editchoice ProfileServerProtocol display "xxlarge" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {ltm profile tcp} {ltm profile udp} {ltm profile fastl4}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	editchoice ProfileHTTP display "xxlarge" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {ltm profile http}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	editchoice ProfileOneConnect display "xxlarge" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {ltm profile one-connect}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	editchoice ProfileCompression display "xxlarge" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {ltm profile http-compression}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	string ProfileAnalytics display "large" default ""
	editchoice ProfileRequestLogging display "xxlarge" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {ltm profile request-log}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	editchoice ProfileDefaultPersist display "large" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {ltm persistence cookie} {ltm persistence dest-addr} {ltm persistence hash} {ltm persistence msrdp} {ltm persistence sip} {ltm persistence source-addr} {ltm persistence ssl} {ltm persistence universal}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	editchoice ProfileFallbackPersist display "large" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {ltm persistence cookie} {ltm persistence dest-addr} {ltm persistence hash} {ltm persistence msrdp} {ltm persistence sip} {ltm persistence source-addr} {ltm persistence ssl} {ltm persistence universal}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	editchoice SNATConfig display "large" default "automap" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {ltm snatpool}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	editchoice ProfileServerSSL display "xxlarge" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {ltm profile server-ssl}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	editchoice ProfileClientSSL display "large" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {ltm profile client-ssl}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	editchoice ProfileClientSSLCert display "large" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {sys file ssl-cert}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	editchoice ProfileClientSSLKey display "large" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {sys file ssl-key}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	editchoice ProfileClientSSLChain display "large" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {sys file ssl-cert}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	string ProfileClientSSLCipherString display "xxlarge" default "DEFAULT"
	string ProfileClientSSLAdvOptions display "xxlarge" default ""
	editchoice ProfileSecurityLogProfiles display "xxlarge" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {security log profile}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	editchoice ProfileSecurityIPBlacklist display "large"  default "none" {
		"none",
		"enabled-block",
		"enabled-log"
	}
	editchoice ProfileSecurityDoS display "xxlarge" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {security dos profile}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	editchoice ProfileAccess display "xxlarge" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {apm profile access}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	editchoice ProfileConnectivity display "xxlarge" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {apm profile connectivity}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	string ProfilePerRequest display "xxlarge" default ""
	choice OptionSourcePort display "large"  default "preserve" {
		"preserve",
		"preserve-strict",
		"change"
	}
	choice OptionConnectionMirroring default "disabled" {
		"enabled",
		"disabled"
	}
	editchoice Irules display "xxlarge" default "" tcl {
		tmsh::cd /
        set ::choices ""
	    set cmds [list {ltm rule}]
	    foreach cmd $cmds {
	      set objs [list]
	      set objs_status [catch {tmsh::get_config $cmd recursive} objs]
	      if { $objs_status == 1 } { continue }
	      foreach obj $objs {
	      	set name [string map {"\"" ""} [tmsh::get_name $obj]]
	      	if { $name ne "" } {
                append ::choices "/$name"
                append ::choices "\n"
		    }
	      }
	    }

        return [iapp::safe_display ::choices]
	}
		
	table BundledItems {
		editchoice Resource display "large"  {
			"irule:sorry_page",
			"asm:LAMP_rapid_utf-8",
			"asm:LAMP_PolicyBuilder"
		}
	}
	string AdvOptions display "xxlarge" default ""
	string AdvProfiles display "xxlarge" default ""
	string AdvPolicies display "xxlarge" default ""
	string VirtualAddrAdvOptions display "xxlarge" default ""
}

section l7policy {
	editchoice strategy display "large" default "/Common/first-match" {
		"/Common/first-match",
		"/Common/best-match",
		"/Common/all-match"
	}
	string defaultASM display "large" default "bypass"
	string defaultL7DOS display "large" default "bypass"
	table rulesMatch {
		string Group display "small" default ""
		editchoice Operand display "xlarge" {
			"client-ssl/request/cipher",
			"client-ssl/request/cipher-bits",
			"client-ssl/request/protocol",
			"client-ssl/response/cipher",
			"client-ssl/response/cipher-bits",
			"client-ssl/response/protocol",
			"http-basic-auth/request/username",
			"http-basic-auth/request/password",
			"http-cookie/request/all/name/&lt;name&gt;",
			"http-header/request/all/name/&lt;name&gt;",
			"http-header/request/all/name/&lt;name&gt;",
			"http-host/request/all",
			"http-host/request/host",
			"http-host/request/port",
			"http-method/request/all",
			"http-referer/request/all",
			"http-referer/request/extension",
			"http-referer/request/host",
			"http-referer/request/path",
			"http-referer/request/path-segment/index/&lt;index&gt;",
			"http-referer/request/port",
			"http-referer/request/query-parameter/name/&lt;name&gt;",
			"http-referer/request/scheme",
			"http-referer/request/unnamed-query-parameter/index/&lt;index&gt;",
			"http-set-cookie/response/domain/name/&lt;name&gt;",
			"http-set-cookie/response/expiry/name/&lt;name&gt;",
			"http-set-cookie/response/path/name/&lt;name&gt;",
			"http-set-cookie/response/value/name/&lt;name&gt;",
			"http-set-cookie/response/version/name/&lt;name&gt;",
			"http-status/response/all",
			"http-status/response/code",
			"http-status/response/text",
			"http-uri/request/all",
			"http-uri/request/extension",
			"http-uri/request/host",
			"http-uri/request/path",
			"http-uri/request/path-segment/index/&lt;index&gt;",
			"http-uri/request/port",
			"http-uri/request/query-parameter/name/&lt;name&gt;",
			"http-uri/request/scheme",
			"http-uri/request/unnamed-query-parameter/index/&lt;index&gt;",
			"http-version/request/all",
			"http-version/request/major",
			"http-version/request/minor",
			"http-version/request/protocol",
			"http-version/response/all",
			"http-version/response/major",
			"http-version/response/minor",
			"http-version/response/protocol",
			"ssl-cert/ssl-server-handshake/common-name/index/&lt;index&gt;",
			"ssl-extension/ssl-client-hello/alpn",
			"ssl-extension/ssl-client-hello/npn",
			"ssl-extension/ssl-client-hello/server-name",
			"ssl-extension/ssl-server-hello/alpn",
			"ssl-extension/ssl-server-hello/npn",
			"ssl-extension/ssl-server-hello/server-name",
			"tcp/request/mss/internal",
			"tcp/request/port/internal",
			"tcp/request/port/local",
			"tcp/request/route-domain/internal",
			"tcp/request/rtt/internal",
			"tcp/request/vlan/internal",
			"tcp/request/vlan-id/internal"
		}
		choice Negate display "small" default "no" {
			"no",
			"yes"
		}
		choice Condition display "large" {
			"equals",
			"starts-with",
			"ends-with",
			"contains",
			"greater",
			"greater-or-equal",
			"less",
			"less-or-equal"
		}
		string Value display "large" default ""
		choice CaseSensitive display "small" default "no" {
			"no",
			"yes"
		}
		choice Missing display "small" default "no" {
			"no",
			"yes"
		}
	}
	table rulesAction {
		string Group display "small" default ""
		editchoice Target display "xlarge" {
			"asm/request/enable/policy",
			"asm/request/disable",
			"cache/request/enable/pin",
			"cache/request/disable",
			"cache/response/enable/pin",
			"cache/respones/disable",
			"compress/request/enable",
			"compress/request/disable",
			"compress/response/enable",
			"compress/response/disable",
			"decompress/request/enable",
			"decompress/request/disable",
			"decompress/response/enable",
			"decompress/response/disable",
			"forward/request/reset",
			"forward/request/select/clone-pool",
			"forward/request/select/member",
			"forward/request/select/nexthop",
			"forward/request/select/node",
			"forward/request/select/pool",
			"forward/request/select/rateclass",
			"forward/request/select/snat",
			"forward/request/select/snatpool",
			"forward/request/select/vlan",
			"forward/request/select/vlan-id",
			"http/request/enable",
			"http/request/disable",
			"http-cookie/request/insert/name,value",
			"http-cookie/request/remove/name",
			"http-header/request/insert/name,value",
			"http-header/request/remove/name",
			"http-header/request/replace/name,value",
			"http-header/response/insert/name,value",
			"http-header/response/remove/name",
			"http-header/response/replace/name,value",
			"http-host/request/replace/value",
			"http-referer/request/insert/value",
			"http-referer/request/remove",
			"http-referer/request/replace/value",
			"http-reply/request/redirect/location",
			"http-reply/response/redirect/location",
			"http-set-cookie/response/insert/name,domain,path,value",
			"http-set-cookie/response/remove/name",
			"http-uri/response/replace/path,query-string,value",
			"l7dos/request/enable/from-profile",
			"l7dos/request/disable",
			"log/request/write/message",
			"log/response/write/message",
			"request-adapt/request/enable/internal-virtual-server",
			"request-adapt/request/disable",
			"request-adapt/response/enable/internal-virtual-server",
			"request-adapt/response/disable",
			"response-adapt/request/enable/internal-virtual-server",
			"response-adapt/request/disable",
			"response-adapt/response/enable/internal-virtual-server",
			"request-adapt/response/disable",
			"server-ssl/request/enable",
			"server-ssl/request/disable",
			"tcl/request/set-variable/name,expression",
			"tcl/response/set-variable/name,expression",
			"tcl/ssl-client-hello/set-variable/name,expression",
			"tcl/ssl-server-handshake/set-variable/name,expression",
			"tcl/ssl-server-hello/set-variable/name,expression",
			"tcp-nagle/request/enable",
			"tcp-nagle/request/disable"
		}
		string Parameter display "large" default ""
	}
}

section feature {
	choice statsTLS display "medium" default "auto" {
		"auto",
		"enabled",
		"disabled"
	}
	choice statsHTTP display "medium" default "auto" {
		"auto",
		"enabled",
		"disabled"
	}
	choice insertXForwardedFor display "medium" default "auto" {
		"auto",
		"enabled",
		"disabled"
	}
	choice redirectToHTTPS display "medium" default "auto" {
		"auto",
		"enabled",
		"disabled"
	}
	choice sslEasyCipher display "medium" default "disabled" {
		"compatible",
		"medium",
		"high",
		"tls_1.2",
		"tls_1.1+1.2",
		"disabled"
	}
	editchoice securityEnableHSTS display "xlarge" default "disabled" {
		"disabled",
		"enabled",
		"enabled-preload",
		"enabled-subdomain",
		"enabled-preload-subdomain"
	}
	choice easyL4Firewall display "xlarge" default "auto" {
		"auto",
		"base",
		"base+ip_blacklist_block",
		"base+ip_blacklist_log",
		"disabled"
	}
	table easyL4FirewallBlacklist {
		string CIDRRange display "large"
	}
	table easyL4FirewallSourceList {
		string CIDRRange display "large" default "0.0.0.0/0"
	}
}

section extensions {
	string Field1 display "xxlarge" default ""
	string Field2 display "xxlarge" default ""
	string Field3 display "xxlarge" default ""
}


text {
	intro "F5 Application Services Integration iApp v2.0.004 (Community Edition)"
	intro.hello "Introduction" "Please complete the following template"

	iapp "iApp Options"
	iapp.strictUpdates "iApp: Strict Updates"
	iapp.appStats "iApp: Statistics Handler Creation"
	iapp.mode "iApp: Mode"
	iapp.logLevel "iApp: Log Level"
	iapp.routeDomain "iApp: Route Domain"
	iapp.asmDeployMode "iApp: ASM: Deployment Mode"
	iapp.apmDeployMode "iApp: APM: Deployment Mode"

	pool "Virtual Server Listener & Pool Configuration"
	pool.addr "Virtual Server: Address"
	pool.mask "Virtual Server: Mask"
	pool.port "Virtual Server: Port"
	pool.DefaultPoolIndex "Virtual Server: Default Pool Index"
	pool.Pools "Pool: Pool Table"
	pool.Pools.Index "Index:"
	pool.Pools.Name "Name:"
	pool.Pools.Description "Description:"
	pool.Pools.LbMethod "LB Method:"
	pool.Pools.Monitor "Monitor(s):"
	pool.Pools.AdvOptions "Adv Options:"
	pool.MemberDefaultPort "Pool: Member Default Port"
	pool.Members "Pool: Members"
	pool.Members.Index "Pool Idx:"
	pool.Members.IPAddress "IP/Node Name:"
	pool.Members.Port "Port:"
	pool.Members.ConnectionLimit "Connection Limit:"
	pool.Members.Ratio "Ratio:"
	pool.Members.PriorityGroup "Priority Group:"
	pool.Members.State "State:"
	pool.Members.AdvOptions "Adv Options:"

	monitor "Pool Monitor(s) Configuration"
	monitor.Monitors "Monitor: Monitor Table"
	monitor.Monitors.Index "Index:"
	monitor.Monitors.Name "Name:"
	monitor.Monitors.Type "Type:"
	monitor.Monitors.Options "Options:"

	vs "Virtual Server Configuration"
	vs.Listeners "Virtual Server: Additional Listeners"
	vs.Listeners.Listener "Listener:"
	vs.Listeners.Destination "Destination"
	vs.Name "Virtual Server: Name"
	vs.Description "Virtual Server: Description"
	vs.RouteAdv "Virtual Server: Route Advertisement"
	vs.SourceAddress "Virtual Server: Source Address"
	vs.IpProtocol "Virtual Server: IP Protocol"
	vs.ConnectionLimit "Virtual Server: Virtual Server Connection Limit (0=unlimited)"
	vs.ProfileClientProtocol "Virtual Server: Client-side L4 Protocol Profile"
	vs.ProfileServerProtocol "Virtual Server: Server-side L4 Protocol Profile"
	vs.ProfileHTTP "Virtual Server: HTTP Profile"
	vs.ProfileOneConnect "Virtual Server: OneConnect Profile"
	vs.ProfileCompression "Virtual Server: Compression Profile"
	vs.ProfileAnalytics "Virtual Server: Analytics Profile"
	vs.ProfileRequestLogging "Virtual Server: Request Logging Profile"
	vs.ProfileDefaultPersist "Virtual Server: Default Persistence Profile"
	vs.ProfileFallbackPersist "Virtual Server: Fallback Persistence Profile"
	vs.SNATConfig "Virtual Server: SNAT Configuration (enter SNAT pool name, 'automap' or leave blank to disable SNAT)"
	vs.ProfileServerSSL "Virtual Server: Server SSL Profile"
	vs.ProfileClientSSL "Virtual Server: Client SSL Profile"
	vs.ProfileClientSSLCert "Virtual Server: Client SSL Certificate"
	vs.ProfileClientSSLKey "Virtual Server: Client SSL Key"
	vs.ProfileClientSSLChain "Virtual Server: Client SSL Certificate Chain"
	vs.ProfileClientSSLCipherString "Virtual Server: Client SSL Cipher String"
	vs.ProfileClientSSLAdvOptions "Virtual Server: Client SSL Advanced Options"
	vs.ProfileSecurityLogProfiles "Virtual Server: Security Logging Profiles"
	vs.ProfileSecurityIPBlacklist "Virtual Server: IP Blacklist Profile"
	vs.ProfileSecurityDoS "Virtual Server: Security: DoS Profile"
	vs.ProfileAccess "Virtual Server: Access Profile"
	vs.ProfileConnectivity "Virtual Server: Connectivity Profile"
	vs.ProfilePerRequest "Virtual Server: Per-Request Profile"
	vs.OptionSourcePort "Virtual Server: Source Port Behavior"
	vs.OptionConnectionMirroring "Virtual Server: Connection Mirroring"
	vs.Irules "Virtual Server: iRules (to specify multiple iRules seperate with a comma ex: irule1,irule2,irule3)"
	vs.BundledItems "Virtual Server: Bundled Items"
	vs.BundledItems.Resource "Resource:"
	vs.AdvOptions "Virtual Server: Advanced Options"
	vs.AdvProfiles "Virtual Server: Advanced Profiles"
	vs.AdvPolicies "Virtual Server: Advanced Policies"
	vs.VirtualAddrAdvOptions "Virtual Address: Advanced Options"

	l7policy "L7 Traffic Policy"
	l7policy.strategy "L7 Policy: Match Strategy"
	l7policy.defaultASM "L7 Policy: Default ASM Policy"
	l7policy.defaultL7DOS "L7 Policy: Default L7 DoS Policy"
	l7policy.rulesMatch "L7 Policy: Rules: Matching"
	l7policy.rulesMatch.Group "Group:"
	l7policy.rulesMatch.Operand "Operand:"
	l7policy.rulesMatch.Negate "Negate:"
	l7policy.rulesMatch.Condition "Condition:"
	l7policy.rulesMatch.Value "Value:"
	l7policy.rulesMatch.CaseSensitive "Case Sensitive:"
	l7policy.rulesMatch.Missing "Missing:"
	l7policy.rulesAction "L7 Policy: Rules: Action"
	l7policy.rulesAction.Group "Group:"
	l7policy.rulesAction.Target "Target:"
	l7policy.rulesAction.Parameter "Parameter:"

	feature "L4-7 Helpers"
	feature.statsTLS "TLS/SSL: Stats Reporting"
	feature.statsHTTP "HTTP: Stats Reporting"
	feature.insertXForwardedFor "HTTP: Insert X-Forwarded-For Header"
	feature.redirectToHTTPS "HTTP: Security: Create HTTP(80)->HTTPS(443) Redirect"
	feature.sslEasyCipher "TLS/SSL: Easy Cipher String (overrides VS section setting)"
	feature.securityEnableHSTS "HTTP: Security: Enable HTTP Strict Transport Security (only valid if ClientSSL is configured)"
	feature.easyL4Firewall "Security: Firewall: Configure L4 Firewall Policy"
	feature.easyL4FirewallBlacklist "Security: Firewall: Static Blacklisted Addresses (CIDR Format)"
	feature.easyL4FirewallBlacklist.CIDRRange "CIDR Block:"
	feature.easyL4FirewallSourceList "Security: Firewall: Static Allowed Source Addresses (CIDR Format)"
	feature.easyL4FirewallSourceList.CIDRRange "CIDR Block:"

	extensions "Custom Extensions Section"
	extensions.Field1 "Extensions: Field 1"
	extensions.Field2 "Extensions: Field 2"
	extensions.Field3 "Extensions: Field 3"

}
            }
            role-acl none
            run-as none
        }
    }
    description none
    ignore-verification false
    requires-bigip-version-max none
    requires-bigip-version-min none
    requires-modules { ltm }
    signing-key none
    tmpl-checksum none
    tmpl-signature none
}
